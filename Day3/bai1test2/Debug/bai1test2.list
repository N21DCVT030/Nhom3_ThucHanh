
bai1test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c8  080004d0  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c8  080004c8  000014d0  2**0
                  CONTENTS
  4 .ARM          00000000  080004c8  080004c8  000014d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c8  080004d0  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c8  080004c8  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004cc  080004cc  000014cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004d0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004d0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000417  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000250  00000000  00000000  00001917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00001b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000053  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000106d  00000000  00000000  00001c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a15  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003eda  00000000  00000000  000036bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  000075dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000076e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004b0 	.word	0x080004b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004b0 	.word	0x080004b0

080001d4 <delay>:
// Hàm delay nhận tham số thời gian (mili giây)
static void delay(uint32_t ms);

// Hàm delay (ước lượng cho 16 MHz clock)
static void delay(uint32_t ms)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;
    for (i = 0; i < ms * 1000; i++) {
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001ee:	fb03 f202 	mul.w	r2, r3, r2
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d8f4      	bhi.n	80001e2 <delay+0xe>

    }
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
	...

08000208 <main>:

int main(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af02      	add	r7, sp, #8

    My_GPIO_Init(GPIOA, GPIO_PIN_5, GPIO_MODE_OUTPUT, GPIO_OTYPE_OD, GPIO_SPEED_MEDIUM, GPIO_PUPD_NOPULL);
 800020e:	2300      	movs	r3, #0
 8000210:	9301      	str	r3, [sp, #4]
 8000212:	2301      	movs	r3, #1
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2301      	movs	r3, #1
 8000218:	2201      	movs	r2, #1
 800021a:	2120      	movs	r1, #32
 800021c:	481e      	ldr	r0, [pc, #120]	@ (8000298 <main+0x90>)
 800021e:	f000 f83f 	bl	80002a0 <My_GPIO_Init>


    My_GPIO_Init(GPIOC, GPIO_PIN_13, GPIO_MODE_INPUT, GPIO_OTYPE_PP, GPIO_SPEED_MEDIUM, GPIO_PUPD_PULLUP);
 8000222:	2301      	movs	r3, #1
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	2301      	movs	r3, #1
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2300      	movs	r3, #0
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000232:	481a      	ldr	r0, [pc, #104]	@ (800029c <main+0x94>)
 8000234:	f000 f834 	bl	80002a0 <My_GPIO_Init>

    uint8_t led_state = GPIO_PIN_SET;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
    uint8_t last_button_state = GPIO_PIN_SET;
 800023c:	2301      	movs	r3, #1
 800023e:	71bb      	strb	r3, [r7, #6]

    while (1) {
        uint8_t current_button_state = My_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000240:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000244:	4815      	ldr	r0, [pc, #84]	@ (800029c <main+0x94>)
 8000246:	f000 f8b9 	bl	80003bc <My_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	717b      	strb	r3, [r7, #5]


        if (last_button_state == GPIO_PIN_SET && current_button_state == GPIO_PIN_RESET) {
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d11e      	bne.n	8000292 <main+0x8a>
 8000254:	797b      	ldrb	r3, [r7, #5]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d11b      	bne.n	8000292 <main+0x8a>
            delay(200);
 800025a:	20c8      	movs	r0, #200	@ 0xc8
 800025c:	f7ff ffba 	bl	80001d4 <delay>

            if (My_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000260:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000264:	480d      	ldr	r0, [pc, #52]	@ (800029c <main+0x94>)
 8000266:	f000 f8a9 	bl	80003bc <My_GPIO_ReadPin>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d110      	bne.n	8000292 <main+0x8a>
                delay(500);
 8000270:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000274:	f7ff ffae 	bl	80001d4 <delay>
                led_state = !led_state; // trạng thái LED
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	2b00      	cmp	r3, #0
 800027c:	bf0c      	ite	eq
 800027e:	2301      	moveq	r3, #1
 8000280:	2300      	movne	r3, #0
 8000282:	b2db      	uxtb	r3, r3
 8000284:	71fb      	strb	r3, [r7, #7]
                My_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_state); // Cập nhật LED
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	461a      	mov	r2, r3
 800028a:	2120      	movs	r1, #32
 800028c:	4802      	ldr	r0, [pc, #8]	@ (8000298 <main+0x90>)
 800028e:	f000 f8a9 	bl	80003e4 <My_GPIO_WritePin>
            }
        }

        last_button_state = current_button_state;
 8000292:	797b      	ldrb	r3, [r7, #5]
 8000294:	71bb      	strb	r3, [r7, #6]
    while (1) {
 8000296:	e7d3      	b.n	8000240 <main+0x38>
 8000298:	40020000 	.word	0x40020000
 800029c:	40020800 	.word	0x40020800

080002a0 <My_GPIO_Init>:
#include "my_gpio.h"

void My_GPIO_Init(GPIO_TypeDef *GPIOx, uint32_t pin, uint8_t mode, uint8_t otype, uint8_t speed, uint8_t pupd) {
 80002a0:	b480      	push	{r7}
 80002a2:	b087      	sub	sp, #28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	4611      	mov	r1, r2
 80002ac:	461a      	mov	r2, r3
 80002ae:	460b      	mov	r3, r1
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	4613      	mov	r3, r2
 80002b4:	71bb      	strb	r3, [r7, #6]
    // Bật clock cho GPIO
    if (GPIOx == GPIOA) {
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	4a3d      	ldr	r2, [pc, #244]	@ (80003b0 <My_GPIO_Init+0x110>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <My_GPIO_Init+0x2c>
        RCC_AHB1ENR |= RCC_AHB1ENR_GPIOA;
 80002be:	4b3d      	ldr	r3, [pc, #244]	@ (80003b4 <My_GPIO_Init+0x114>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a3c      	ldr	r2, [pc, #240]	@ (80003b4 <My_GPIO_Init+0x114>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e009      	b.n	80002e0 <My_GPIO_Init+0x40>
    } else if (GPIOx == GPIOC) {
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	4a3a      	ldr	r2, [pc, #232]	@ (80003b8 <My_GPIO_Init+0x118>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d105      	bne.n	80002e0 <My_GPIO_Init+0x40>
        RCC_AHB1ENR |= RCC_AHB1ENR_GPIOC;
 80002d4:	4b37      	ldr	r3, [pc, #220]	@ (80003b4 <My_GPIO_Init+0x114>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a36      	ldr	r2, [pc, #216]	@ (80003b4 <My_GPIO_Init+0x114>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6013      	str	r3, [r2, #0]
    }

    // Xác định vị trí bit trong thanh ghi MODER, PUPDR (2 bit mỗi chân)
    uint32_t pin_pos = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
    while ((pin & (1U << pin_pos)) == 0) pin_pos++;
 80002e4:	e002      	b.n	80002ec <My_GPIO_Init+0x4c>
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	3301      	adds	r3, #1
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	2201      	movs	r2, #1
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	409a      	lsls	r2, r3
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	4013      	ands	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f5      	beq.n	80002e6 <My_GPIO_Init+0x46>

    // Cấu hình chế độ (MODER)
    GPIOx->MODER &= ~(0x3 << (pin_pos * 2)); // Xóa bit cũ
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	697a      	ldr	r2, [r7, #20]
 8000300:	0052      	lsls	r2, r2, #1
 8000302:	2103      	movs	r1, #3
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	43d2      	mvns	r2, r2
 800030a:	401a      	ands	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= (mode << (pin_pos * 2)); // Ghi mode
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	79f9      	ldrb	r1, [r7, #7]
 8000316:	697a      	ldr	r2, [r7, #20]
 8000318:	0052      	lsls	r2, r2, #1
 800031a:	fa01 f202 	lsl.w	r2, r1, r2
 800031e:	431a      	orrs	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	601a      	str	r2, [r3, #0]

    // Cấu hình loại ngõ ra (OTYPER)
    GPIOx->OTYPER &= ~(0x1 << pin_pos); // Xóa bit cũ
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	2101      	movs	r1, #1
 800032a:	697a      	ldr	r2, [r7, #20]
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	401a      	ands	r2, r3
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	605a      	str	r2, [r3, #4]
    GPIOx->OTYPER |= (otype << pin_pos); // Ghi otype
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	79b9      	ldrb	r1, [r7, #6]
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	431a      	orrs	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	605a      	str	r2, [r3, #4]

    // Cấu hình tốc độ (OSPEEDR)
    GPIOx->OSPEEDR &= ~(0x3 << (pin_pos * 2)); // Xóa bit cũ
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	697a      	ldr	r2, [r7, #20]
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	2103      	movs	r1, #3
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	43d2      	mvns	r2, r2
 800035a:	401a      	ands	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	609a      	str	r2, [r3, #8]
    GPIOx->OSPEEDR |= (speed << (pin_pos * 2)); // Ghi speed
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	f897 1020 	ldrb.w	r1, [r7, #32]
 8000368:	697a      	ldr	r2, [r7, #20]
 800036a:	0052      	lsls	r2, r2, #1
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	431a      	orrs	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	609a      	str	r2, [r3, #8]

    // Cấu hình pull-up/pull-down (PUPDR)
    GPIOx->PUPDR &= ~(0x3 << (pin_pos * 2)); // Xóa bit cũ
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	0052      	lsls	r2, r2, #1
 800037e:	2103      	movs	r1, #3
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	43d2      	mvns	r2, r2
 8000386:	401a      	ands	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |= (pupd << (pin_pos * 2)); // Ghi pupd
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000394:	697a      	ldr	r2, [r7, #20]
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	431a      	orrs	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	60da      	str	r2, [r3, #12]
}
 80003a2:	bf00      	nop
 80003a4:	371c      	adds	r7, #28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40020000 	.word	0x40020000
 80003b4:	40023830 	.word	0x40023830
 80003b8:	40020800 	.word	0x40020800

080003bc <My_GPIO_ReadPin>:

uint8_t My_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t pin) {
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
    return (GPIOx->IDR & pin) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	691a      	ldr	r2, [r3, #16]
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	bf14      	ite	ne
 80003d2:	2301      	movne	r3, #1
 80003d4:	2300      	moveq	r3, #0
 80003d6:	b2db      	uxtb	r3, r3
}
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <My_GPIO_WritePin>:

void My_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t pin, uint8_t state) {
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	4613      	mov	r3, r2
 80003f0:	71fb      	strb	r3, [r7, #7]
    if (state == GPIO_PIN_SET) {
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d103      	bne.n	8000400 <My_GPIO_WritePin+0x1c>
        GPIOx->BSRR = pin; // Set bit
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	68ba      	ldr	r2, [r7, #8]
 80003fc:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (pin << 16); // Reset bit
    }
}
 80003fe:	e003      	b.n	8000408 <My_GPIO_WritePin+0x24>
        GPIOx->BSRR = (pin << 16); // Reset bit
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	041a      	lsls	r2, r3, #16
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	619a      	str	r2, [r3, #24]
}
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	@ (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	@ (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	@ (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	@ (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	@ (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff fedf 	bl	8000208 <main>

0800044a <LoopForever>:

LoopForever:
  b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	080004d0 	.word	0x080004d0
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	2000001c 	.word	0x2000001c

08000464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	4d0d      	ldr	r5, [pc, #52]	@ (80004a0 <__libc_init_array+0x38>)
 800046c:	4c0d      	ldr	r4, [pc, #52]	@ (80004a4 <__libc_init_array+0x3c>)
 800046e:	1b64      	subs	r4, r4, r5
 8000470:	10a4      	asrs	r4, r4, #2
 8000472:	2600      	movs	r6, #0
 8000474:	42a6      	cmp	r6, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	4d0b      	ldr	r5, [pc, #44]	@ (80004a8 <__libc_init_array+0x40>)
 800047a:	4c0c      	ldr	r4, [pc, #48]	@ (80004ac <__libc_init_array+0x44>)
 800047c:	f000 f818 	bl	80004b0 <_init>
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	10a4      	asrs	r4, r4, #2
 8000484:	2600      	movs	r6, #0
 8000486:	42a6      	cmp	r6, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000490:	4798      	blx	r3
 8000492:	3601      	adds	r6, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f855 3b04 	ldr.w	r3, [r5], #4
 800049a:	4798      	blx	r3
 800049c:	3601      	adds	r6, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	080004c8 	.word	0x080004c8
 80004a4:	080004c8 	.word	0x080004c8
 80004a8:	080004c8 	.word	0x080004c8
 80004ac:	080004cc 	.word	0x080004cc

080004b0 <_init>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

080004bc <_fini>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr
