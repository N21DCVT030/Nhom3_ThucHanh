
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a0  080059a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080059a0  080059a0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059a0  080059a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080059a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  20000078  08005a20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014d0  08005a20  000214d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      000000be  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037e0d  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e6d  00000000  00000000  00057f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  0005ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ab  00000000  00000000  0005bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ffce  00000000  00000000  0005bd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a9f3  00000000  00000000  0006bd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004e63d  00000000  00000000  0007672c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c44  00000000  00000000  000c4d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c89b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000a18  00000000  00000000  000c8a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005078 	.word	0x08005078

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005078 	.word	0x08005078

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	460b      	mov	r3, r1
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	4613      	mov	r3, r2
 8000294:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	88ba      	ldrh	r2, [r7, #4]
 800029a:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 80002a8:	68b8      	ldr	r0, [r7, #8]
 80002aa:	f000 f836 	bl	800031a <bufFlush>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 80002b6:	b480      	push	{r7}
 80002b8:	b083      	sub	sp, #12
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	885b      	ldrh	r3, [r3, #2]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	885a      	ldrh	r2, [r3, #2]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	429a      	cmp	r2, r3
 80002e0:	bf2c      	ite	cs
 80002e2:	2301      	movcs	r3, #1
 80002e4:	2300      	movcc	r3, #0
 80002e6:	b2db      	uxtb	r3, r3
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	88da      	ldrh	r2, [r3, #6]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	891b      	ldrh	r3, [r3, #8]
 8000304:	429a      	cmp	r2, r3
 8000306:	bf0c      	ite	eq
 8000308:	2301      	moveq	r3, #1
 800030a:	2300      	movne	r3, #0
 800030c:	b2db      	uxtb	r3, r3
}
 800030e:	4618      	mov	r0, r3
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2200      	movs	r2, #0
 8000332:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68d8      	ldr	r0, [r3, #12]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	461a      	mov	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f000 f899 	bl	8000476 <memsetl>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000356:	b672      	cpsid	i
}
 8000358:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800035a:	2300      	movs	r3, #0
 800035c:	73fb      	strb	r3, [r7, #15]
 800035e:	e021      	b.n	80003a4 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	683a      	ldr	r2, [r7, #0]
 8000364:	441a      	add	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	88c9      	ldrh	r1, [r1, #6]
 800036e:	440b      	add	r3, r1
 8000370:	7812      	ldrb	r2, [r2, #0]
 8000372:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	88db      	ldrh	r3, [r3, #6]
 8000378:	3301      	adds	r3, #1
 800037a:	b29b      	uxth	r3, r3
 800037c:	b21a      	sxth	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	3b01      	subs	r3, #1
 8000384:	b29b      	uxth	r3, r3
 8000386:	b21b      	sxth	r3, r3
 8000388:	4013      	ands	r3, r2
 800038a:	b21b      	sxth	r3, r3
 800038c:	b29a      	uxth	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	885b      	ldrh	r3, [r3, #2]
 8000396:	3301      	adds	r3, #1
 8000398:	b29a      	uxth	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	3301      	adds	r3, #1
 80003a2:	73fb      	strb	r3, [r7, #15]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	7bfa      	ldrb	r2, [r7, #15]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d3d8      	bcc.n	8000360 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f7ff ff8d 	bl	80002ce <bufIsFull>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d011      	beq.n	80003de <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	891a      	ldrh	r2, [r3, #8]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	791b      	ldrb	r3, [r3, #4]
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	4413      	add	r3, r2
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	b21a      	sxth	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	b21b      	sxth	r3, r3
 80003d4:	4013      	ands	r3, r2
 80003d6:	b21b      	sxth	r3, r3
 80003d8:	b29a      	uxth	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80003de:	b662      	cpsie	i
}
 80003e0:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80003e2:	2300      	movs	r3, #0
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80003f6:	b672      	cpsid	i
}
 80003f8:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f7ff ff7a 	bl	80002f4 <bufIsEmpty>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d006      	beq.n	8000414 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800040c:	b662      	cpsie	i
}
 800040e:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 8000410:	2302      	movs	r3, #2
 8000412:	e02c      	b.n	800046e <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000414:	2300      	movs	r3, #0
 8000416:	73fb      	strb	r3, [r7, #15]
 8000418:	e021      	b.n	800045e <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	8912      	ldrh	r2, [r2, #8]
 8000422:	441a      	add	r2, r3
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	6839      	ldr	r1, [r7, #0]
 8000428:	440b      	add	r3, r1
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	891b      	ldrh	r3, [r3, #8]
 8000432:	3301      	adds	r3, #1
 8000434:	b29b      	uxth	r3, r3
 8000436:	b21a      	sxth	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	3b01      	subs	r3, #1
 800043e:	b29b      	uxth	r3, r3
 8000440:	b21b      	sxth	r3, r3
 8000442:	4013      	ands	r3, r2
 8000444:	b21b      	sxth	r3, r3
 8000446:	b29a      	uxth	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	3b01      	subs	r3, #1
 8000452:	b29a      	uxth	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	3301      	adds	r3, #1
 800045c:	73fb      	strb	r3, [r7, #15]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	7bfa      	ldrb	r2, [r7, #15]
 8000464:	429a      	cmp	r2, r3
 8000466:	d3d8      	bcc.n	800041a <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000468:	b662      	cpsie	i
}
 800046a:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	460b      	mov	r3, r1
 8000480:	70fb      	strb	r3, [r7, #3]
 8000482:	4613      	mov	r3, r2
 8000484:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8000486:	e004      	b.n	8000492 <memsetl+0x1c>
        *dst++ = value;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	607a      	str	r2, [r7, #4]
 800048e:	78fa      	ldrb	r2, [r7, #3]
 8000490:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8000492:	883b      	ldrh	r3, [r7, #0]
 8000494:	1e5a      	subs	r2, r3, #1
 8000496:	803a      	strh	r2, [r7, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d1f5      	bne.n	8000488 <memsetl+0x12>
    }    
}
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <LEDRED_init>:

void_t delay();
void_t delay2();
void_t delay3();

static void LEDRED_init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDREDControl_SetClock, ENABLE);
 80004b2:	2101      	movs	r1, #1
 80004b4:	2002      	movs	r0, #2
 80004b6:	f001 fc1d 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDRED_GPIO_PIN;
 80004ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004be:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80004c0:	2301      	movs	r3, #1
 80004c2:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004c4:	2302      	movs	r3, #2
 80004c6:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80004c8:	2300      	movs	r3, #0
 80004ca:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80004cc:	2302      	movs	r3, #2
 80004ce:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDRED_GPIO_PORT, &GPIO_InitStructure);
 80004d0:	463b      	mov	r3, r7
 80004d2:	4619      	mov	r1, r3
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <LEDRED_init+0x38>)
 80004d6:	f001 f893 	bl	8001600 <GPIO_Init>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020400 	.word	0x40020400

080004e8 <LEDBLUE_init>:
static void LEDBLUE_init(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDBLUEControl_SetClock, ENABLE);
 80004ee:	2101      	movs	r1, #1
 80004f0:	2001      	movs	r0, #1
 80004f2:	f001 fbff 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDBLUE_GPIO_PIN;
 80004f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fa:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80004fc:	2301      	movs	r3, #1
 80004fe:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000500:	2302      	movs	r3, #2
 8000502:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000504:	2300      	movs	r3, #0
 8000506:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000508:	2302      	movs	r3, #2
 800050a:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDBLUE_GPIO_PORT, &GPIO_InitStructure);
 800050c:	463b      	mov	r3, r7
 800050e:	4619      	mov	r1, r3
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <LEDBLUE_init+0x38>)
 8000512:	f001 f875 	bl	8001600 <GPIO_Init>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020000 	.word	0x40020000

08000524 <LEDGREEN_init>:
static void LEDGREEN_init(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDGREENControl_SetClock, ENABLE);
 800052a:	2101      	movs	r1, #1
 800052c:	2001      	movs	r0, #1
 800052e:	f001 fbe1 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDGREEN_GPIO_PIN;
 8000532:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000536:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000538:	2301      	movs	r3, #1
 800053a:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800053c:	2302      	movs	r3, #2
 800053e:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000540:	2300      	movs	r3, #0
 8000542:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000544:	2302      	movs	r3, #2
 8000546:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDGREEN_GPIO_PORT, &GPIO_InitStructure);
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <LEDGREEN_init+0x38>)
 800054e:	f001 f857 	bl	8001600 <GPIO_Init>

}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40020000 	.word	0x40020000

08000560 <LEDREDControl_SetStatus>:


static void LEDREDControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	807b      	strh	r3, [r7, #2]
 800056c:	4613      	mov	r3, r2
 800056e:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
 8000570:	787b      	ldrb	r3, [r7, #1]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d102      	bne.n	800057c <LEDREDControl_SetStatus+0x1c>
		GPIOx->BSRRL = GPIO_PIN;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	887a      	ldrh	r2, [r7, #2]
 800057a:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 800057c:	787b      	ldrb	r3, [r7, #1]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d102      	bne.n	8000588 <LEDREDControl_SetStatus+0x28>
		GPIOx->BSRRH = GPIO_PIN;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	887a      	ldrh	r2, [r7, #2]
 8000586:	835a      	strh	r2, [r3, #26]
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <LEDBLUEControl_SetStatus>:
static void LEDBLUEControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
 80005a0:	4613      	mov	r3, r2
 80005a2:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
 80005a4:	787b      	ldrb	r3, [r7, #1]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d102      	bne.n	80005b0 <LEDBLUEControl_SetStatus+0x1c>
		GPIOx->BSRRL = GPIO_PIN;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	887a      	ldrh	r2, [r7, #2]
 80005ae:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 80005b0:	787b      	ldrb	r3, [r7, #1]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <LEDBLUEControl_SetStatus+0x28>
		GPIOx->BSRRH = GPIO_PIN;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	887a      	ldrh	r2, [r7, #2]
 80005ba:	835a      	strh	r2, [r3, #26]
	}
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <LEDGREENControl_SetStatus>:

static void LEDGREENControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
 80005d4:	4613      	mov	r3, r2
 80005d6:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
 80005d8:	787b      	ldrb	r3, [r7, #1]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d102      	bne.n	80005e4 <LEDGREENControl_SetStatus+0x1c>
		GPIOx->BSRRL = GPIO_PIN;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	887a      	ldrh	r2, [r7, #2]
 80005e2:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 80005e4:	787b      	ldrb	r3, [r7, #1]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <LEDGREENControl_SetStatus+0x28>
		GPIOx->BSRRH = GPIO_PIN;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	887a      	ldrh	r2, [r7, #2]
 80005ee:	835a      	strh	r2, [r3, #26]
	}
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <delay>:
 * @func   delay
 * @brief  use when you want to delay
 * @param  None
 * @retval None
 */
void_t delay() {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
	for (u32_t i = 0; i < 500; i++);
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	e002      	b.n	800060e <delay+0x12>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3301      	adds	r3, #1
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000614:	d3f8      	bcc.n	8000608 <delay+0xc>
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <delay2>:
void_t delay2() {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
	for (u32_t j = 0; j < 1500000; j++);
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	e002      	b.n	8000636 <delay2+0x12>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3301      	adds	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <delay2+0x28>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d9f8      	bls.n	8000630 <delay2+0xc>
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	0016e35f 	.word	0x0016e35f

08000650 <delay3>:
void_t delay3() {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
	for (u32_t k = 0; k < 500000; k++);
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	e002      	b.n	8000662 <delay3+0x12>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <delay3+0x28>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d9f8      	bls.n	800065c <delay3+0xc>
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	0007a11f 	.word	0x0007a11f

0800067c <buzzer_Init>:
 * @func   buzzer_Init
 * @brief  Initialize GPIO for buzzer
 * @param  None
 * @retval None
 */
static void_t buzzer_Init(void_t) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);
 8000682:	2101      	movs	r1, #1
 8000684:	2004      	movs	r0, #4
 8000686:	f001 fb35 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 800068a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068e:	603b      	str	r3, [r7, #0]


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000690:	2301      	movs	r3, #1
 8000692:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000694:	2302      	movs	r3, #2
 8000696:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000698:	2300      	movs	r3, #0
 800069a:	71bb      	strb	r3, [r7, #6]


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800069c:	2302      	movs	r3, #2
 800069e:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <buzzer_Init+0x38>)
 80006a6:	f000 ffab 	bl	8001600 <GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40020800 	.word	0x40020800

080006b8 <button_Init>:
 * @func   button_Init
 * @brief  Initialize GPIO for button
 * @param  None
 * @retval None
 */
static void_t button_Init(void_t) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 80006be:	2101      	movs	r1, #1
 80006c0:	2002      	movs	r0, #2
 80006c2:	f001 fb17 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 80006c6:	2308      	movs	r3, #8
 80006c8:	603b      	str	r3, [r7, #0]


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80006ca:	2300      	movs	r3, #0
 80006cc:	713b      	strb	r3, [r7, #4]


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006ce:	2302      	movs	r3, #2
 80006d0:	717b      	strb	r3, [r7, #5]


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <button_Init+0x30>)
 80006dc:	f000 ff90 	bl	8001600 <GPIO_Init>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40020400 	.word	0x40020400

080006ec <button4_Init>:
static void_t button4_Init(void_t) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTON4Control_SetClock, ENABLE);
 80006f2:	2101      	movs	r1, #1
 80006f4:	2002      	movs	r0, #2
 80006f6:	f001 fafd 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = BUTTON4_GPIO_PIN;
 80006fa:	2301      	movs	r3, #1
 80006fc:	603b      	str	r3, [r7, #0]


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80006fe:	2300      	movs	r3, #0
 8000700:	713b      	strb	r3, [r7, #4]


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000702:	2302      	movs	r3, #2
 8000704:	717b      	strb	r3, [r7, #5]


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000706:	2301      	movs	r3, #1
 8000708:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(BUTTON4_GPIO_PORT, &GPIO_InitStructure);
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <button4_Init+0x30>)
 8000710:	f000 ff76 	bl	8001600 <GPIO_Init>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020400 	.word	0x40020400

08000720 <button3_Init>:
static void_t button3_Init(void_t) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTON3Control_SetClock, ENABLE);
 8000726:	2101      	movs	r1, #1
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fae3 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = BUTTON3_GPIO_PIN;
 800072e:	2310      	movs	r3, #16
 8000730:	603b      	str	r3, [r7, #0]


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000732:	2300      	movs	r3, #0
 8000734:	713b      	strb	r3, [r7, #4]


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000736:	2302      	movs	r3, #2
 8000738:	717b      	strb	r3, [r7, #5]


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800073a:	2301      	movs	r3, #1
 800073c:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(BUTTON3_GPIO_PORT, &GPIO_InitStructure);
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <button3_Init+0x30>)
 8000744:	f000 ff5c 	bl	8001600 <GPIO_Init>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020000 	.word	0x40020000

08000754 <button5_Init>:
static void_t button5_Init(void_t) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTON5Control_SetClock, ENABLE);
 800075a:	2101      	movs	r1, #1
 800075c:	2002      	movs	r0, #2
 800075e:	f001 fac9 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = BUTTON5_GPIO_PIN;
 8000762:	2310      	movs	r3, #16
 8000764:	603b      	str	r3, [r7, #0]


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000766:	2300      	movs	r3, #0
 8000768:	713b      	strb	r3, [r7, #4]


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800076a:	2302      	movs	r3, #2
 800076c:	717b      	strb	r3, [r7, #5]


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800076e:	2301      	movs	r3, #1
 8000770:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(BUTTON5_GPIO_PORT, &GPIO_InitStructure);
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <button5_Init+0x30>)
 8000778:	f000 ff42 	bl	8001600 <GPIO_Init>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40020400 	.word	0x40020400

08000788 <buzzerControlSetStatus>:

static void_t buzzerControlSetStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin,
		u8_t byStatus) {
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	807b      	strh	r3, [r7, #2]
 8000794:	4613      	mov	r3, r2
 8000796:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (byStatus == GPIO_PIN_SET) {
 8000798:	787b      	ldrb	r3, [r7, #1]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d102      	bne.n	80007a4 <buzzerControlSetStatus+0x1c>
		pGPIOx->BSRRL = wGPIO_Pin;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	831a      	strh	r2, [r3, #24]
	}
	if (byStatus == GPIO_PIN_RESET) {
 80007a4:	787b      	ldrb	r3, [r7, #1]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d102      	bne.n	80007b0 <buzzerControlSetStatus+0x28>
		pGPIOx->BSRRH = wGPIO_Pin;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	887a      	ldrh	r2, [r7, #2]
 80007ae:	835a      	strh	r2, [r3, #26]
	}
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <buttonReadStatus>:
 * @func   buttonReadStatus
 * @brief  Read status of button
 * @param  Port, Pin
 * @retval u8_t
 */
static u8_t buttonReadStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin) {
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
	u8_t Read_Pin = Bit_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]

	if ((pGPIOx->IDR & wGPIO_Pin) != (u32_t) Bit_RESET) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691a      	ldr	r2, [r3, #16]
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	4013      	ands	r3, r2
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <buttonReadStatus+0x22>
		Read_Pin = (u8_t) Bit_SET;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e001      	b.n	80007e2 <buttonReadStatus+0x26>
	} else {
		Read_Pin = (u8_t) Bit_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]
	}
	return Read_Pin;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <Led_Init_red1>:
static uint8_t temperature, humidity, light;
static uint8_t temperature1, humidity1, light1;
//static uint8_t temperature2, humidity2;

static void Led_Init_red1(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDREDA1Control_SetClock, ENABLE);
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 fa7b 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LEDREDA1_GPIO_PIN;
 80007fe:	2302      	movs	r3, #2
 8000800:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000802:	2301      	movs	r3, #1
 8000804:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000806:	2302      	movs	r3, #2
 8000808:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800080a:	2300      	movs	r3, #0
 800080c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800080e:	2302      	movs	r3, #2
 8000810:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LEDREDA1_GPIO_PORT, &GPIO_InitStructure);
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <Led_Init_red1+0x34>)
 8000818:	f000 fef2 	bl	8001600 <GPIO_Init>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40020000 	.word	0x40020000

08000828 <Led_Init_red2>:

static void Led_Init_red2(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDREDB13Control_SetClock, ENABLE);
 800082e:	2101      	movs	r1, #1
 8000830:	2002      	movs	r0, #2
 8000832:	f001 fa5f 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LEDREDB13_GPIO_PIN;
 8000836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800083c:	2301      	movs	r3, #1
 800083e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000840:	2302      	movs	r3, #2
 8000842:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000844:	2300      	movs	r3, #0
 8000846:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000848:	2302      	movs	r3, #2
 800084a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LEDREDB13_GPIO_PORT, &GPIO_InitStructure);
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <Led_Init_red2+0x38>)
 8000852:	f000 fed5 	bl	8001600 <GPIO_Init>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020400 	.word	0x40020400

08000864 <Led_Init_blue1>:

static void Led_Init_blue1(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDREDA3Control_SetClock, ENABLE);
 800086a:	2101      	movs	r1, #1
 800086c:	2001      	movs	r0, #1
 800086e:	f001 fa41 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LEDREDA3_GPIO_PIN;
 8000872:	2308      	movs	r3, #8
 8000874:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000876:	2301      	movs	r3, #1
 8000878:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800087a:	2302      	movs	r3, #2
 800087c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800087e:	2300      	movs	r3, #0
 8000880:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000882:	2302      	movs	r3, #2
 8000884:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LEDREDA3_GPIO_PORT, &GPIO_InitStructure);
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <Led_Init_blue1+0x34>)
 800088c:	f000 feb8 	bl	8001600 <GPIO_Init>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40020000 	.word	0x40020000

0800089c <Led_Init_blue2>:

static void Led_Init_blue2(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDREDA10Control_SetClock, ENABLE);
 80008a2:	2101      	movs	r1, #1
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 fa25 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LEDREDA10_GPIO_PIN;
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80008b0:	2301      	movs	r3, #1
 80008b2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008b4:	2302      	movs	r3, #2
 80008b6:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80008b8:	2300      	movs	r3, #0
 80008ba:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80008bc:	2302      	movs	r3, #2
 80008be:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LEDREDA10_GPIO_PORT, &GPIO_InitStructure);
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4803      	ldr	r0, [pc, #12]	; (80008d4 <Led_Init_blue2+0x38>)
 80008c6:	f000 fe9b 	bl	8001600 <GPIO_Init>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40020000 	.word	0x40020000

080008d8 <Button_Init>:

static void Button_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 80008de:	2101      	movs	r1, #1
 80008e0:	2002      	movs	r0, #2
 80008e2:	f001 fa07 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 80008e6:	2308      	movs	r3, #8
 80008e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80008ea:	2300      	movs	r3, #0
 80008ec:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008ee:	2302      	movs	r3, #2
 80008f0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <Button_Init+0x30>)
 80008fc:	f000 fe80 	bl	8001600 <GPIO_Init>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40020400 	.word	0x40020400

0800090c <Button_Init_b3>:

static void Button_Init_b3(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUTTONA4Control_SetClock, ENABLE);
 8000912:	2101      	movs	r1, #1
 8000914:	2001      	movs	r0, #1
 8000916:	f001 f9ed 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUTTONA4_GPIO_PIN;
 800091a:	2310      	movs	r3, #16
 800091c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800091e:	2300      	movs	r3, #0
 8000920:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000922:	2302      	movs	r3, #2
 8000924:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000926:	2301      	movs	r3, #1
 8000928:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTONA4_GPIO_PORT, &GPIO_InitStructure);
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <Button_Init_b3+0x30>)
 8000930:	f000 fe66 	bl	8001600 <GPIO_Init>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020000 	.word	0x40020000

08000940 <Button_Init_b4>:

static void Button_Init_b4(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUTTONB0Control_SetClock, ENABLE);
 8000946:	2101      	movs	r1, #1
 8000948:	2002      	movs	r0, #2
 800094a:	f001 f9d3 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUTTONB0_GPIO_PIN;
 800094e:	2301      	movs	r3, #1
 8000950:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000952:	2300      	movs	r3, #0
 8000954:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000956:	2302      	movs	r3, #2
 8000958:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800095a:	2301      	movs	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTONB0_GPIO_PORT, &GPIO_InitStructure);
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <Button_Init_b4+0x30>)
 8000964:	f000 fe4c 	bl	8001600 <GPIO_Init>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40020400 	.word	0x40020400

08000974 <Buzzer_Init>:

static void Buzzer_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);
 800097a:	2101      	movs	r1, #1
 800097c:	2004      	movs	r0, #4
 800097e:	f001 f9b9 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000988:	2301      	movs	r3, #1
 800098a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800098c:	2302      	movs	r3, #2
 800098e:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000990:	2300      	movs	r3, #0
 8000992:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000994:	2302      	movs	r3, #2
 8000996:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <Buzzer_Init+0x38>)
 800099e:	f000 fe2f 	bl	8001600 <GPIO_Init>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020800 	.word	0x40020800

080009b0 <main>:

int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	AppCommon();
 80009b6:	f000 f917 	bl	8000be8 <AppCommon>
	Led_Init_red1();
 80009ba:	f7ff ff19 	bl	80007f0 <Led_Init_red1>
	Led_Init_red2();
 80009be:	f7ff ff33 	bl	8000828 <Led_Init_red2>
	Led_Init_blue1();
 80009c2:	f7ff ff4f 	bl	8000864 <Led_Init_blue1>
	Led_Init_blue2();
 80009c6:	f7ff ff69 	bl	800089c <Led_Init_blue2>
	Buzzer_Init();
 80009ca:	f7ff ffd3 	bl	8000974 <Buzzer_Init>
	Button_Init();
 80009ce:	f7ff ff83 	bl	80008d8 <Button_Init>
	Button_Init_b3();
 80009d2:	f7ff ff9b 	bl	800090c <Button_Init_b3>
	Button_Init_b4();
 80009d6:	f7ff ffb3 	bl	8000940 <Button_Init_b4>
	u8_t byStatus = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	71fb      	strb	r3, [r7, #7]
	u8_t Status = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	71bb      	strb	r3, [r7, #6]
	u8_t press5 = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	717b      	strb	r3, [r7, #5]
	buzzer_Init();
 80009e6:	f7ff fe49 	bl	800067c <buzzer_Init>
	button_Init();
 80009ea:	f7ff fe65 	bl	80006b8 <button_Init>
	button4_Init();
 80009ee:	f7ff fe7d 	bl	80006ec <button4_Init>
	button3_Init();
 80009f2:	f7ff fe95 	bl	8000720 <button3_Init>
	button5_Init();
 80009f6:	f7ff fead 	bl	8000754 <button5_Init>
	LEDRED_init();
 80009fa:	f7ff fd57 	bl	80004ac <LEDRED_init>
	LEDBLUE_init();
 80009fe:	f7ff fd73 	bl	80004e8 <LEDBLUE_init>
	LEDGREEN_init();
 8000a02:	f7ff fd8f 	bl	8000524 <LEDGREEN_init>
	while(1)
	{
						// Kiểm tra trạng thái của nút bấm 1
						        if (buttonReadStatus(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BTN_PRESS) {
 8000a06:	2108      	movs	r1, #8
 8000a08:	485b      	ldr	r0, [pc, #364]	; (8000b78 <main+0x1c8>)
 8000a0a:	f7ff fed7 	bl	80007bc <buttonReadStatus>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d103      	bne.n	8000a1c <main+0x6c>
						            delay();
 8000a14:	f7ff fdf2 	bl	80005fc <delay>
						            byStatus= 0; // cài trạng thái là 0
 8000a18:	2300      	movs	r3, #0
 8000a1a:	71fb      	strb	r3, [r7, #7]

						            }

						        // Kiểm tra trạng thái của nút bấm 4
						        if (buttonReadStatus(BUTTON4_GPIO_PORT, BUTTON4_GPIO_PIN) == BTN_PRESS) {
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4856      	ldr	r0, [pc, #344]	; (8000b78 <main+0x1c8>)
 8000a20:	f7ff fecc 	bl	80007bc <buttonReadStatus>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <main+0x82>
						        	delay();
 8000a2a:	f7ff fde7 	bl	80005fc <delay>
						            byStatus = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]

						        }

				if (buttonReadStatus(BUTTON3_GPIO_PORT, BUTTON3_GPIO_PIN) == BTN_PRESS) {
 8000a32:	2110      	movs	r1, #16
 8000a34:	4851      	ldr	r0, [pc, #324]	; (8000b7c <main+0x1cc>)
 8000a36:	f7ff fec1 	bl	80007bc <buttonReadStatus>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d104      	bne.n	8000a4a <main+0x9a>
							delay3();
 8000a40:	f7ff fe06 	bl	8000650 <delay3>
							Status++;
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	3301      	adds	r3, #1
 8000a48:	71bb      	strb	r3, [r7, #6]
				}
				if (buttonReadStatus(BUTTON5_GPIO_PORT, BUTTON5_GPIO_PIN) == BTN_PRESS) {
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	484a      	ldr	r0, [pc, #296]	; (8000b78 <main+0x1c8>)
 8000a4e:	f7ff feb5 	bl	80007bc <buttonReadStatus>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d104      	bne.n	8000a62 <main+0xb2>
							delay3();
 8000a58:	f7ff fdfa 	bl	8000650 <delay3>
							press5 ++;
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	717b      	strb	r3, [r7, #5]
				}
				if(Status % 2 == 0){
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d106      	bne.n	8000a7c <main+0xcc>
					LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_HIGH);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a74:	4841      	ldr	r0, [pc, #260]	; (8000b7c <main+0x1cc>)
 8000a76:	f7ff fd8d 	bl	8000594 <LEDBLUEControl_SetStatus>
 8000a7a:	e005      	b.n	8000a88 <main+0xd8>
				} else {
					LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a82:	483e      	ldr	r0, [pc, #248]	; (8000b7c <main+0x1cc>)
 8000a84:	f7ff fd86 	bl	8000594 <LEDBLUEControl_SetStatus>
				}
				if(press5 % 2 ==0){
 8000a88:	797b      	ldrb	r3, [r7, #5]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d106      	bne.n	8000aa2 <main+0xf2>
					LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_HIGH);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	4837      	ldr	r0, [pc, #220]	; (8000b78 <main+0x1c8>)
 8000a9c:	f7ff fd60 	bl	8000560 <LEDREDControl_SetStatus>
 8000aa0:	e005      	b.n	8000aae <main+0xfe>
				} else {
					LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4833      	ldr	r0, [pc, #204]	; (8000b78 <main+0x1c8>)
 8000aaa:	f7ff fd59 	bl	8000560 <LEDREDControl_SetStatus>
				}
				if (byStatus % 2 == 0) {
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d13e      	bne.n	8000b38 <main+0x188>
					delay2();
 8000aba:	f7ff fdb3 	bl	8000624 <delay2>
					buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac4:	482e      	ldr	r0, [pc, #184]	; (8000b80 <main+0x1d0>)
 8000ac6:	f7ff fe5f 	bl	8000788 <buzzerControlSetStatus>
					delay2();
 8000aca:	f7ff fdab 	bl	8000624 <delay2>
					buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad4:	482a      	ldr	r0, [pc, #168]	; (8000b80 <main+0x1d0>)
 8000ad6:	f7ff fe57 	bl	8000788 <buzzerControlSetStatus>
					LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_HIGH);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae0:	4825      	ldr	r0, [pc, #148]	; (8000b78 <main+0x1c8>)
 8000ae2:	f7ff fd3d 	bl	8000560 <LEDREDControl_SetStatus>
					delay2();
 8000ae6:	f7ff fd9d 	bl	8000624 <delay2>
					LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	4821      	ldr	r0, [pc, #132]	; (8000b78 <main+0x1c8>)
 8000af2:	f7ff fd35 	bl	8000560 <LEDREDControl_SetStatus>
					delay2();
 8000af6:	f7ff fd95 	bl	8000624 <delay2>
					LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_HIGH);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	481e      	ldr	r0, [pc, #120]	; (8000b7c <main+0x1cc>)
 8000b02:	f7ff fd47 	bl	8000594 <LEDBLUEControl_SetStatus>
				    delay2();
 8000b06:	f7ff fd8d 	bl	8000624 <delay2>
					LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	481a      	ldr	r0, [pc, #104]	; (8000b7c <main+0x1cc>)
 8000b12:	f7ff fd3f 	bl	8000594 <LEDBLUEControl_SetStatus>
					delay2();
 8000b16:	f7ff fd85 	bl	8000624 <delay2>
					LEDGREENControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_HIGH);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b20:	4816      	ldr	r0, [pc, #88]	; (8000b7c <main+0x1cc>)
 8000b22:	f7ff fd51 	bl	80005c8 <LEDGREENControl_SetStatus>
					delay2();
 8000b26:	f7ff fd7d 	bl	8000624 <delay2>
					LEDGREENControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_LOW);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b30:	4812      	ldr	r0, [pc, #72]	; (8000b7c <main+0x1cc>)
 8000b32:	f7ff fd49 	bl	80005c8 <LEDGREENControl_SetStatus>
 8000b36:	e019      	b.n	8000b6c <main+0x1bc>
				} else {
                    delay2();
 8000b38:	f7ff fd74 	bl	8000624 <delay2>
					buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b42:	480f      	ldr	r0, [pc, #60]	; (8000b80 <main+0x1d0>)
 8000b44:	f7ff fe20 	bl	8000788 <buzzerControlSetStatus>
					LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <main+0x1c8>)
 8000b50:	f7ff fd06 	bl	8000560 <LEDREDControl_SetStatus>
					LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <main+0x1cc>)
 8000b5c:	f7ff fd1a 	bl	8000594 <LEDBLUEControl_SetStatus>
					LEDGREENControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_LOW);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <main+0x1cc>)
 8000b68:	f7ff fd2e 	bl	80005c8 <LEDGREENControl_SetStatus>
				}
				processGetValueSensor();
 8000b6c:	f000 fa74 	bl	8001058 <processGetValueSensor>
				processTimerScheduler();
 8000b70:	f001 fa2c 	bl	8001fcc <processTimerScheduler>
						        if (buttonReadStatus(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BTN_PRESS) {
 8000b74:	e747      	b.n	8000a06 <main+0x56>
 8000b76:	bf00      	nop
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020800 	.word	0x40020800

08000b84 <delay_ms>:
 * @param  None
 * @retval None
 */


void delay_ms(uint32_t ms) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

	uint32_t startTime = GetMilSecTick(); //Lưu lại thời điểm hiện tại.
 8000b8c:	f001 fa12 	bl	8001fb4 <GetMilSecTick>
 8000b90:	60f8      	str	r0, [r7, #12]
	while (CalculatorTime(startTime, GetMilSecTick()) <= ms)
 8000b92:	bf00      	nop
 8000b94:	f001 fa0e 	bl	8001fb4 <GetMilSecTick>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f000 f809 	bl	8000bb4 <CalculatorTime>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d2f4      	bcs.n	8000b94 <delay_ms+0x10>
		;

//	Đợi cho đến khi hết khoảng time cài đặt

}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <CalculatorTime>:
 * @func   CalculatorTime
 * @brief  Caculator time button
 * @param  None
 * @retval None
 */
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	uint32_t dwTimeTotal;
	if (dwTimeCurrent >= dwTimeInit) {
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d304      	bcc.n	8000bd0 <CalculatorTime+0x1c>
		dwTimeTotal = dwTimeCurrent - dwTimeInit;
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e004      	b.n	8000bda <CalculatorTime+0x26>
	} else {
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
	}
	return dwTimeTotal;
 8000bda:	68fb      	ldr	r3, [r7, #12]

}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <AppCommon>:
 * @brief  Init everything
 * @param  None
 * @retval None
 */
static void AppCommon()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af02      	add	r7, sp, #8
	SystemCoreClockUpdate();
 8000bee:	f000 fc3b 	bl	8001468 <SystemCoreClockUpdate>
	TimerInit();
 8000bf2:	f001 f90b 	bl	8001e0c <TimerInit>
    SPI1_Init();
 8000bf6:	f000 f835 	bl	8000c64 <SPI1_Init>
    I2C_Init_temphumi();
 8000bfa:	f000 f863 	bl	8000cc4 <I2C_Init_temphumi>
    TemHumSensor_Init();
 8000bfe:	f001 fad1 	bl	80021a4 <TemHumSensor_Init>
    Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID); //là hàm khởi tạo LCD.
 8000c02:	2100      	movs	r1, #0
 8000c04:	4814      	ldr	r0, [pc, #80]	; (8000c58 <AppCommon+0x70>)
 8000c06:	f001 fcaf 	bl	8002568 <Ucglib4WireSWSPI_begin>
    ucg_ClearScreen(&ucg);
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <AppCommon+0x70>)
 8000c0c:	f001 fcf3 	bl	80025f6 <ucg_ClearScreen>
    ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
 8000c10:	4912      	ldr	r1, [pc, #72]	; (8000c5c <AppCommon+0x74>)
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <AppCommon+0x70>)
 8000c14:	f002 fe08 	bl	8003828 <ucg_SetFont>
    ucg_SetColor(&ucg, 0, 255, 255, 255);
 8000c18:	23ff      	movs	r3, #255	; 0xff
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	23ff      	movs	r3, #255	; 0xff
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	2100      	movs	r1, #0
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <AppCommon+0x70>)
 8000c24:	f002 fedf 	bl	80039e6 <ucg_SetColor>
    ucg_SetColor(&ucg, 1, 0, 0, 0);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2101      	movs	r1, #1
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <AppCommon+0x70>)
 8000c34:	f002 fed7 	bl	80039e6 <ucg_SetColor>
    ucg_SetRotate180(&ucg);
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <AppCommon+0x70>)
 8000c3a:	f002 ffcf 	bl	8003bdc <ucg_SetRotate180>
    Scan_TimeSensor(5000);
 8000c3e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c42:	f000 fb57 	bl	80012f4 <Scan_TimeSensor>
    time_initial = GetMilSecTick();
 8000c46:	f001 f9b5 	bl	8001fb4 <GetMilSecTick>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <AppCommon+0x78>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000094 	.word	0x20000094
 8000c5c:	080051c4 	.word	0x080051c4
 8000c60:	20000148 	.word	0x20000148

08000c64 <SPI1_Init>:
 * @brief  Init SPI
 * @param  None
 * @retval None
 */
static void SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2007      	movs	r0, #7
 8000c6e:	f001 f841 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000c72:	2301      	movs	r3, #1
 8000c74:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000c76:	2303      	movs	r3, #3
 8000c78:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 8000c82:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8000c86:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <SPI1_Init+0x54>)
 8000c8e:	f000 fcb7 	bl	8001600 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 8000c92:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000c96:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <SPI1_Init+0x58>)
 8000c9e:	f000 fcaf 	bl	8001600 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <SPI1_Init+0x5c>)
 8000cac:	f000 fca8 	bl	8001600 <GPIO_Init>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	40020800 	.word	0x40020800

08000cc4 <I2C_Init_temphumi>:
 * @brief  Init I2C temp and humi
 * @param  None
 * @retval None
 */
static void I2C_Init_temphumi(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
// Initialization struct
	I2C_InitTypeDef I2C_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	// Step 1: Initialize I2C
	RCC_APB1PeriphClockCmd(I2Cx_RCC, ENABLE);
 8000cca:	2101      	movs	r1, #1
 8000ccc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000cd0:	f001 f830 	bl	8001d34 <RCC_APB1PeriphClockCmd>
	I2C_InitStruct.I2C_ClockSpeed = 400000;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <I2C_Init_temphumi+0x88>)
 8000cd6:	60bb      	str	r3, [r7, #8]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	81bb      	strh	r3, [r7, #12]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8000cdc:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000ce0:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	827b      	strh	r3, [r7, #18]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf0:	82bb      	strh	r3, [r7, #20]
	I2C_Init(I2Cx_SENSOR, &I2C_InitStruct);
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4815      	ldr	r0, [pc, #84]	; (8000d50 <I2C_Init_temphumi+0x8c>)
 8000cfa:	f000 fd71 	bl	80017e0 <I2C_Init>
	I2C_Cmd(I2Cx_SENSOR, ENABLE);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <I2C_Init_temphumi+0x8c>)
 8000d02:	f000 fe2f 	bl	8001964 <I2C_Cmd>

	// Step 2: Initialize GPIO as open drain alternate function
	RCC_AHB1PeriphClockCmd(I2C_GPIO_RCC, ENABLE);
 8000d06:	2101      	movs	r1, #1
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f000 fff3 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Pin = I2C_PIN_SCL | I2C_PIN_SDA;
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000d14:	2302      	movs	r3, #2
 8000d16:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(I2C_GPIO, &GPIO_InitStruct);
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <I2C_Init_temphumi+0x90>)
 8000d2a:	f000 fc69 	bl	8001600 <GPIO_Init>

	/* Connect PXx to I2C_SCL */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource8, GPIO_AF_I2C1);
 8000d2e:	2204      	movs	r2, #4
 8000d30:	2108      	movs	r1, #8
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <I2C_Init_temphumi+0x90>)
 8000d34:	f000 fd0a 	bl	800174c <GPIO_PinAFConfig>

	/* Connect PXx to I2C_SDA */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource9, GPIO_AF_I2C1);
 8000d38:	2204      	movs	r2, #4
 8000d3a:	2109      	movs	r1, #9
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <I2C_Init_temphumi+0x90>)
 8000d3e:	f000 fd05 	bl	800174c <GPIO_PinAFConfig>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	00061a80 	.word	0x00061a80
 8000d50:	40005400 	.word	0x40005400
 8000d54:	40020400 	.word	0x40020400

08000d58 <I2C_start>:
 * @brief   Generate I2C start condition
 * @param   None
 * @retval  None
 */
void I2C_start(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	// Wait until I2Cx is not busy anymore
	while (I2C_GetFlagStatus(I2Cx_SENSOR, I2C_FLAG_BUSY));
 8000d5c:	bf00      	nop
 8000d5e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000d62:	480a      	ldr	r0, [pc, #40]	; (8000d8c <I2C_start+0x34>)
 8000d64:	f000 feea 	bl	8001b3c <I2C_GetFlagStatus>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f7      	bne.n	8000d5e <I2C_start+0x6>

	// Generate start condition
	I2C_GenerateSTART(I2Cx_SENSOR, ENABLE);
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <I2C_start+0x34>)
 8000d72:	f000 fe17 	bl	80019a4 <I2C_GenerateSTART>

	// Wait for I2C EV5.
	// It means that the start condition has been correctly released
	// on the I2C bus (the bus is free, no other devices is communicating))
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_MODE_SELECT));
 8000d76:	bf00      	nop
 8000d78:	4905      	ldr	r1, [pc, #20]	; (8000d90 <I2C_start+0x38>)
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <I2C_start+0x34>)
 8000d7c:	f000 feae 	bl	8001adc <I2C_CheckEvent>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f8      	beq.n	8000d78 <I2C_start+0x20>
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	00030001 	.word	0x00030001

08000d94 <I2C_address_direction>:
 * @brief   e
 * @param   None
 * @retval  None
 */
void I2C_address_direction(uint8_t address, uint8_t direction)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	// Send slave address
	I2C_Send7bitAddress(I2Cx_SENSOR, address, direction);
 8000da4:	79ba      	ldrb	r2, [r7, #6]
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4619      	mov	r1, r3
 8000daa:	480f      	ldr	r0, [pc, #60]	; (8000de8 <I2C_address_direction+0x54>)
 8000dac:	f000 fe3a 	bl	8001a24 <I2C_Send7bitAddress>

	// Wait for I2C EV6
	// It means that a slave acknowledges his address
	if (direction == I2C_Direction_Transmitter)		// truyền
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d108      	bne.n	8000dc8 <I2C_address_direction+0x34>
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8000db6:	bf00      	nop
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <I2C_address_direction+0x58>)
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <I2C_address_direction+0x54>)
 8000dbc:	f000 fe8e 	bl	8001adc <I2C_CheckEvent>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f8      	beq.n	8000db8 <I2C_address_direction+0x24>
	}
	else if (direction == I2C_Direction_Receiver)  // nhận
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	}
}
 8000dc6:	e00a      	b.n	8000dde <I2C_address_direction+0x4a>
	else if (direction == I2C_Direction_Receiver)  // nhận
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d107      	bne.n	8000dde <I2C_address_direction+0x4a>
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8000dce:	bf00      	nop
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <I2C_address_direction+0x5c>)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <I2C_address_direction+0x54>)
 8000dd4:	f000 fe82 	bl	8001adc <I2C_CheckEvent>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f8      	beq.n	8000dd0 <I2C_address_direction+0x3c>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40005400 	.word	0x40005400
 8000dec:	00070082 	.word	0x00070082
 8000df0:	00030002 	.word	0x00030002

08000df4 <I2C_transmit>:
 * @brief   Transmit one byte to I2C bus
 * @param   None
 * @retval  None
 */
void I2C_transmit(uint8_t byte)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	// Send data byte
	I2C_SendData(I2Cx_SENSOR, byte);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <I2C_transmit+0x30>)
 8000e04:	f000 fe4c 	bl	8001aa0 <I2C_SendData>
	// Wait for I2C EV8_2.
	// It means that the data has been physically shifted out and
	// output on the bus)
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8000e08:	bf00      	nop
 8000e0a:	4907      	ldr	r1, [pc, #28]	; (8000e28 <I2C_transmit+0x34>)
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <I2C_transmit+0x30>)
 8000e0e:	f000 fe65 	bl	8001adc <I2C_CheckEvent>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f8      	beq.n	8000e0a <I2C_transmit+0x16>
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40005400 	.word	0x40005400
 8000e28:	00070084 	.word	0x00070084

08000e2c <I2C_stop>:
 * @brief   Generate I2C stop condition
 * @param   None
 * @retval  None
 */
void I2C_stop(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	// Generate I2C stop condition
	I2C_GenerateSTOP(I2Cx_SENSOR, ENABLE);
 8000e30:	2101      	movs	r1, #1
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <I2C_stop+0x10>)
 8000e34:	f000 fdd6 	bl	80019e4 <I2C_GenerateSTOP>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40005400 	.word	0x40005400

08000e40 <I2C_receive_nack>:
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_nack(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	// Disable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, DISABLE);
 8000e44:	2100      	movs	r1, #0
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <I2C_receive_nack+0x28>)
 8000e48:	f000 fe0a 	bl	8001a60 <I2C_AcknowledgeConfig>
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8000e4c:	bf00      	nop
 8000e4e:	4907      	ldr	r1, [pc, #28]	; (8000e6c <I2C_receive_nack+0x2c>)
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <I2C_receive_nack+0x28>)
 8000e52:	f000 fe43 	bl	8001adc <I2C_CheckEvent>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f8      	beq.n	8000e4e <I2C_receive_nack+0xe>

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <I2C_receive_nack+0x28>)
 8000e5e:	f000 fe2f 	bl	8001ac0 <I2C_ReceiveData>
 8000e62:	4603      	mov	r3, r0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	00030040 	.word	0x00030040

08000e70 <I2C_receive_ack>:
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_ack(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	// Enable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, ENABLE);
 8000e74:	2101      	movs	r1, #1
 8000e76:	4808      	ldr	r0, [pc, #32]	; (8000e98 <I2C_receive_ack+0x28>)
 8000e78:	f000 fdf2 	bl	8001a60 <I2C_AcknowledgeConfig>
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8000e7c:	bf00      	nop
 8000e7e:	4907      	ldr	r1, [pc, #28]	; (8000e9c <I2C_receive_ack+0x2c>)
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <I2C_receive_ack+0x28>)
 8000e82:	f000 fe2b 	bl	8001adc <I2C_CheckEvent>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f8      	beq.n	8000e7e <I2C_receive_ack+0xe>

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <I2C_receive_ack+0x28>)
 8000e8e:	f000 fe17 	bl	8001ac0 <I2C_ReceiveData>
 8000e92:	4603      	mov	r3, r0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	00030040 	.word	0x00030040

08000ea0 <TemHumSensor_readRegister>:
		uint8_t address,	// Địa chỉ cảm biến.
	    uint8_t* pAddressRegister, // Địa chỉ của thanh ghi chứa dữ liệu nhiệt độ, độ ẩm.
	    uint8_t* pDataRegister, // Dữ liệu đọc được từ thanh ghi tương ứng.
	    uint8_t Length_Data, //Độ dài Dữ liệu đọc được từ thanh ghi tương ứng.
	    uint16_t delay)	//Dữ liệu đọc được từ thanh ghi tương ứng.
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	73bb      	strb	r3, [r7, #14]
	uint8_t LengthCmd = pAddressRegister[0];
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	757b      	strb	r3, [r7, #21]

	I2C_start();	// conditon start
 8000eba:	f7ff ff4d 	bl	8000d58 <I2C_start>
	I2C_address_direction(address << 1, I2C_Direction_Transmitter); // send slave address - Transmit
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff64 	bl	8000d94 <I2C_address_direction>

	for (uint8_t i = 1; i < LengthCmd; i++) {
 8000ecc:	2301      	movs	r3, #1
 8000ece:	75fb      	strb	r3, [r7, #23]
 8000ed0:	e009      	b.n	8000ee6 <TemHumSensor_readRegister+0x46>
		I2C_transmit(pAddressRegister[i]);		// Send Data from register
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff8a 	bl	8000df4 <I2C_transmit>
	for (uint8_t i = 1; i < LengthCmd; i++) {
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	7dfa      	ldrb	r2, [r7, #23]
 8000ee8:	7d7b      	ldrb	r3, [r7, #21]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3f1      	bcc.n	8000ed2 <TemHumSensor_readRegister+0x32>
	}

   if (delay > 0) {
 8000eee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <TemHumSensor_readRegister+0x5c>
        delay_ms(delay);
 8000ef4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fe44 	bl	8000b84 <delay_ms>
    }

	I2C_stop();// condition stop
 8000efc:	f7ff ff96 	bl	8000e2c <I2C_stop>

	I2C_start(); // condition start
 8000f00:	f7ff ff2a 	bl	8000d58 <I2C_start>
	I2C_address_direction(address << 1, I2C_Direction_Receiver); // send slave address - Received
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff41 	bl	8000d94 <I2C_address_direction>

	for (uint8_t i = 0; i < Length_Data; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	75bb      	strb	r3, [r7, #22]
 8000f16:	e016      	b.n	8000f46 <TemHumSensor_readRegister+0xa6>
	{
		if (i == (Length_Data - 1))
 8000f18:	7dba      	ldrb	r2, [r7, #22]
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d107      	bne.n	8000f32 <TemHumSensor_readRegister+0x92>
		{
			pDataRegister[i] = I2C_receive_nack();  // 	NA
 8000f22:	7dbb      	ldrb	r3, [r7, #22]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	18d4      	adds	r4, r2, r3
 8000f28:	f7ff ff8a 	bl	8000e40 <I2C_receive_nack>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	7023      	strb	r3, [r4, #0]
 8000f30:	e006      	b.n	8000f40 <TemHumSensor_readRegister+0xa0>
		}
		else
		{
			pDataRegister[i] = I2C_receive_ack();   // A
 8000f32:	7dbb      	ldrb	r3, [r7, #22]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	18d4      	adds	r4, r2, r3
 8000f38:	f7ff ff9a 	bl	8000e70 <I2C_receive_ack>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < Length_Data; i++)
 8000f40:	7dbb      	ldrb	r3, [r7, #22]
 8000f42:	3301      	adds	r3, #1
 8000f44:	75bb      	strb	r3, [r7, #22]
 8000f46:	7dba      	ldrb	r2, [r7, #22]
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3e4      	bcc.n	8000f18 <TemHumSensor_readRegister+0x78>
		}
	}
	I2C_stop();
 8000f4e:	f7ff ff6d 	bl	8000e2c <I2C_stop>

}
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
	...

08000f5c <GetTemp_Sensor>:
 * @brief   Get value temperature
 * @param   None
 * @retval  Temperature
 */
uint32_t GetTemp_Sensor(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
	uint32_t RT;
    uint8_t pRT[3] = { 0 };	// pRT[0]: MSB		pRT[1]: LSB
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <GetTemp_Sensor+0x5c>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	813b      	strh	r3, [r7, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	72bb      	strb	r3, [r7, #10]

    uint8_t CMD_MEASURE_TEMP[2] =  { 2, 0xE3 }; // gửi độ dài byte cần truyền và CMD_MEASURE chế độ HOLD MASTER MODE
 8000f6c:	f24e 3302 	movw	r3, #58114	; 0xe302
 8000f70:	80bb      	strh	r3, [r7, #4]

    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_TEMP, pRT, 3, 4);
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	1d39      	adds	r1, r7, #4
 8000f78:	2304      	movs	r3, #4
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	2040      	movs	r0, #64	; 0x40
 8000f80:	f7ff ff8e 	bl	8000ea0 <TemHumSensor_readRegister>

    RT = (pRT[0] << 8) + pRT[1];			// RT_CODE (MSB << 8) + LSB		// Temp = ((17572* RT)/(0xFFu +1) - 4685)/100
 8000f84:	7a3b      	ldrb	r3, [r7, #8]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	7a7a      	ldrb	r2, [r7, #9]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
    RT = ((RT * 17572) >> 16) - 4685;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f244 42a4 	movw	r2, #17572	; 0x44a4
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	0c1b      	lsrs	r3, r3, #16
 8000f9a:	f5a3 5392 	sub.w	r3, r3, #4672	; 0x1240
 8000f9e:	3b0d      	subs	r3, #13
 8000fa0:	60fb      	str	r3, [r7, #12]
    RT = RT/100;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <GetTemp_Sensor+0x60>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	60fb      	str	r3, [r7, #12]
    return RT;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	08005090 	.word	0x08005090
 8000fbc:	51eb851f 	.word	0x51eb851f

08000fc0 <GetHumi_Sensor>:
 * @brief   Get value humidity
 * @param   None
 * @retval  Humidity
 */
uint32_t GetHumi_Sensor(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
	uint32_t RH;
	uint8_t pRH[3] = { 0 };
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <GetHumi_Sensor+0x5c>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	813b      	strh	r3, [r7, #8]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	72bb      	strb	r3, [r7, #10]


	uint8_t CMD_MEASURE_HUMI[2] =  { 2, 0xE5 }; // gửi độ dài byte cần truyền và CMD_MEASURE chế độ HOLD MASTER MODE
 8000fd0:	f24e 5302 	movw	r3, #58626	; 0xe502
 8000fd4:	80bb      	strh	r3, [r7, #4]

    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_HUMI, pRH, 3, 8);
 8000fd6:	f107 0208 	add.w	r2, r7, #8
 8000fda:	1d39      	adds	r1, r7, #4
 8000fdc:	2308      	movs	r3, #8
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	2040      	movs	r0, #64	; 0x40
 8000fe4:	f7ff ff5c 	bl	8000ea0 <TemHumSensor_readRegister>

    RH = (pRH[0] << 8) + pRH[1]; // RH_CODE (MSB << 8) + LSB
 8000fe8:	7a3b      	ldrb	r3, [r7, #8]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	7a7a      	ldrb	r2, [r7, #9]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
    RH = ((RH * 12500) >> 16) - 600;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001002:	60fb      	str	r3, [r7, #12]
    RH = RH/100;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4a06      	ldr	r2, [pc, #24]	; (8001020 <GetHumi_Sensor+0x60>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	095b      	lsrs	r3, r3, #5
 800100e:	60fb      	str	r3, [r7, #12]

    return RH;
 8001010:	68fb      	ldr	r3, [r7, #12]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	08005090 	.word	0x08005090
 8001020:	51eb851f 	.word	0x51eb851f

08001024 <GetLight_Sensor>:
uint32_t GetLight_Sensor(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
    uint32_t light_intensity;
    uint8_t pLight[2] = {0}; // Assuming light intensity data is 2 bytes
 800102a:	2300      	movs	r3, #0
 800102c:	813b      	strh	r3, [r7, #8]

    uint8_t CMD_MEASURE_LIGHT[2] = {0};
 800102e:	2300      	movs	r3, #0
 8001030:	80bb      	strh	r3, [r7, #4]
    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_LIGHT, pLight, 2, 4);
 8001032:	f107 0208 	add.w	r2, r7, #8
 8001036:	1d39      	adds	r1, r7, #4
 8001038:	2304      	movs	r3, #4
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2302      	movs	r3, #2
 800103e:	2040      	movs	r0, #64	; 0x40
 8001040:	f7ff ff2e 	bl	8000ea0 <TemHumSensor_readRegister>

    light_intensity = (pLight[0] << 8) + pLight[1];
 8001044:	7a3b      	ldrb	r3, [r7, #8]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	7a7a      	ldrb	r2, [r7, #9]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]

    return light_intensity;
 800104e:	68fb      	ldr	r3, [r7, #12]

}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <processGetValueSensor>:
 * @func 	processGetValueSensor
 * @brief	Get value sensor
 * @param	None
 * @retval	None
 */
void processGetValueSensor(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af02      	add	r7, sp, #8
	// Get timer
	time_current = GetMilSecTick();
 800105e:	f000 ffa9 	bl	8001fb4 <GetMilSecTick>
 8001062:	4603      	mov	r3, r0
 8001064:	4a77      	ldr	r2, [pc, #476]	; (8001244 <processGetValueSensor+0x1ec>)
 8001066:	6013      	str	r3, [r2, #0]

	if (time_current >= time_initial) {
 8001068:	4b76      	ldr	r3, [pc, #472]	; (8001244 <processGetValueSensor+0x1ec>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b76      	ldr	r3, [pc, #472]	; (8001248 <processGetValueSensor+0x1f0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d30a      	bcc.n	800108a <processGetValueSensor+0x32>
		time_total += time_current - time_initial;
 8001074:	4b73      	ldr	r3, [pc, #460]	; (8001244 <processGetValueSensor+0x1ec>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b73      	ldr	r3, [pc, #460]	; (8001248 <processGetValueSensor+0x1f0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	4b73      	ldr	r3, [pc, #460]	; (800124c <processGetValueSensor+0x1f4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a71      	ldr	r2, [pc, #452]	; (800124c <processGetValueSensor+0x1f4>)
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e00a      	b.n	80010a0 <processGetValueSensor+0x48>
	} else {
		time_total += 0xFFFFFFFFU - time_current + time_initial;
 800108a:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <processGetValueSensor+0x1f0>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <processGetValueSensor+0x1ec>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1ad2      	subs	r2, r2, r3
 8001094:	4b6d      	ldr	r3, [pc, #436]	; (800124c <processGetValueSensor+0x1f4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4413      	add	r3, r2
 800109a:	3b01      	subs	r3, #1
 800109c:	4a6b      	ldr	r2, [pc, #428]	; (800124c <processGetValueSensor+0x1f4>)
 800109e:	6013      	str	r3, [r2, #0]
	}
	if (time_total == CYCLE_SEND_DATA_1) {
 80010a0:	4b6a      	ldr	r3, [pc, #424]	; (800124c <processGetValueSensor+0x1f4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010a8:	d111      	bne.n	80010ce <processGetValueSensor+0x76>
		//Dùng để đọc giá trị nhiệt độ trả về từ cảm biến thông qua giao tiếp I2C.
		temperature = (uint8_t) (GetTemp_Sensor());
 80010aa:	f7ff ff57 	bl	8000f5c <GetTemp_Sensor>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <processGetValueSensor+0x1f8>)
 80010b4:	701a      	strb	r2, [r3, #0]

		//Dùng để đọc giá trị độ ẩm trả về từ cảm biến thông qua giao tiếp I2C.
		humidity = (uint8_t) (GetHumi_Sensor());
 80010b6:	f7ff ff83 	bl	8000fc0 <GetHumi_Sensor>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b65      	ldr	r3, [pc, #404]	; (8001254 <processGetValueSensor+0x1fc>)
 80010c0:	701a      	strb	r2, [r3, #0]

		light1 = (uint8_t) (GetLight_Sensor());
 80010c2:	f7ff ffaf 	bl	8001024 <GetLight_Sensor>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b63      	ldr	r3, [pc, #396]	; (8001258 <processGetValueSensor+0x200>)
 80010cc:	701a      	strb	r2, [r3, #0]

	}
	if(time_total >= CYCLE_SEND_DATA_2)
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <processGetValueSensor+0x1f4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010d6:	f0c0 80ad 	bcc.w	8001234 <processGetValueSensor+0x1dc>
	{
		temperature1 = (uint8_t) (GetTemp_Sensor());
 80010da:	f7ff ff3f 	bl	8000f5c <GetTemp_Sensor>
 80010de:	4603      	mov	r3, r0
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b5e      	ldr	r3, [pc, #376]	; (800125c <processGetValueSensor+0x204>)
 80010e4:	701a      	strb	r2, [r3, #0]

		humidity1 = (uint8_t) (GetHumi_Sensor());
 80010e6:	f7ff ff6b 	bl	8000fc0 <GetHumi_Sensor>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b5c      	ldr	r3, [pc, #368]	; (8001260 <processGetValueSensor+0x208>)
 80010f0:	701a      	strb	r2, [r3, #0]

		light1 = (uint8_t) (GetLight_Sensor());
 80010f2:	f7ff ff97 	bl	8001024 <GetLight_Sensor>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <processGetValueSensor+0x200>)
 80010fc:	701a      	strb	r2, [r3, #0]


		if( ((temperature1 > temperature ) && (temperature1 - temperature >= 2))
 80010fe:	4b57      	ldr	r3, [pc, #348]	; (800125c <processGetValueSensor+0x204>)
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <processGetValueSensor+0x1f8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d907      	bls.n	800111a <processGetValueSensor+0xc2>
 800110a:	4b54      	ldr	r3, [pc, #336]	; (800125c <processGetValueSensor+0x204>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <processGetValueSensor+0x1f8>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b01      	cmp	r3, #1
 8001118:	dc45      	bgt.n	80011a6 <processGetValueSensor+0x14e>
		 || ((temperature1 < temperature ) && (temperature1 - temperature <= 2))
 800111a:	4b50      	ldr	r3, [pc, #320]	; (800125c <processGetValueSensor+0x204>)
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <processGetValueSensor+0x1f8>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d207      	bcs.n	8001136 <processGetValueSensor+0xde>
 8001126:	4b4d      	ldr	r3, [pc, #308]	; (800125c <processGetValueSensor+0x204>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b48      	ldr	r3, [pc, #288]	; (8001250 <processGetValueSensor+0x1f8>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	dd37      	ble.n	80011a6 <processGetValueSensor+0x14e>
		 || ((humidity1 > humidity ) && (humidity1 - humidity >= 2))
 8001136:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <processGetValueSensor+0x208>)
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <processGetValueSensor+0x1fc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d907      	bls.n	8001152 <processGetValueSensor+0xfa>
 8001142:	4b47      	ldr	r3, [pc, #284]	; (8001260 <processGetValueSensor+0x208>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b42      	ldr	r3, [pc, #264]	; (8001254 <processGetValueSensor+0x1fc>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	dc29      	bgt.n	80011a6 <processGetValueSensor+0x14e>
		 || ((humidity1 < humidity ) && (humidity1 - humidity <= 2))
 8001152:	4b43      	ldr	r3, [pc, #268]	; (8001260 <processGetValueSensor+0x208>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <processGetValueSensor+0x1fc>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d207      	bcs.n	800116e <processGetValueSensor+0x116>
 800115e:	4b40      	ldr	r3, [pc, #256]	; (8001260 <processGetValueSensor+0x208>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <processGetValueSensor+0x1fc>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	dd1b      	ble.n	80011a6 <processGetValueSensor+0x14e>
		 || ((light1 > light ) && (light1 - light >= 2))
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <processGetValueSensor+0x200>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <processGetValueSensor+0x20c>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d907      	bls.n	800118a <processGetValueSensor+0x132>
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <processGetValueSensor+0x200>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	4b38      	ldr	r3, [pc, #224]	; (8001264 <processGetValueSensor+0x20c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	dc0d      	bgt.n	80011a6 <processGetValueSensor+0x14e>
		 || ((light1 < light ) && (light1 - light <= 2)))
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <processGetValueSensor+0x200>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <processGetValueSensor+0x20c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d24b      	bcs.n	800122e <processGetValueSensor+0x1d6>
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <processGetValueSensor+0x200>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <processGetValueSensor+0x20c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	dc43      	bgt.n	800122e <processGetValueSensor+0x1d6>
		{
			ucg_DrawString(&ucg, 0, 32, 0, "Nhom 4");
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <processGetValueSensor+0x210>)
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2220      	movs	r2, #32
 80011ae:	2100      	movs	r1, #0
 80011b0:	482e      	ldr	r0, [pc, #184]	; (800126c <processGetValueSensor+0x214>)
 80011b2:	f002 fa75 	bl	80036a0 <ucg_DrawString>
			memset(src1, 0, sizeof(src1));
 80011b6:	2214      	movs	r2, #20
 80011b8:	2100      	movs	r1, #0
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <processGetValueSensor+0x218>)
 80011bc:	f003 fad8 	bl	8004770 <memset>
			sprintf(src1, " Temp = %d oC", temperature1);
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <processGetValueSensor+0x204>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	492b      	ldr	r1, [pc, #172]	; (8001274 <processGetValueSensor+0x21c>)
 80011c8:	4829      	ldr	r0, [pc, #164]	; (8001270 <processGetValueSensor+0x218>)
 80011ca:	f003 fab1 	bl	8004730 <siprintf>
			ucg_DrawString(&ucg, 0, 52, 0, src1);
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <processGetValueSensor+0x218>)
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	2234      	movs	r2, #52	; 0x34
 80011d6:	2100      	movs	r1, #0
 80011d8:	4824      	ldr	r0, [pc, #144]	; (800126c <processGetValueSensor+0x214>)
 80011da:	f002 fa61 	bl	80036a0 <ucg_DrawString>

			memset(src2, 0, sizeof(src2));
 80011de:	2214      	movs	r2, #20
 80011e0:	2100      	movs	r1, #0
 80011e2:	4825      	ldr	r0, [pc, #148]	; (8001278 <processGetValueSensor+0x220>)
 80011e4:	f003 fac4 	bl	8004770 <memset>
			sprintf(src2, " Humid = %3d %%", humidity1);
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <processGetValueSensor+0x208>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4923      	ldr	r1, [pc, #140]	; (800127c <processGetValueSensor+0x224>)
 80011f0:	4821      	ldr	r0, [pc, #132]	; (8001278 <processGetValueSensor+0x220>)
 80011f2:	f003 fa9d 	bl	8004730 <siprintf>
			ucg_DrawString(&ucg, 0, 72, 0, src2);
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <processGetValueSensor+0x220>)
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	2248      	movs	r2, #72	; 0x48
 80011fe:	2100      	movs	r1, #0
 8001200:	481a      	ldr	r0, [pc, #104]	; (800126c <processGetValueSensor+0x214>)
 8001202:	f002 fa4d 	bl	80036a0 <ucg_DrawString>

			memset(src3, 0, sizeof(src3));
 8001206:	2214      	movs	r2, #20
 8001208:	2100      	movs	r1, #0
 800120a:	481d      	ldr	r0, [pc, #116]	; (8001280 <processGetValueSensor+0x228>)
 800120c:	f003 fab0 	bl	8004770 <memset>
			sprintf(src3, " Light = %d", light1);
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <processGetValueSensor+0x200>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	491b      	ldr	r1, [pc, #108]	; (8001284 <processGetValueSensor+0x22c>)
 8001218:	4819      	ldr	r0, [pc, #100]	; (8001280 <processGetValueSensor+0x228>)
 800121a:	f003 fa89 	bl	8004730 <siprintf>
			ucg_DrawString(&ucg, 0, 92, 0, src3);
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <processGetValueSensor+0x228>)
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2300      	movs	r3, #0
 8001224:	225c      	movs	r2, #92	; 0x5c
 8001226:	2100      	movs	r1, #0
 8001228:	4810      	ldr	r0, [pc, #64]	; (800126c <processGetValueSensor+0x214>)
 800122a:	f002 fa39 	bl	80036a0 <ucg_DrawString>


		}

		time_total = 0;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <processGetValueSensor+0x1f4>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
		// Reset lại biến thời gian sau quá trình đọc giá trị nhiệt độ - độ ẩm.

	}
	time_initial = time_current;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <processGetValueSensor+0x1ec>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <processGetValueSensor+0x1f0>)
 800123a:	6013      	str	r3, [r2, #0]



}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000014c 	.word	0x2000014c
 8001248:	20000148 	.word	0x20000148
 800124c:	200001cc 	.word	0x200001cc
 8001250:	200001d0 	.word	0x200001d0
 8001254:	200001d1 	.word	0x200001d1
 8001258:	200001d5 	.word	0x200001d5
 800125c:	200001d3 	.word	0x200001d3
 8001260:	200001d4 	.word	0x200001d4
 8001264:	200001d2 	.word	0x200001d2
 8001268:	08005094 	.word	0x08005094
 800126c:	20000094 	.word	0x20000094
 8001270:	20000154 	.word	0x20000154
 8001274:	0800509c 	.word	0x0800509c
 8001278:	20000168 	.word	0x20000168
 800127c:	080050ac 	.word	0x080050ac
 8001280:	2000017c 	.word	0x2000017c
 8001284:	080050bc 	.word	0x080050bc

08001288 <Scan_SensorLCD>:
* @brief	Scan display value sensor
* @param	None
* @retval	None
*/
void Scan_SensorLCD(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af02      	add	r7, sp, #8

	memset(src4, 0, sizeof(src4));
 800128e:	2214      	movs	r2, #20
 8001290:	2100      	movs	r1, #0
 8001292:	4814      	ldr	r0, [pc, #80]	; (80012e4 <Scan_SensorLCD+0x5c>)
 8001294:	f003 fa6c 	bl	8004770 <memset>

	ucg_DrawString(&ucg, 0, 52, 0, src4);
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <Scan_SensorLCD+0x5c>)
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2234      	movs	r2, #52	; 0x34
 80012a0:	2100      	movs	r1, #0
 80012a2:	4811      	ldr	r0, [pc, #68]	; (80012e8 <Scan_SensorLCD+0x60>)
 80012a4:	f002 f9fc 	bl	80036a0 <ucg_DrawString>

	memset(src5, 0, sizeof(src4));
 80012a8:	2214      	movs	r2, #20
 80012aa:	2100      	movs	r1, #0
 80012ac:	480f      	ldr	r0, [pc, #60]	; (80012ec <Scan_SensorLCD+0x64>)
 80012ae:	f003 fa5f 	bl	8004770 <memset>

	ucg_DrawString(&ucg, 0, 72, 0, src5);
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <Scan_SensorLCD+0x64>)
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	2248      	movs	r2, #72	; 0x48
 80012ba:	2100      	movs	r1, #0
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <Scan_SensorLCD+0x60>)
 80012be:	f002 f9ef 	bl	80036a0 <ucg_DrawString>

	memset(src6, 0, sizeof(src6));
 80012c2:	2214      	movs	r2, #20
 80012c4:	2100      	movs	r1, #0
 80012c6:	480a      	ldr	r0, [pc, #40]	; (80012f0 <Scan_SensorLCD+0x68>)
 80012c8:	f003 fa52 	bl	8004770 <memset>

	ucg_DrawString(&ucg, 0, 92, 0, src6);
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <Scan_SensorLCD+0x68>)
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2300      	movs	r3, #0
 80012d2:	225c      	movs	r2, #92	; 0x5c
 80012d4:	2100      	movs	r1, #0
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <Scan_SensorLCD+0x60>)
 80012d8:	f002 f9e2 	bl	80036a0 <ucg_DrawString>

}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000190 	.word	0x20000190
 80012e8:	20000094 	.word	0x20000094
 80012ec:	200001a4 	.word	0x200001a4
 80012f0:	200001b8 	.word	0x200001b8

080012f4 <Scan_TimeSensor>:
* @brief	Scan period 1s
* @param	None
* @retval	None
*/
void Scan_TimeSensor(uint32_t byRepeats)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
	if (idTimer != NO_TIMER) {
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <Scan_TimeSensor+0x3c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2bff      	cmp	r3, #255	; 0xff
 8001302:	d005      	beq.n	8001310 <Scan_TimeSensor+0x1c>
	TimerStop(idTimer);
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <Scan_TimeSensor+0x3c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fe02 	bl	8001f14 <TimerStop>
	}
	idTimer = TimerStart("Scan_sensor", byRepeats, TIMER_REPEAT_FOREVER, (void*) Scan_SensorLCD, NULL);
 8001310:	2300      	movs	r3, #0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <Scan_TimeSensor+0x40>)
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <Scan_TimeSensor+0x44>)
 800131c:	f000 fd98 	bl	8001e50 <TimerStart>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <Scan_TimeSensor+0x3c>)
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000150 	.word	0x20000150
 8001334:	08001289 	.word	0x08001289
 8001338:	080050c8 	.word	0x080050c8

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f003 fa08 	bl	8004780 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20018000 	.word	0x20018000
 800139c:	00000400 	.word	0x00000400
 80013a0:	200001d8 	.word	0x200001d8
 80013a4:	200014d0 	.word	0x200014d0

080013a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013ac:	f000 f826 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013d6:	f003 f9d9 	bl	800478c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fae9 	bl	80009b0 <main>

080013de <LoopForever>:

LoopForever:
  b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013ec:	080059a8 	.word	0x080059a8
  ldr r2, =_sbss
 80013f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013f4:	200014d0 	.word	0x200014d0

080013f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <SystemInit>:
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <SystemInit+0x60>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <SystemInit+0x60>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <SystemInit+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <SystemInit+0x64>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <SystemInit+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <SystemInit+0x64>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <SystemInit+0x64>)
 8001428:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800142c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <SystemInit+0x64>)
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <SystemInit+0x68>)
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <SystemInit+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <SystemInit+0x64>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	f000 f889 	bl	8001560 <SetSysClock>
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <SystemInit+0x60>)
 8001450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	40023800 	.word	0x40023800
 8001464:	24003010 	.word	0x24003010

08001468 <SystemCoreClockUpdate>:
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	2302      	movs	r3, #2
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	2302      	movs	r3, #2
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <SystemCoreClockUpdate+0xe4>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d007      	beq.n	80014a2 <SystemCoreClockUpdate+0x3a>
 8001492:	2b08      	cmp	r3, #8
 8001494:	d009      	beq.n	80014aa <SystemCoreClockUpdate+0x42>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d13d      	bne.n	8001516 <SystemCoreClockUpdate+0xae>
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 800149c:	4a2d      	ldr	r2, [pc, #180]	; (8001554 <SystemCoreClockUpdate+0xec>)
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e03d      	b.n	800151e <SystemCoreClockUpdate+0xb6>
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 80014a4:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <SystemCoreClockUpdate+0xf0>)
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e039      	b.n	800151e <SystemCoreClockUpdate+0xb6>
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	0d9b      	lsrs	r3, r3, #22
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00c      	beq.n	80014e0 <SystemCoreClockUpdate+0x78>
 80014c6:	4a24      	ldr	r2, [pc, #144]	; (8001558 <SystemCoreClockUpdate+0xf0>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014d0:	6852      	ldr	r2, [r2, #4]
 80014d2:	0992      	lsrs	r2, r2, #6
 80014d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e00b      	b.n	80014f8 <SystemCoreClockUpdate+0x90>
 80014e0:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <SystemCoreClockUpdate+0xec>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014ea:	6852      	ldr	r2, [r2, #4]
 80014ec:	0992      	lsrs	r2, r2, #6
 80014ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <SystemCoreClockUpdate+0xe4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0c1b      	lsrs	r3, r3, #16
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	3301      	adds	r3, #1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e003      	b.n	800151e <SystemCoreClockUpdate+0xb6>
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <SystemCoreClockUpdate+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	bf00      	nop
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <SystemCoreClockUpdate+0xe4>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <SystemCoreClockUpdate+0xf4>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	fa22 f303 	lsr.w	r3, r2, r3
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemCoreClockUpdate+0xe8>)
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	20000000 	.word	0x20000000
 8001554:	00f42400 	.word	0x00f42400
 8001558:	017d7840 	.word	0x017d7840
 800155c:	20000004 	.word	0x20000004

08001560 <SetSysClock>:
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <SetSysClock+0x90>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <SetSysClock+0x90>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <SetSysClock+0x94>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <SetSysClock+0x94>)
 8001576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <SetSysClock+0x90>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <SetSysClock+0x90>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	6093      	str	r3, [r2, #8]
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <SetSysClock+0x90>)
 8001586:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <SetSysClock+0x90>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	6093      	str	r3, [r2, #8]
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <SetSysClock+0x90>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <SetSysClock+0x90>)
 8001592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001596:	6093      	str	r3, [r2, #8]
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <SetSysClock+0x90>)
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <SetSysClock+0x98>)
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <SetSysClock+0x90>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <SetSysClock+0x90>)
 80015a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	bf00      	nop
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <SetSysClock+0x90>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f9      	beq.n	80015ac <SetSysClock+0x4c>
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <SetSysClock+0x9c>)
 80015ba:	f240 6202 	movw	r2, #1538	; 0x602
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <SetSysClock+0x90>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SetSysClock+0x90>)
 80015c6:	f023 0303 	bic.w	r3, r3, #3
 80015ca:	6093      	str	r3, [r2, #8]
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <SetSysClock+0x90>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <SetSysClock+0x90>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	6093      	str	r3, [r2, #8]
 80015d8:	bf00      	nop
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SetSysClock+0x90>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d1f9      	bne.n	80015da <SetSysClock+0x7a>
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40007000 	.word	0x40007000
 80015f8:	08015410 	.word	0x08015410
 80015fc:	40023c00 	.word	0x40023c00

08001600 <GPIO_Init>:
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e076      	b.n	800170a <GPIO_Init+0x10a>
 800161c:	2201      	movs	r2, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d165      	bne.n	8001704 <GPIO_Init+0x104>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2103      	movs	r1, #3
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	401a      	ands	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	791b      	ldrb	r3, [r3, #4]
 8001656:	4619      	mov	r1, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	791b      	ldrb	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <GPIO_Init+0x76>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	791b      	ldrb	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d12e      	bne.n	80016d4 <GPIO_Init+0xd4>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2103      	movs	r1, #3
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	795b      	ldrb	r3, [r3, #5]
 8001694:	4619      	mov	r1, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	2301      	movs	r3, #1
 80016b0:	408b      	lsls	r3, r1
 80016b2:	43db      	mvns	r3, r3
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	7992      	ldrb	r2, [r2, #6]
 80016c2:	4611      	mov	r1, r2
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	b292      	uxth	r2, r2
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	b292      	uxth	r2, r2
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2103      	movs	r1, #3
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	79db      	ldrb	r3, [r3, #7]
 80016f4:	4619      	mov	r1, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d985      	bls.n	800161c <GPIO_Init+0x1c>
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <GPIO_WriteBit>:
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <GPIO_WriteBit+0x1e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	887a      	ldrh	r2, [r7, #2]
 8001736:	831a      	strh	r2, [r3, #24]
 8001738:	e002      	b.n	8001740 <GPIO_WriteBit+0x24>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	835a      	strh	r2, [r3, #26]
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <GPIO_PinAFConfig>:
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	787a      	ldrb	r2, [r7, #1]
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	b29b      	uxth	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	210f      	movs	r1, #15
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	8879      	ldrh	r1, [r7, #2]
 8001796:	08c9      	lsrs	r1, r1, #3
 8001798:	b289      	uxth	r1, r1
 800179a:	4608      	mov	r0, r1
 800179c:	ea02 0103 	and.w	r1, r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f100 0208 	add.w	r2, r0, #8
 80017a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <I2C_Init>:
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	2300      	movs	r3, #0
 80017ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017ee:	2300      	movs	r3, #0
 80017f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80017f2:	2304      	movs	r3, #4
 80017f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80017f6:	4b57      	ldr	r3, [pc, #348]	; (8001954 <I2C_Init+0x174>)
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	889b      	ldrh	r3, [r3, #4]
 80017fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001800:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001802:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001806:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f9c9 	bl	8001ba4 <RCC_GetClocksFreq>
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4a4f      	ldr	r2, [pc, #316]	; (8001958 <I2C_Init+0x178>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	847b      	strh	r3, [r7, #34]	; 0x22
 8001822:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001826:	4313      	orrs	r3, r2
 8001828:	84fb      	strh	r3, [r7, #38]	; 0x26
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800182e:	809a      	strh	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	801a      	strh	r2, [r3, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a44      	ldr	r2, [pc, #272]	; (800195c <I2C_Init+0x17c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d815      	bhi.n	800187a <I2C_Init+0x9a>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800185c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800185e:	2b03      	cmp	r3, #3
 8001860:	d801      	bhi.n	8001866 <I2C_Init+0x86>
 8001862:	2304      	movs	r3, #4
 8001864:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001866:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800186a:	4313      	orrs	r3, r2
 800186c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800186e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001870:	3301      	adds	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	841a      	strh	r2, [r3, #32]
 8001878:	e040      	b.n	80018fc <I2C_Init+0x11c>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	88db      	ldrh	r3, [r3, #6]
 800187e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001882:	4293      	cmp	r3, r2
 8001884:	d109      	bne.n	800189a <I2C_Init+0xba>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001898:	e00e      	b.n	80018b8 <I2C_Init+0xd8>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009a      	lsls	r2, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d103      	bne.n	80018ca <I2C_Init+0xea>
 80018c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <I2C_Init+0x180>)
 80018e8:	fb82 1203 	smull	r1, r2, r2, r3
 80018ec:	1192      	asrs	r2, r2, #6
 80018ee:	17db      	asrs	r3, r3, #31
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	841a      	strh	r2, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001900:	839a      	strh	r2, [r3, #28]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800191a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800191e:	f023 0302 	bic.w	r3, r3, #2
 8001922:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	889a      	ldrh	r2, [r3, #4]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	895b      	ldrh	r3, [r3, #10]
 800192c:	4313      	orrs	r3, r2
 800192e:	b29a      	uxth	r2, r3
 8001930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001932:	4313      	orrs	r3, r2
 8001934:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	899a      	ldrh	r2, [r3, #12]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	891b      	ldrh	r3, [r3, #8]
 8001944:	4313      	orrs	r3, r2
 8001946:	b29a      	uxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	811a      	strh	r2, [r3, #8]
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	; 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	007a1200 	.word	0x007a1200
 8001958:	431bde83 	.word	0x431bde83
 800195c:	000186a0 	.word	0x000186a0
 8001960:	10624dd3 	.word	0x10624dd3

08001964 <I2C_Cmd>:
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	70fb      	strb	r3, [r7, #3]
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <I2C_Cmd+0x24>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	801a      	strh	r2, [r3, #0]
 8001986:	e007      	b.n	8001998 <I2C_Cmd+0x34>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	801a      	strh	r2, [r3, #0]
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <I2C_GenerateSTART>:
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d008      	beq.n	80019c8 <I2C_GenerateSTART+0x24>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	e007      	b.n	80019d8 <I2C_GenerateSTART+0x34>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	801a      	strh	r2, [r3, #0]
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <I2C_GenerateSTOP>:
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <I2C_GenerateSTOP+0x24>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	e007      	b.n	8001a18 <I2C_GenerateSTOP+0x34>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <I2C_Send7bitAddress>:
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
 8001a30:	4613      	mov	r3, r2
 8001a32:	70bb      	strb	r3, [r7, #2]
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <I2C_Send7bitAddress+0x20>
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	70fb      	strb	r3, [r7, #3]
 8001a42:	e003      	b.n	8001a4c <I2C_Send7bitAddress+0x28>
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	70fb      	strb	r3, [r7, #3]
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	821a      	strh	r2, [r3, #16]
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <I2C_AcknowledgeConfig>:
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <I2C_AcknowledgeConfig+0x24>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	e007      	b.n	8001a94 <I2C_AcknowledgeConfig+0x34>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	801a      	strh	r2, [r3, #0]
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <I2C_SendData>:
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	821a      	strh	r2, [r3, #16]
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <I2C_ReceiveData>:
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	8a1b      	ldrh	r3, [r3, #16]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <I2C_CheckEvent>:
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	8a9b      	ldrh	r3, [r3, #20]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	8b1b      	ldrh	r3, [r3, #24]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d102      	bne.n	8001b2a <I2C_CheckEvent+0x4e>
 8001b24:	2301      	movs	r3, #1
 8001b26:	75fb      	strb	r3, [r7, #23]
 8001b28:	e001      	b.n	8001b2e <I2C_CheckEvent+0x52>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	4618      	mov	r0, r3
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <I2C_GetFlagStatus>:
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	0f1b      	lsrs	r3, r3, #28
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <I2C_GetFlagStatus+0x36>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3314      	adds	r3, #20
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e005      	b.n	8001b7e <I2C_GetFlagStatus+0x42>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <I2C_GetFlagStatus+0x54>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
 8001b8e:	e001      	b.n	8001b94 <I2C_GetFlagStatus+0x58>
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	4618      	mov	r0, r3
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <RCC_GetClocksFreq>:
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d007      	beq.n	8001be4 <RCC_GetClocksFreq+0x40>
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d009      	beq.n	8001bec <RCC_GetClocksFreq+0x48>
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d13d      	bne.n	8001c58 <RCC_GetClocksFreq+0xb4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a42      	ldr	r2, [pc, #264]	; (8001ce8 <RCC_GetClocksFreq+0x144>)
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e03d      	b.n	8001c60 <RCC_GetClocksFreq+0xbc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a41      	ldr	r2, [pc, #260]	; (8001cec <RCC_GetClocksFreq+0x148>)
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e039      	b.n	8001c60 <RCC_GetClocksFreq+0xbc>
 8001bec:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	0d9b      	lsrs	r3, r3, #22
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00c      	beq.n	8001c22 <RCC_GetClocksFreq+0x7e>
 8001c08:	4a38      	ldr	r2, [pc, #224]	; (8001cec <RCC_GetClocksFreq+0x148>)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001c12:	6852      	ldr	r2, [r2, #4]
 8001c14:	0992      	lsrs	r2, r2, #6
 8001c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	e00b      	b.n	8001c3a <RCC_GetClocksFreq+0x96>
 8001c22:	4a31      	ldr	r2, [pc, #196]	; (8001ce8 <RCC_GetClocksFreq+0x144>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001c2c:	6852      	ldr	r2, [r2, #4]
 8001c2e:	0992      	lsrs	r2, r2, #6
 8001c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	3301      	adds	r3, #1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e003      	b.n	8001c60 <RCC_GetClocksFreq+0xbc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <RCC_GetClocksFreq+0x144>)
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	bf00      	nop
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <RCC_GetClocksFreq+0x14c>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	40da      	lsrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	0a9b      	lsrs	r3, r3, #10
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <RCC_GetClocksFreq+0x14c>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	40da      	lsrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <RCC_GetClocksFreq+0x140>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	0b5b      	lsrs	r3, r3, #13
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <RCC_GetClocksFreq+0x14c>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	40da      	lsrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	bf00      	nop
 8001cda:	3724      	adds	r7, #36	; 0x24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	017d7840 	.word	0x017d7840
 8001cf0:	20000014 	.word	0x20000014

08001cf4 <RCC_AHB1PeriphClockCmd>:
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <RCC_AHB1PeriphClockCmd+0x20>
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0a:	4909      	ldr	r1, [pc, #36]	; (8001d30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	630b      	str	r3, [r1, #48]	; 0x30
 8001d12:	e006      	b.n	8001d22 <RCC_AHB1PeriphClockCmd+0x2e>
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4904      	ldr	r1, [pc, #16]	; (8001d30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	630b      	str	r3, [r1, #48]	; 0x30
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <RCC_APB1PeriphClockCmd>:
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <RCC_APB1PeriphClockCmd+0x20>
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4a:	4909      	ldr	r1, [pc, #36]	; (8001d70 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	640b      	str	r3, [r1, #64]	; 0x40
 8001d52:	e006      	b.n	8001d62 <RCC_APB1PeriphClockCmd+0x2e>
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	4904      	ldr	r1, [pc, #16]	; (8001d70 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	640b      	str	r3, [r1, #64]	; 0x40
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <NVIC_SetPriority>:
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da0b      	bge.n	8001da0 <NVIC_SetPriority+0x2c>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <NVIC_SetPriority+0x4c>)
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	3b04      	subs	r3, #4
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	761a      	strb	r2, [r3, #24]
 8001d9e:	e009      	b.n	8001db4 <NVIC_SetPriority+0x40>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <NVIC_SetPriority+0x50>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <SysTick_Config>:
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ffc2 	bl	8001d74 <NVIC_SetPriority>
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <TimerInit>:
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	463b      	mov	r3, r7
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fec5 	bl	8001ba4 <RCC_GetClocksFreq>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <TimerInit+0x3c>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ffcf 	bl	8001dc8 <SysTick_Config>
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ffa0 	bl	8001d74 <NVIC_SetPriority>
 8001e34:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4804      	ldr	r0, [pc, #16]	; (8001e4c <TimerInit+0x40>)
 8001e3c:	f7fe fb1b 	bl	8000476 <memsetl>
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	10624dd3 	.word	0x10624dd3
 8001e4c:	200001dc 	.word	0x200001dc

08001e50 <TimerStart>:
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	2300      	movs	r3, #0
 8001e62:	75fb      	strb	r3, [r7, #23]
 8001e64:	e04c      	b.n	8001f00 <TimerStart+0xb0>
 8001e66:	7dfa      	ldrb	r2, [r7, #23]
 8001e68:	4929      	ldr	r1, [pc, #164]	; (8001f10 <TimerStart+0xc0>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	3310      	adds	r3, #16
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d13e      	bne.n	8001efa <TimerStart+0xaa>
 8001e7c:	7dfa      	ldrb	r2, [r7, #23]
 8001e7e:	4924      	ldr	r1, [pc, #144]	; (8001f10 <TimerStart+0xc0>)
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	7dfa      	ldrb	r2, [r7, #23]
 8001e90:	491f      	ldr	r1, [pc, #124]	; (8001f10 <TimerStart+0xc0>)
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3310      	adds	r3, #16
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	7dfa      	ldrb	r2, [r7, #23]
 8001ea4:	491a      	ldr	r1, [pc, #104]	; (8001f10 <TimerStart+0xc0>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	79fa      	ldrb	r2, [r7, #7]
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	7dfa      	ldrb	r2, [r7, #23]
 8001eb8:	4915      	ldr	r1, [pc, #84]	; (8001f10 <TimerStart+0xc0>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	7dfc      	ldrb	r4, [r7, #23]
 8001ecc:	f000 f872 	bl	8001fb4 <GetMilSecTick>
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <TimerStart+0xc0>)
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4423      	add	r3, r4
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	6019      	str	r1, [r3, #0]
 8001ee2:	7dfa      	ldrb	r2, [r7, #23]
 8001ee4:	490a      	ldr	r1, [pc, #40]	; (8001f10 <TimerStart+0xc0>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3308      	adds	r3, #8
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	e006      	b.n	8001f08 <TimerStart+0xb8>
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	3301      	adds	r3, #1
 8001efe:	75fb      	strb	r3, [r7, #23]
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	d9af      	bls.n	8001e66 <TimerStart+0x16>
 8001f06:	23ff      	movs	r3, #255	; 0xff
 8001f08:	4618      	mov	r0, r3
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}
 8001f10:	200001dc 	.word	0x200001dc

08001f14 <TimerStop>:
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d80a      	bhi.n	8001f3a <TimerStop+0x26>
 8001f24:	79fa      	ldrb	r2, [r7, #7]
 8001f26:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <TimerStop+0x9c>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	3310      	adds	r3, #16
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <TimerStop+0x2a>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e031      	b.n	8001fa2 <TimerStop+0x8e>
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	491b      	ldr	r1, [pc, #108]	; (8001fb0 <TimerStop+0x9c>)
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	79fa      	ldrb	r2, [r7, #7]
 8001f52:	4917      	ldr	r1, [pc, #92]	; (8001fb0 <TimerStop+0x9c>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3310      	adds	r3, #16
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	4912      	ldr	r1, [pc, #72]	; (8001fb0 <TimerStop+0x9c>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	330c      	adds	r3, #12
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <TimerStop+0x9c>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	3308      	adds	r3, #8
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <TimerStop+0x9c>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	200001dc 	.word	0x200001dc

08001fb4 <GetMilSecTick>:
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <GetMilSecTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	2000035c 	.word	0x2000035c

08001fcc <processTimerScheduler>:
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e068      	b.n	80020aa <processTimerScheduler+0xde>
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	4937      	ldr	r1, [pc, #220]	; (80020b8 <processTimerScheduler+0xec>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3310      	adds	r3, #16
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d05a      	beq.n	80020a4 <processTimerScheduler+0xd8>
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f863 	bl	80020bc <TimeExpired>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d053      	beq.n	80020a4 <processTimerScheduler+0xd8>
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	492e      	ldr	r1, [pc, #184]	; (80020b8 <processTimerScheduler+0xec>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	3310      	adds	r3, #16
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	4929      	ldr	r1, [pc, #164]	; (80020b8 <processTimerScheduler+0xec>)
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	3314      	adds	r3, #20
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	4924      	ldr	r1, [pc, #144]	; (80020b8 <processTimerScheduler+0xec>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	330c      	adds	r3, #12
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2bff      	cmp	r3, #255	; 0xff
 800203a:	d020      	beq.n	800207e <processTimerScheduler+0xb2>
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	491e      	ldr	r1, [pc, #120]	; (80020b8 <processTimerScheduler+0xec>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	330c      	adds	r3, #12
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d014      	beq.n	800207e <processTimerScheduler+0xb2>
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	4918      	ldr	r1, [pc, #96]	; (80020b8 <processTimerScheduler+0xec>)
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	330c      	adds	r3, #12
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b2d8      	uxtb	r0, r3
 800206c:	4912      	ldr	r1, [pc, #72]	; (80020b8 <processTimerScheduler+0xec>)
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	330c      	adds	r3, #12
 800207a:	4602      	mov	r2, r0
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	490d      	ldr	r1, [pc, #52]	; (80020b8 <processTimerScheduler+0xec>)
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	330c      	adds	r3, #12
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <processTimerScheduler+0xd2>
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff3b 	bl	8001f14 <TimerStop>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	3301      	adds	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	d993      	bls.n	8001fd8 <processTimerScheduler+0xc>
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200001dc 	.word	0x200001dc

080020bc <TimeExpired>:
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	b672      	cpsid	i
 80020cc:	f7ff ff72 	bl	8001fb4 <GetMilSecTick>
 80020d0:	60b8      	str	r0, [r7, #8]
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b0f      	cmp	r3, #15
 80020d6:	d80a      	bhi.n	80020ee <TimeExpired+0x32>
 80020d8:	79fa      	ldrb	r2, [r7, #7]
 80020da:	492a      	ldr	r1, [pc, #168]	; (8002184 <TimeExpired+0xc8>)
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	3310      	adds	r3, #16
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d102      	bne.n	80020f4 <TimeExpired+0x38>
 80020ee:	b662      	cpsie	i
 80020f0:	2300      	movs	r3, #0
 80020f2:	e042      	b.n	800217a <TimeExpired+0xbe>
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	4923      	ldr	r1, [pc, #140]	; (8002184 <TimeExpired+0xc8>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3304      	adds	r3, #4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	429a      	cmp	r2, r3
 800210a:	d30c      	bcc.n	8002126 <TimeExpired+0x6a>
 800210c:	79fa      	ldrb	r2, [r7, #7]
 800210e:	491d      	ldr	r1, [pc, #116]	; (8002184 <TimeExpired+0xc8>)
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3304      	adds	r3, #4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e00e      	b.n	8002144 <TimeExpired+0x88>
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	4916      	ldr	r1, [pc, #88]	; (8002184 <TimeExpired+0xc8>)
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	3304      	adds	r3, #4
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	79fa      	ldrb	r2, [r7, #7]
 8002146:	490f      	ldr	r1, [pc, #60]	; (8002184 <TimeExpired+0xc8>)
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	3308      	adds	r3, #8
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d202      	bcs.n	8002162 <TimeExpired+0xa6>
 800215c:	b662      	cpsie	i
 800215e:	2300      	movs	r3, #0
 8002160:	e00b      	b.n	800217a <TimeExpired+0xbe>
 8002162:	79fa      	ldrb	r2, [r7, #7]
 8002164:	4907      	ldr	r1, [pc, #28]	; (8002184 <TimeExpired+0xc8>)
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	3304      	adds	r3, #4
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	b662      	cpsie	i
 8002178:	2301      	movs	r3, #1
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001dc 	.word	0x200001dc

08002188 <SysTick_Handler>:
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SysTick_Handler+0x18>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <SysTick_Handler+0x18>)
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	2000035c 	.word	0x2000035c

080021a4 <TemHumSensor_Init>:
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	f000 f802 	bl	80021b0 <i2c_config>
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <i2c_config>:
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	2101      	movs	r1, #1
 80021b8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80021bc:	f7ff fdba 	bl	8001d34 <RCC_APB1PeriphClockCmd>
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <i2c_config+0x88>)
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	2300      	movs	r3, #0
 80021c6:	81bb      	strh	r3, [r7, #12]
 80021c8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80021cc:	81fb      	strh	r3, [r7, #14]
 80021ce:	2300      	movs	r3, #0
 80021d0:	823b      	strh	r3, [r7, #16]
 80021d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d6:	827b      	strh	r3, [r7, #18]
 80021d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021dc:	82bb      	strh	r3, [r7, #20]
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4619      	mov	r1, r3
 80021e4:	4815      	ldr	r0, [pc, #84]	; (800223c <i2c_config+0x8c>)
 80021e6:	f7ff fafb 	bl	80017e0 <I2C_Init>
 80021ea:	2101      	movs	r1, #1
 80021ec:	4813      	ldr	r0, [pc, #76]	; (800223c <i2c_config+0x8c>)
 80021ee:	f7ff fbb9 	bl	8001964 <I2C_Cmd>
 80021f2:	2101      	movs	r1, #1
 80021f4:	2002      	movs	r0, #2
 80021f6:	f7ff fd7d 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
 80021fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	2302      	movs	r3, #2
 8002202:	713b      	strb	r3, [r7, #4]
 8002204:	2302      	movs	r3, #2
 8002206:	717b      	strb	r3, [r7, #5]
 8002208:	2301      	movs	r3, #1
 800220a:	71bb      	strb	r3, [r7, #6]
 800220c:	2300      	movs	r3, #0
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	463b      	mov	r3, r7
 8002212:	4619      	mov	r1, r3
 8002214:	480a      	ldr	r0, [pc, #40]	; (8002240 <i2c_config+0x90>)
 8002216:	f7ff f9f3 	bl	8001600 <GPIO_Init>
 800221a:	2204      	movs	r2, #4
 800221c:	2108      	movs	r1, #8
 800221e:	4808      	ldr	r0, [pc, #32]	; (8002240 <i2c_config+0x90>)
 8002220:	f7ff fa94 	bl	800174c <GPIO_PinAFConfig>
 8002224:	2204      	movs	r2, #4
 8002226:	2109      	movs	r1, #9
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <i2c_config+0x90>)
 800222a:	f7ff fa8f 	bl	800174c <GPIO_PinAFConfig>
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	00061a80 	.word	0x00061a80
 800223c:	40005400 	.word	0x40005400
 8002240:	40020400 	.word	0x40020400

08002244 <USART2_IRQHandler>:
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	b672      	cpsid	i
 800224c:	f240 5125 	movw	r1, #1317	; 0x525
 8002250:	480e      	ldr	r0, [pc, #56]	; (800228c <USART2_IRQHandler+0x48>)
 8002252:	f001 fced 	bl	8003c30 <USART_GetITStatus>
 8002256:	4603      	mov	r3, r0
 8002258:	2b01      	cmp	r3, #1
 800225a:	d112      	bne.n	8002282 <USART2_IRQHandler+0x3e>
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <USART2_IRQHandler+0x4c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	480a      	ldr	r0, [pc, #40]	; (800228c <USART2_IRQHandler+0x48>)
 8002264:	f001 fcd4 	bl	8003c10 <USART_ReceiveData>
 8002268:	4603      	mov	r3, r0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	70fb      	strb	r3, [r7, #3]
 800226e:	1cfb      	adds	r3, r7, #3
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe f86a 	bl	800034c <bufEnDat>
 8002278:	f240 5125 	movw	r1, #1317	; 0x525
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <USART2_IRQHandler+0x48>)
 800227e:	f001 fd32 	bl	8003ce6 <USART_ClearITPendingBit>
 8002282:	b662      	cpsie	i
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40004400 	.word	0x40004400
 8002290:	20000360 	.word	0x20000360

08002294 <delayMicroseconds>:
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <ucg_gpio_init>:
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	2101      	movs	r1, #1
 80022b0:	2007      	movs	r0, #7
 80022b2:	f7ff fd1f 	bl	8001cf4 <RCC_AHB1PeriphClockCmd>
 80022b6:	2301      	movs	r3, #1
 80022b8:	713b      	strb	r3, [r7, #4]
 80022ba:	2303      	movs	r3, #3
 80022bc:	717b      	strb	r3, [r7, #5]
 80022be:	2300      	movs	r3, #0
 80022c0:	71bb      	strb	r3, [r7, #6]
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	463b      	mov	r3, r7
 80022ce:	4619      	mov	r1, r3
 80022d0:	480a      	ldr	r0, [pc, #40]	; (80022fc <ucg_gpio_init+0x54>)
 80022d2:	f7ff f995 	bl	8001600 <GPIO_Init>
 80022d6:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	463b      	mov	r3, r7
 80022de:	4619      	mov	r1, r3
 80022e0:	4807      	ldr	r0, [pc, #28]	; (8002300 <ucg_gpio_init+0x58>)
 80022e2:	f7ff f98d 	bl	8001600 <GPIO_Init>
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <ucg_gpio_init+0x5c>)
 80022f0:	f7ff f986 	bl	8001600 <GPIO_Init>
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800

08002308 <ucg_com_arduino_send_generic_SW_SPI>:
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
 8002314:	2308      	movs	r3, #8
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231c:	2b00      	cmp	r3, #0
 800231e:	da05      	bge.n	800232c <ucg_com_arduino_send_generic_SW_SPI+0x24>
 8002320:	2201      	movs	r2, #1
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	4814      	ldr	r0, [pc, #80]	; (8002378 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002326:	f7ff f9f9 	bl	800171c <GPIO_WriteBit>
 800232a:	e004      	b.n	8002336 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	4811      	ldr	r0, [pc, #68]	; (8002378 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002332:	f7ff f9f3 	bl	800171c <GPIO_WriteBit>
 8002336:	2001      	movs	r0, #1
 8002338:	f7ff ffac 	bl	8002294 <delayMicroseconds>
 800233c:	2201      	movs	r2, #1
 800233e:	2120      	movs	r1, #32
 8002340:	480d      	ldr	r0, [pc, #52]	; (8002378 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002342:	f7ff f9eb 	bl	800171c <GPIO_WriteBit>
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff ffa4 	bl	8002294 <delayMicroseconds>
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	3b01      	subs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	2200      	movs	r2, #0
 8002354:	2120      	movs	r1, #32
 8002356:	4808      	ldr	r0, [pc, #32]	; (8002378 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002358:	f7ff f9e0 	bl	800171c <GPIO_WriteBit>
 800235c:	2001      	movs	r0, #1
 800235e:	f7ff ff99 	bl	8002294 <delayMicroseconds>
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1d4      	bne.n	8002318 <ucg_com_arduino_send_generic_SW_SPI+0x10>
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40020000 	.word	0x40020000

0800237c <ucg_com_arduino_generic_SW_SPI>:
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	4613      	mov	r3, r2
 800238c:	813b      	strh	r3, [r7, #8]
 800238e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002392:	3b0a      	subs	r3, #10
 8002394:	2b0b      	cmp	r3, #11
 8002396:	f200 80dc 	bhi.w	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800239a:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <ucg_com_arduino_generic_SW_SPI+0x24>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023d1 	.word	0x080023d1
 80023a4:	08002553 	.word	0x08002553
 80023a8:	08002423 	.word	0x08002423
 80023ac:	0800242d 	.word	0x0800242d
 80023b0:	0800243d 	.word	0x0800243d
 80023b4:	0800244d 	.word	0x0800244d
 80023b8:	0800245f 	.word	0x0800245f
 80023bc:	0800247f 	.word	0x0800247f
 80023c0:	080024a7 	.word	0x080024a7
 80023c4:	080024dd 	.word	0x080024dd
 80023c8:	080024fb 	.word	0x080024fb
 80023cc:	0800254b 	.word	0x0800254b
 80023d0:	f7ff ff6a 	bl	80022a8 <ucg_gpio_init>
 80023d4:	2201      	movs	r2, #1
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	4860      	ldr	r0, [pc, #384]	; (800255c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80023da:	f7ff f99f 	bl	800171c <GPIO_WriteBit>
 80023de:	2201      	movs	r2, #1
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	485f      	ldr	r0, [pc, #380]	; (8002560 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80023e4:	f7ff f99a 	bl	800171c <GPIO_WriteBit>
 80023e8:	2201      	movs	r2, #1
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	485d      	ldr	r0, [pc, #372]	; (8002564 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80023ee:	f7ff f995 	bl	800171c <GPIO_WriteBit>
 80023f2:	2201      	movs	r2, #1
 80023f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f8:	4858      	ldr	r0, [pc, #352]	; (800255c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80023fa:	f7ff f98f 	bl	800171c <GPIO_WriteBit>
 80023fe:	2200      	movs	r2, #0
 8002400:	2120      	movs	r1, #32
 8002402:	4856      	ldr	r0, [pc, #344]	; (800255c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002404:	f7ff f98a 	bl	800171c <GPIO_WriteBit>
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240e:	4854      	ldr	r0, [pc, #336]	; (8002560 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002410:	f7ff f984 	bl	800171c <GPIO_WriteBit>
 8002414:	2201      	movs	r2, #1
 8002416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800241a:	4850      	ldr	r0, [pc, #320]	; (800255c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800241c:	f7ff f97e 	bl	800171c <GPIO_WriteBit>
 8002420:	e097      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002422:	893b      	ldrh	r3, [r7, #8]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff35 	bl	8002294 <delayMicroseconds>
 800242a:	e092      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800242c:	893b      	ldrh	r3, [r7, #8]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	484b      	ldr	r0, [pc, #300]	; (8002564 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8002436:	f7ff f971 	bl	800171c <GPIO_WriteBit>
 800243a:	e08a      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800243c:	893b      	ldrh	r3, [r7, #8]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	2140      	movs	r1, #64	; 0x40
 8002444:	4846      	ldr	r0, [pc, #280]	; (8002560 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8002446:	f7ff f969 	bl	800171c <GPIO_WriteBit>
 800244a:	e082      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800244c:	893b      	ldrh	r3, [r7, #8]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002456:	4841      	ldr	r0, [pc, #260]	; (800255c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002458:	f7ff f960 	bl	800171c <GPIO_WriteBit>
 800245c:	e079      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800245e:	893b      	ldrh	r3, [r7, #8]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff ff4f 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 800246a:	e072      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff ff48 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 8002478:	893b      	ldrh	r3, [r7, #8]
 800247a:	3b01      	subs	r3, #1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	893b      	ldrh	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f3      	bne.n	800246c <ucg_com_arduino_generic_SW_SPI+0xf0>
 8002484:	e065      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4619      	mov	r1, r3
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f7ff ff3b 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3301      	adds	r3, #1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f7ff ff34 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 80024a0:	893b      	ldrh	r3, [r7, #8]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	813b      	strh	r3, [r7, #8]
 80024a6:	893b      	ldrh	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ec      	bne.n	8002486 <ucg_com_arduino_generic_SW_SPI+0x10a>
 80024ac:	e051      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff ff27 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3301      	adds	r3, #1
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7ff ff20 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3302      	adds	r3, #2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff19 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 80024d6:	893b      	ldrh	r3, [r7, #8]
 80024d8:	3b01      	subs	r3, #1
 80024da:	813b      	strh	r3, [r7, #8]
 80024dc:	893b      	ldrh	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e5      	bne.n	80024ae <ucg_com_arduino_generic_SW_SPI+0x132>
 80024e2:	e036      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff ff0a 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 80024f4:	893b      	ldrh	r3, [r7, #8]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	893b      	ldrh	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f1      	bne.n	80024e4 <ucg_com_arduino_generic_SW_SPI+0x168>
 8002500:	e027      	b.n	8002552 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <ucg_com_arduino_generic_SW_SPI+0x1b0>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d106      	bne.n	8002520 <ucg_com_arduino_generic_SW_SPI+0x1a4>
 8002512:	2200      	movs	r2, #0
 8002514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002518:	4810      	ldr	r0, [pc, #64]	; (800255c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800251a:	f7ff f8ff 	bl	800171c <GPIO_WriteBit>
 800251e:	e005      	b.n	800252c <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8002520:	2201      	movs	r2, #1
 8002522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002528:	f7ff f8f8 	bl	800171c <GPIO_WriteBit>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3301      	adds	r3, #1
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f7ff fee5 	bl	8002308 <ucg_com_arduino_send_generic_SW_SPI>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3301      	adds	r3, #1
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	893b      	ldrh	r3, [r7, #8]
 8002546:	3b01      	subs	r3, #1
 8002548:	813b      	strh	r3, [r7, #8]
 800254a:	893b      	ldrh	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1d8      	bne.n	8002502 <ucg_com_arduino_generic_SW_SPI+0x186>
 8002550:	bf00      	nop
 8002552:	2301      	movs	r3, #1
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800

08002568 <Ucglib4WireSWSPI_begin>:
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <Ucglib4WireSWSPI_begin+0x2c>)
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <Ucglib4WireSWSPI_begin+0x30>)
 8002578:	4908      	ldr	r1, [pc, #32]	; (800259c <Ucglib4WireSWSPI_begin+0x34>)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f001 f9a2 	bl	80038c4 <ucg_Init>
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 ff86 	bl	8003496 <ucg_SetFontMode>
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	0800237d 	.word	0x0800237d
 8002598:	08002bd5 	.word	0x08002bd5
 800259c:	08002cfd 	.word	0x08002cfd

080025a0 <ucg_DrawBox>:
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	817b      	strh	r3, [r7, #10]
 80025b2:	460b      	mov	r3, r1
 80025b4:	813b      	strh	r3, [r7, #8]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
 80025ba:	e014      	b.n	80025e6 <ucg_DrawBox+0x46>
 80025bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80025c4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f001 f9ed 	bl	80039a8 <ucg_DrawHLine>
 80025ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	833b      	strh	r3, [r7, #24]
 80025da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	dce6      	bgt.n	80025bc <ucg_DrawBox+0x1c>
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <ucg_ClearScreen>:
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af02      	add	r7, sp, #8
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	2300      	movs	r3, #0
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2300      	movs	r3, #0
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f001 f9ec 	bl	80039e6 <ucg_SetColor>
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fb3b 	bl	8002c8a <ucg_SetMaxClipRange>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4613      	mov	r3, r2
 8002624:	2200      	movs	r2, #0
 8002626:	2100      	movs	r1, #0
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ffb9 	bl	80025a0 <ucg_DrawBox>
 800262e:	23ff      	movs	r3, #255	; 0xff
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	23ff      	movs	r3, #255	; 0xff
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	2100      	movs	r1, #0
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f001 f9d4 	bl	80039e6 <ucg_SetColor>
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <ucg_ccs_init>:
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	461a      	mov	r2, r3
 8002654:	4603      	mov	r3, r0
 8002656:	70fb      	strb	r3, [r7, #3]
 8002658:	460b      	mov	r3, r1
 800265a:	70bb      	strb	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	803b      	strh	r3, [r7, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	705a      	strb	r2, [r3, #1]
 8002666:	78bb      	ldrb	r3, [r7, #2]
 8002668:	b29a      	uxth	r2, r3
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	b29b      	uxth	r3, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	b29b      	uxth	r3, r3
 8002672:	b21a      	sxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	809a      	strh	r2, [r3, #4]
 8002678:	883b      	ldrh	r3, [r7, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21a      	sxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	811a      	strh	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	805a      	strh	r2, [r3, #2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002698:	fb92 f3f3 	sdiv	r3, r2, r3
 800269c:	b21a      	sxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	80da      	strh	r2, [r3, #6]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da0c      	bge.n	80026c6 <ucg_ccs_init+0x80>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	425b      	negs	r3, r3
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	809a      	strh	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c4:	805a      	strh	r2, [r3, #2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80026d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80026d6:	fb02 f201 	mul.w	r2, r2, r1
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	b21a      	sxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	815a      	strh	r2, [r3, #10]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026e8:	0fda      	lsrs	r2, r3, #31
 80026ea:	4413      	add	r3, r2
 80026ec:	105b      	asrs	r3, r3, #1
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	819a      	strh	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <ucg_ccs_step>:
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4413      	add	r3, r2
 800271c:	b2da      	uxtb	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4413      	add	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	b21a      	sxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	819a      	strh	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002748:	429a      	cmp	r2, r3
 800274a:	db16      	blt.n	800277a <ucg_ccs_step+0x74>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4413      	add	r3, r2
 800275a:	b2da      	uxtb	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800276e:	b29b      	uxth	r3, r3
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	b29b      	uxth	r3, r3
 8002774:	b21a      	sxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	819a      	strh	r2, [r3, #12]
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <ucg_ccs_seek>:
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	807b      	strh	r3, [r7, #2]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	fb12 f303 	smulbb	r3, r2, r3
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	fb12 f303 	smulbb	r3, r2, r3
 80027be:	b29a      	uxth	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027c6:	0fd9      	lsrs	r1, r3, #31
 80027c8:	440b      	add	r3, r1
 80027ca:	105b      	asrs	r3, r3, #1
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	81fb      	strh	r3, [r7, #14]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0e      	blt.n	80027fe <ucg_ccs_seek+0x78>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80027ee:	fb93 f3f1 	sdiv	r3, r3, r1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e00d      	b.n	800281a <ucg_ccs_seek+0x94>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800280c:	fb93 f3f1 	sdiv	r3, r3, r1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	b2da      	uxtb	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002824:	fb93 f1f2 	sdiv	r1, r3, r2
 8002828:	fb02 f201 	mul.w	r2, r2, r1
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	b21a      	sxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	819a      	strh	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	4413      	add	r3, r2
 800283e:	b2da      	uxtb	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <ucg_dev_default_cb>:
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	460b      	mov	r3, r1
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d00a      	beq.n	800287c <ucg_dev_default_cb+0x2c>
 8002866:	2b17      	cmp	r3, #23
 8002868:	d10f      	bne.n	800288a <ucg_dev_default_cb+0x3a>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	4798      	blx	r3
 8002878:	4603      	mov	r3, r0
 800287a:	e007      	b.n	800288c <ucg_dev_default_cb+0x3c>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	3370      	adds	r3, #112	; 0x70
 8002882:	6810      	ldr	r0, [r2, #0]
 8002884:	6851      	ldr	r1, [r2, #4]
 8002886:	c303      	stmia	r3!, {r0, r1}
 8002888:	bf00      	nop
 800288a:	2301      	movs	r3, #1
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <ucg_ext_none>:
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	460b      	mov	r3, r1
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	817b      	strh	r3, [r7, #10]
 80028a2:	2301      	movs	r3, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <ucg_handle_st7735_l90fx>:
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f001 facf 	bl	8003e5c <ucg_clip_l90fx>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d053      	beq.n	800296c <ucg_handle_st7735_l90fx+0xbc>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d008      	beq.n	80028e0 <ucg_handle_st7735_l90fx+0x30>
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d00b      	beq.n	80028ea <ucg_handle_st7735_l90fx+0x3a>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11b      	bne.n	800290e <ucg_handle_st7735_l90fx+0x5e>
 80028d6:	4928      	ldr	r1, [pc, #160]	; (8002978 <ucg_handle_st7735_l90fx+0xc8>)
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f001 fded 	bl	80044b8 <ucg_com_SendCmdSeq>
 80028de:	e028      	b.n	8002932 <ucg_handle_st7735_l90fx+0x82>
 80028e0:	4926      	ldr	r1, [pc, #152]	; (800297c <ucg_handle_st7735_l90fx+0xcc>)
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f001 fde8 	bl	80044b8 <ucg_com_SendCmdSeq>
 80028e8:	e023      	b.n	8002932 <ucg_handle_st7735_l90fx+0x82>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028ee:	81fb      	strh	r3, [r7, #14]
 80028f0:	89fb      	ldrh	r3, [r7, #14]
 80028f2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	b21a      	sxth	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	849a      	strh	r2, [r3, #36]	; 0x24
 80028fe:	4920      	ldr	r1, [pc, #128]	; (8002980 <ucg_handle_st7735_l90fx+0xd0>)
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f001 fdd9 	bl	80044b8 <ucg_com_SendCmdSeq>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	89fa      	ldrh	r2, [r7, #14]
 800290a:	849a      	strh	r2, [r3, #36]	; 0x24
 800290c:	e011      	b.n	8002932 <ucg_handle_st7735_l90fx+0x82>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002912:	81fb      	strh	r3, [r7, #14]
 8002914:	89fb      	ldrh	r3, [r7, #14]
 8002916:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800291a:	b29b      	uxth	r3, r3
 800291c:	b21a      	sxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	84da      	strh	r2, [r3, #38]	; 0x26
 8002922:	4918      	ldr	r1, [pc, #96]	; (8002984 <ucg_handle_st7735_l90fx+0xd4>)
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f001 fdc7 	bl	80044b8 <ucg_com_SendCmdSeq>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	89fa      	ldrh	r2, [r7, #14]
 800292e:	84da      	strh	r2, [r3, #38]	; 0x26
 8002930:	bf00      	nop
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002938:	723b      	strb	r3, [r7, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002940:	727b      	strb	r3, [r7, #9]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002948:	72bb      	strb	r3, [r7, #10]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69dc      	ldr	r4, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002954:	b29a      	uxth	r2, r3
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	2113      	movs	r1, #19
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	47a0      	blx	r4
 8002960:	2101      	movs	r1, #1
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f001 fcf4 	bl	8004350 <ucg_com_SetCSLineStatus>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <ucg_handle_st7735_l90fx+0xbe>
 800296c:	2300      	movs	r3, #0
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	bf00      	nop
 8002978:	08005104 	.word	0x08005104
 800297c:	08005124 	.word	0x08005124
 8002980:	08005148 	.word	0x08005148
 8002984:	0800516c 	.word	0x0800516c

08002988 <ucg_handle_st7735_l90se>:
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	2300      	movs	r3, #0
 8002992:	75fb      	strb	r3, [r7, #23]
 8002994:	e01a      	b.n	80029cc <ucg_handle_st7735_l90se+0x44>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f103 0146 	add.w	r1, r3, #70	; 0x46
 800299c:	7dfa      	ldrb	r2, [r7, #23]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	18c8      	adds	r0, r1, r3
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80029c2:	f7ff fe40 	bl	8002646 <ucg_ccs_init>
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	3301      	adds	r3, #1
 80029ca:	75fb      	strb	r3, [r7, #23]
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d9e1      	bls.n	8002996 <ucg_handle_st7735_l90se+0xe>
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f001 fbc2 	bl	800415c <ucg_clip_l90se>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d071      	beq.n	8002ac2 <ucg_handle_st7735_l90se+0x13a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d008      	beq.n	80029fa <ucg_handle_st7735_l90se+0x72>
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d00b      	beq.n	8002a04 <ucg_handle_st7735_l90se+0x7c>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11b      	bne.n	8002a28 <ucg_handle_st7735_l90se+0xa0>
 80029f0:	4936      	ldr	r1, [pc, #216]	; (8002acc <ucg_handle_st7735_l90se+0x144>)
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f001 fd60 	bl	80044b8 <ucg_com_SendCmdSeq>
 80029f8:	e028      	b.n	8002a4c <ucg_handle_st7735_l90se+0xc4>
 80029fa:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <ucg_handle_st7735_l90se+0x148>)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f001 fd5b 	bl	80044b8 <ucg_com_SendCmdSeq>
 8002a02:	e023      	b.n	8002a4c <ucg_handle_st7735_l90se+0xc4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a08:	827b      	strh	r3, [r7, #18]
 8002a0a:	8a7b      	ldrh	r3, [r7, #18]
 8002a0c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b21a      	sxth	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	849a      	strh	r2, [r3, #36]	; 0x24
 8002a18:	492e      	ldr	r1, [pc, #184]	; (8002ad4 <ucg_handle_st7735_l90se+0x14c>)
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f001 fd4c 	bl	80044b8 <ucg_com_SendCmdSeq>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8a7a      	ldrh	r2, [r7, #18]
 8002a24:	849a      	strh	r2, [r3, #36]	; 0x24
 8002a26:	e011      	b.n	8002a4c <ucg_handle_st7735_l90se+0xc4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2c:	827b      	strh	r3, [r7, #18]
 8002a2e:	8a7b      	ldrh	r3, [r7, #18]
 8002a30:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26
 8002a3c:	4926      	ldr	r1, [pc, #152]	; (8002ad8 <ucg_handle_st7735_l90se+0x150>)
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f001 fd3a 	bl	80044b8 <ucg_com_SendCmdSeq>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8a7a      	ldrh	r2, [r7, #18]
 8002a48:	84da      	strh	r2, [r3, #38]	; 0x26
 8002a4a:	bf00      	nop
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	82bb      	strh	r3, [r7, #20]
 8002a50:	e02a      	b.n	8002aa8 <ucg_handle_st7735_l90se+0x120>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a58:	733b      	strb	r3, [r7, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a60:	737b      	strb	r3, [r7, #13]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a68:	73bb      	strb	r3, [r7, #14]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69dc      	ldr	r4, [r3, #28]
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	2201      	movs	r2, #1
 8002a74:	2113      	movs	r1, #19
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	47a0      	blx	r4
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3346      	adds	r3, #70	; 0x46
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fe41 	bl	8002706 <ucg_ccs_step>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3346      	adds	r3, #70	; 0x46
 8002a88:	330e      	adds	r3, #14
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fe3b 	bl	8002706 <ucg_ccs_step>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3346      	adds	r3, #70	; 0x46
 8002a94:	331c      	adds	r3, #28
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe35 	bl	8002706 <ucg_ccs_step>
 8002a9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	82bb      	strh	r3, [r7, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002aae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbcd      	blt.n	8002a52 <ucg_handle_st7735_l90se+0xca>
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f001 fc49 	bl	8004350 <ucg_com_SetCSLineStatus>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <ucg_handle_st7735_l90se+0x13c>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd90      	pop	{r4, r7, pc}
 8002acc:	08005104 	.word	0x08005104
 8002ad0:	08005124 	.word	0x08005124
 8002ad4:	08005148 	.word	0x08005148
 8002ad8:	0800516c 	.word	0x0800516c

08002adc <ucg_dev_ic_st7735_18>:
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002aee:	3b0a      	subs	r3, #10
 8002af0:	2b0b      	cmp	r3, #11
 8002af2:	d85f      	bhi.n	8002bb4 <ucg_dev_ic_st7735_18+0xd8>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <ucg_dev_ic_st7735_18+0x20>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b2d 	.word	0x08002b2d
 8002b00:	08002b47 	.word	0x08002b47
 8002b04:	08002bb5 	.word	0x08002bb5
 8002b08:	08002bb5 	.word	0x08002bb5
 8002b0c:	08002bb5 	.word	0x08002bb5
 8002b10:	08002b53 	.word	0x08002b53
 8002b14:	08002bb5 	.word	0x08002bb5
 8002b18:	08002bb5 	.word	0x08002bb5
 8002b1c:	08002bb5 	.word	0x08002bb5
 8002b20:	08002bb5 	.word	0x08002bb5
 8002b24:	08002b63 	.word	0x08002b63
 8002b28:	08002bab 	.word	0x08002bab
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	841a      	strh	r2, [r3, #32]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	845a      	strh	r2, [r3, #34]	; 0x22
 8002b38:	2242      	movs	r2, #66	; 0x42
 8002b3a:	2164      	movs	r1, #100	; 0x64
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f001 fb56 	bl	80041ee <ucg_com_PowerUp>
 8002b42:	4603      	mov	r3, r0
 8002b44:	e03e      	b.n	8002bc4 <ucg_dev_ic_st7735_18+0xe8>
 8002b46:	4921      	ldr	r1, [pc, #132]	; (8002bcc <ucg_dev_ic_st7735_18+0xf0>)
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f001 fcb5 	bl	80044b8 <ucg_com_SendCmdSeq>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e038      	b.n	8002bc4 <ucg_dev_ic_st7735_18+0xe8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	805a      	strh	r2, [r3, #2]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e030      	b.n	8002bc4 <ucg_dev_ic_st7735_18+0xe8>
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f001 f960 	bl	8003e28 <ucg_clip_is_pixel_visible>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01b      	beq.n	8002ba6 <ucg_dev_ic_st7735_18+0xca>
 8002b6e:	4918      	ldr	r1, [pc, #96]	; (8002bd0 <ucg_dev_ic_st7735_18+0xf4>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f001 fca1 	bl	80044b8 <ucg_com_SendCmdSeq>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b7c:	753b      	strb	r3, [r7, #20]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b84:	757b      	strb	r3, [r7, #21]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002b8c:	75bb      	strb	r3, [r7, #22]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	69dc      	ldr	r4, [r3, #28]
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	2201      	movs	r2, #1
 8002b98:	2113      	movs	r1, #19
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	47a0      	blx	r4
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f001 fbd5 	bl	8004350 <ucg_com_SetCSLineStatus>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00c      	b.n	8002bc4 <ucg_dev_ic_st7735_18+0xe8>
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff fe80 	bl	80028b0 <ucg_handle_st7735_l90fx>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e007      	b.n	8002bc4 <ucg_dev_ic_st7735_18+0xe8>
 8002bb4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fe47 	bl	8002850 <ucg_dev_default_cb>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd90      	pop	{r4, r7, pc}
 8002bcc:	08005190 	.word	0x08005190
 8002bd0:	080050e4 	.word	0x080050e4

08002bd4 <ucg_ext_st7735_18>:
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002be6:	2b17      	cmp	r3, #23
 8002be8:	d103      	bne.n	8002bf2 <ucg_ext_st7735_18+0x1e>
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff fecc 	bl	8002988 <ucg_handle_st7735_l90se>
 8002bf0:	bf00      	nop
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <ucg_PowerDown>:
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <ucg_PowerDown+0x2c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	210b      	movs	r1, #11
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	7813      	ldrb	r3, [r2, #0]
 8002c22:	f36f 0300 	bfc	r3, #0, #1
 8002c26:	7013      	strb	r3, [r2, #0]
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <ucg_PowerUp>:
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ffdf 	bl	8002bfc <ucg_PowerDown>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	210a      	movs	r1, #10
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	81fb      	strh	r3, [r7, #14]
 8002c4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <ucg_PowerUp+0x30>
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	7813      	ldrb	r3, [r2, #0]
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	7013      	strb	r3, [r2, #0]
 8002c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <ucg_SetClipBox>:
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	210c      	movs	r1, #12
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <ucg_SetMaxClipRange>:
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	f107 030c 	add.w	r3, r7, #12
 8002c98:	3202      	adds	r2, #2
 8002c9a:	6810      	ldr	r0, [r2, #0]
 8002c9c:	6018      	str	r0, [r3, #0]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	817b      	strh	r3, [r7, #10]
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ffdd 	bl	8002c6c <ucg_SetClipBox>
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ucg_GetDimension>:
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	3202      	adds	r2, #2
 8002cca:	210f      	movs	r1, #15
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4798      	blx	r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ffda 	bl	8002c8a <ucg_SetMaxClipRange>
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <ucg_DrawL90FXWithArg>:
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	3224      	adds	r2, #36	; 0x24
 8002cee:	2115      	movs	r1, #21
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <ucg_dev_st7735_18x128x128>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	460b      	mov	r3, r1
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d0e:	2b0b      	cmp	r3, #11
 8002d10:	d015      	beq.n	8002d3e <ucg_dev_st7735_18x128x128+0x42>
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	d01c      	beq.n	8002d50 <ucg_dev_st7735_18x128x128+0x54>
 8002d16:	2b0a      	cmp	r3, #10
 8002d18:	d122      	bne.n	8002d60 <ucg_dev_st7735_18x128x128+0x64>
 8002d1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4619      	mov	r1, r3
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff feda 	bl	8002adc <ucg_dev_ic_st7735_18>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <ucg_dev_st7735_18x128x128+0x36>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e01e      	b.n	8002d70 <ucg_dev_st7735_18x128x128+0x74>
 8002d32:	4911      	ldr	r1, [pc, #68]	; (8002d78 <ucg_dev_st7735_18x128x128+0x7c>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f001 fbbf 	bl	80044b8 <ucg_com_SendCmdSeq>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e018      	b.n	8002d70 <ucg_dev_st7735_18x128x128+0x74>
 8002d3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4619      	mov	r1, r3
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff fec8 	bl	8002adc <ucg_dev_ic_st7735_18>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	e00f      	b.n	8002d70 <ucg_dev_st7735_18x128x128+0x74>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	805a      	strh	r2, [r3, #2]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e007      	b.n	8002d70 <ucg_dev_st7735_18x128x128+0x74>
 8002d60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	4619      	mov	r1, r3
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff feb7 	bl	8002adc <ucg_dev_ic_st7735_18>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	08005198 	.word	0x08005198

08002d7c <ucg_font_get_byte>:
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <ucg_font_get_word>:
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	81fb      	strh	r3, [r7, #14]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	89fb      	ldrh	r3, [r7, #14]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	81fb      	strh	r3, [r7, #14]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	89fb      	ldrh	r3, [r7, #14]
 8002dce:	4413      	add	r3, r2
 8002dd0:	81fb      	strh	r3, [r7, #14]
 8002dd2:	89fb      	ldrh	r3, [r7, #14]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <ucg_read_font_info>:
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	2100      	movs	r1, #0
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f7ff ffc5 	bl	8002d7c <ucg_font_get_byte>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	6838      	ldr	r0, [r7, #0]
 8002dfe:	f7ff ffbd 	bl	8002d7c <ucg_font_get_byte>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	705a      	strb	r2, [r3, #1]
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	6838      	ldr	r0, [r7, #0]
 8002e0e:	f7ff ffb5 	bl	8002d7c <ucg_font_get_byte>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	709a      	strb	r2, [r3, #2]
 8002e1a:	2103      	movs	r1, #3
 8002e1c:	6838      	ldr	r0, [r7, #0]
 8002e1e:	f7ff ffad 	bl	8002d7c <ucg_font_get_byte>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	70da      	strb	r2, [r3, #3]
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	6838      	ldr	r0, [r7, #0]
 8002e2e:	f7ff ffa5 	bl	8002d7c <ucg_font_get_byte>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	711a      	strb	r2, [r3, #4]
 8002e3a:	2105      	movs	r1, #5
 8002e3c:	6838      	ldr	r0, [r7, #0]
 8002e3e:	f7ff ff9d 	bl	8002d7c <ucg_font_get_byte>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	715a      	strb	r2, [r3, #5]
 8002e4a:	2106      	movs	r1, #6
 8002e4c:	6838      	ldr	r0, [r7, #0]
 8002e4e:	f7ff ff95 	bl	8002d7c <ucg_font_get_byte>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	719a      	strb	r2, [r3, #6]
 8002e5a:	2107      	movs	r1, #7
 8002e5c:	6838      	ldr	r0, [r7, #0]
 8002e5e:	f7ff ff8d 	bl	8002d7c <ucg_font_get_byte>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	71da      	strb	r2, [r3, #7]
 8002e6a:	2108      	movs	r1, #8
 8002e6c:	6838      	ldr	r0, [r7, #0]
 8002e6e:	f7ff ff85 	bl	8002d7c <ucg_font_get_byte>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	721a      	strb	r2, [r3, #8]
 8002e7a:	2109      	movs	r1, #9
 8002e7c:	6838      	ldr	r0, [r7, #0]
 8002e7e:	f7ff ff7d 	bl	8002d7c <ucg_font_get_byte>
 8002e82:	4603      	mov	r3, r0
 8002e84:	b25a      	sxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	725a      	strb	r2, [r3, #9]
 8002e8a:	210a      	movs	r1, #10
 8002e8c:	6838      	ldr	r0, [r7, #0]
 8002e8e:	f7ff ff75 	bl	8002d7c <ucg_font_get_byte>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b25a      	sxtb	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	729a      	strb	r2, [r3, #10]
 8002e9a:	210b      	movs	r1, #11
 8002e9c:	6838      	ldr	r0, [r7, #0]
 8002e9e:	f7ff ff6d 	bl	8002d7c <ucg_font_get_byte>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b25a      	sxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	72da      	strb	r2, [r3, #11]
 8002eaa:	210c      	movs	r1, #12
 8002eac:	6838      	ldr	r0, [r7, #0]
 8002eae:	f7ff ff65 	bl	8002d7c <ucg_font_get_byte>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	b25a      	sxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	731a      	strb	r2, [r3, #12]
 8002eba:	210d      	movs	r1, #13
 8002ebc:	6838      	ldr	r0, [r7, #0]
 8002ebe:	f7ff ff5d 	bl	8002d7c <ucg_font_get_byte>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	b25a      	sxtb	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	735a      	strb	r2, [r3, #13]
 8002eca:	210e      	movs	r1, #14
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f7ff ff55 	bl	8002d7c <ucg_font_get_byte>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	739a      	strb	r2, [r3, #14]
 8002eda:	210f      	movs	r1, #15
 8002edc:	6838      	ldr	r0, [r7, #0]
 8002ede:	f7ff ff4d 	bl	8002d7c <ucg_font_get_byte>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	b25a      	sxtb	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	73da      	strb	r2, [r3, #15]
 8002eea:	2110      	movs	r1, #16
 8002eec:	6838      	ldr	r0, [r7, #0]
 8002eee:	f7ff ff45 	bl	8002d7c <ucg_font_get_byte>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	b25a      	sxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	741a      	strb	r2, [r3, #16]
 8002efa:	2111      	movs	r1, #17
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	f7ff ff4f 	bl	8002da0 <ucg_font_get_word>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	825a      	strh	r2, [r3, #18]
 8002f0a:	2113      	movs	r1, #19
 8002f0c:	6838      	ldr	r0, [r7, #0]
 8002f0e:	f7ff ff47 	bl	8002da0 <ucg_font_get_word>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	829a      	strh	r2, [r3, #20]
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <ucg_font_decode_get_unsigned_bits>:
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	70fb      	strb	r3, [r7, #3]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7b1b      	ldrb	r3, [r3, #12]
 8002f32:	737b      	strb	r3, [r7, #13]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	7b7b      	ldrb	r3, [r7, #13]
 8002f40:	fa42 f303 	asr.w	r3, r2, r3
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	7b7b      	ldrb	r3, [r7, #13]
 8002f48:	73bb      	strb	r3, [r7, #14]
 8002f4a:	7bba      	ldrb	r2, [r7, #14]
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	4413      	add	r3, r2
 8002f50:	73bb      	strb	r3, [r7, #14]
 8002f52:	7bbb      	ldrb	r3, [r7, #14]
 8002f54:	2b07      	cmp	r3, #7
 8002f56:	d91a      	bls.n	8002f8e <ucg_font_decode_get_unsigned_bits+0x6c>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	733b      	strb	r3, [r7, #12]
 8002f5c:	7b3a      	ldrb	r2, [r7, #12]
 8002f5e:	7b7b      	ldrb	r3, [r7, #13]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	733b      	strb	r3, [r7, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	7b3b      	ldrb	r3, [r7, #12]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	3b08      	subs	r3, #8
 8002f8c:	73bb      	strb	r3, [r7, #14]
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7bba      	ldrb	r2, [r7, #14]
 8002fa8:	731a      	strb	r2, [r3, #12]
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <ucg_font_decode_get_signed_bits>:
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ffaa 	bl	8002f22 <ucg_font_decode_get_unsigned_bits>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73bb      	strb	r3, [r7, #14]
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	70fb      	strb	r3, [r7, #3]
 8002fdc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	73bb      	strb	r3, [r7, #14]
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	7bbb      	ldrb	r3, [r7, #14]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <ucg_add_vector_y>:
 8002ffe:	b490      	push	{r4, r7}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	4604      	mov	r4, r0
 8003006:	4608      	mov	r0, r1
 8003008:	4611      	mov	r1, r2
 800300a:	461a      	mov	r2, r3
 800300c:	4623      	mov	r3, r4
 800300e:	80fb      	strh	r3, [r7, #6]
 8003010:	4603      	mov	r3, r0
 8003012:	717b      	strb	r3, [r7, #5]
 8003014:	460b      	mov	r3, r1
 8003016:	713b      	strb	r3, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	70fb      	strb	r3, [r7, #3]
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d00b      	beq.n	800303a <ucg_add_vector_y+0x3c>
 8003022:	2b02      	cmp	r3, #2
 8003024:	d011      	beq.n	800304a <ucg_add_vector_y+0x4c>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d117      	bne.n	800305a <ucg_add_vector_y+0x5c>
 800302a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800302e:	b29a      	uxth	r2, r3
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	4413      	add	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	80fb      	strh	r3, [r7, #6]
 8003038:	e017      	b.n	800306a <ucg_add_vector_y+0x6c>
 800303a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800303e:	b29a      	uxth	r2, r3
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	4413      	add	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	80fb      	strh	r3, [r7, #6]
 8003048:	e00f      	b.n	800306a <ucg_add_vector_y+0x6c>
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003050:	b29b      	uxth	r3, r3
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	b29b      	uxth	r3, r3
 8003056:	80fb      	strh	r3, [r7, #6]
 8003058:	e007      	b.n	800306a <ucg_add_vector_y+0x6c>
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003060:	b29b      	uxth	r3, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	b29b      	uxth	r3, r3
 8003066:	80fb      	strh	r3, [r7, #6]
 8003068:	bf00      	nop
 800306a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bc90      	pop	{r4, r7}
 8003076:	4770      	bx	lr

08003078 <ucg_add_vector_x>:
 8003078:	b490      	push	{r4, r7}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4604      	mov	r4, r0
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4623      	mov	r3, r4
 8003088:	80fb      	strh	r3, [r7, #6]
 800308a:	4603      	mov	r3, r0
 800308c:	717b      	strb	r3, [r7, #5]
 800308e:	460b      	mov	r3, r1
 8003090:	713b      	strb	r3, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	70fb      	strb	r3, [r7, #3]
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d00b      	beq.n	80030b4 <ucg_add_vector_x+0x3c>
 800309c:	2b02      	cmp	r3, #2
 800309e:	d011      	beq.n	80030c4 <ucg_add_vector_x+0x4c>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d117      	bne.n	80030d4 <ucg_add_vector_x+0x5c>
 80030a4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4413      	add	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	80fb      	strh	r3, [r7, #6]
 80030b2:	e017      	b.n	80030e4 <ucg_add_vector_x+0x6c>
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	b29b      	uxth	r3, r3
 80030c0:	80fb      	strh	r3, [r7, #6]
 80030c2:	e00f      	b.n	80030e4 <ucg_add_vector_x+0x6c>
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	80fb      	strh	r3, [r7, #6]
 80030d2:	e007      	b.n	80030e4 <ucg_add_vector_x+0x6c>
 80030d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	4413      	add	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	80fb      	strh	r3, [r7, #6]
 80030e2:	bf00      	nop
 80030e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc90      	pop	{r4, r7}
 80030f0:	4770      	bx	lr

080030f2 <ucg_font_decode_len>:
 80030f2:	b590      	push	{r4, r7, lr}
 80030f4:	b089      	sub	sp, #36	; 0x24
 80030f6:	af02      	add	r7, sp, #8
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
 80030fe:	4613      	mov	r3, r2
 8003100:	70bb      	strb	r3, [r7, #2]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3380      	adds	r3, #128	; 0x80
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	75fb      	strb	r3, [r7, #23]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003112:	757b      	strb	r3, [r7, #21]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800311a:	753b      	strb	r3, [r7, #20]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	7d7b      	ldrb	r3, [r7, #21]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	75bb      	strb	r3, [r7, #22]
 8003130:	7dfa      	ldrb	r2, [r7, #23]
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	429a      	cmp	r2, r3
 8003136:	d201      	bcs.n	800313c <ucg_font_decode_len+0x4a>
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	75bb      	strb	r3, [r7, #22]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	889b      	ldrh	r3, [r3, #4]
 8003140:	81bb      	strh	r3, [r7, #12]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	88db      	ldrh	r3, [r3, #6]
 8003146:	817b      	strh	r3, [r7, #10]
 8003148:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800314c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	7b9b      	ldrb	r3, [r3, #14]
 8003154:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003158:	f7ff ff8e 	bl	8003078 <ucg_add_vector_x>
 800315c:	4603      	mov	r3, r0
 800315e:	81bb      	strh	r3, [r7, #12]
 8003160:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003164:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	7b9b      	ldrb	r3, [r3, #14]
 800316c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003170:	f7ff ff45 	bl	8002ffe <ucg_add_vector_y>
 8003174:	4603      	mov	r3, r0
 8003176:	817b      	strh	r3, [r7, #10]
 8003178:	78bb      	ldrb	r3, [r7, #2]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <ucg_font_decode_len+0xb0>
 800317e:	7dbb      	ldrb	r3, [r7, #22]
 8003180:	b21c      	sxth	r4, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	7b9b      	ldrb	r3, [r3, #14]
 8003186:	b21b      	sxth	r3, r3
 8003188:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800318c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	9201      	str	r2, [sp, #4]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	4623      	mov	r3, r4
 8003198:	4602      	mov	r2, r0
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fbc0 	bl	8003920 <ucg_Draw90Line>
 80031a0:	e014      	b.n	80031cc <ucg_font_decode_len+0xda>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	7b5b      	ldrb	r3, [r3, #13]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d110      	bne.n	80031cc <ucg_font_decode_len+0xda>
 80031aa:	7dbb      	ldrb	r3, [r7, #22]
 80031ac:	b21c      	sxth	r4, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	7b9b      	ldrb	r3, [r3, #14]
 80031b2:	b21b      	sxth	r3, r3
 80031b4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80031b8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	9201      	str	r2, [sp, #4]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	4623      	mov	r3, r4
 80031c4:	4602      	mov	r2, r0
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fbaa 	bl	8003920 <ucg_Draw90Line>
 80031cc:	7dfa      	ldrb	r2, [r7, #23]
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d309      	bcc.n	80031e8 <ucg_font_decode_len+0xf6>
 80031d4:	7dfa      	ldrb	r2, [r7, #23]
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	75fb      	strb	r3, [r7, #23]
 80031dc:	2300      	movs	r3, #0
 80031de:	757b      	strb	r3, [r7, #21]
 80031e0:	7d3b      	ldrb	r3, [r7, #20]
 80031e2:	3301      	adds	r3, #1
 80031e4:	753b      	strb	r3, [r7, #20]
 80031e6:	e799      	b.n	800311c <ucg_font_decode_len+0x2a>
 80031e8:	bf00      	nop
 80031ea:	7d7a      	ldrb	r2, [r7, #21]
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
 80031ee:	4413      	add	r3, r2
 80031f0:	757b      	strb	r3, [r7, #21]
 80031f2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	721a      	strb	r2, [r3, #8]
 80031fa:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	725a      	strb	r2, [r3, #9]
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd90      	pop	{r4, r7, pc}

0800320a <ucg_font_setup_decode>:
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3380      	adds	r3, #128	; 0x80
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	731a      	strb	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003240:	4619      	mov	r1, r3
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff fe6d 	bl	8002f22 <ucg_font_decode_get_unsigned_bits>
 8003248:	4603      	mov	r3, r0
 800324a:	b25a      	sxtb	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	729a      	strb	r2, [r3, #10]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003256:	4619      	mov	r1, r3
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff fe62 	bl	8002f22 <ucg_font_decode_get_unsigned_bits>
 800325e:	4603      	mov	r3, r0
 8003260:	b25a      	sxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	72da      	strb	r2, [r3, #11]
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <ucg_font_decode_glyph>:
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
 8003278:	6839      	ldr	r1, [r7, #0]
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffc5 	bl	800320a <ucg_font_setup_decode>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f7ff fe8e 	bl	8002fb8 <ucg_font_decode_get_signed_bits>
 800329c:	4603      	mov	r3, r0
 800329e:	73bb      	strb	r3, [r7, #14]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f7ff fe82 	bl	8002fb8 <ucg_font_decode_get_signed_bits>
 80032b4:	4603      	mov	r3, r0
 80032b6:	737b      	strb	r3, [r7, #13]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f7ff fe76 	bl	8002fb8 <ucg_font_decode_get_signed_bits>
 80032cc:	4603      	mov	r3, r0
 80032ce:	733b      	strb	r3, [r7, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	dd69      	ble.n	80033ae <ucg_font_decode_glyph+0x140>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	7b7b      	ldrb	r3, [r7, #13]
 80032e4:	4413      	add	r3, r2
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	425b      	negs	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	b25a      	sxtb	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80032f4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80032f8:	f7ff febe 	bl	8003078 <ucg_add_vector_x>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	7b7b      	ldrb	r3, [r7, #13]
 8003310:	4413      	add	r3, r2
 8003312:	b2db      	uxtb	r3, r3
 8003314:	425b      	negs	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	b25a      	sxtb	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003320:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003324:	f7ff fe6b 	bl	8002ffe <ucg_add_vector_y>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7ff fde6 	bl	8002f22 <ucg_font_decode_get_unsigned_bits>
 8003356:	4603      	mov	r3, r0
 8003358:	72fb      	strb	r3, [r7, #11]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7ff fdda 	bl	8002f22 <ucg_font_decode_get_unsigned_bits>
 800336e:	4603      	mov	r3, r0
 8003370:	72bb      	strb	r3, [r7, #10]
 8003372:	7afb      	ldrb	r3, [r7, #11]
 8003374:	2200      	movs	r2, #0
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff feba 	bl	80030f2 <ucg_font_decode_len>
 800337e:	7abb      	ldrb	r3, [r7, #10]
 8003380:	2201      	movs	r2, #1
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff feb4 	bl	80030f2 <ucg_font_decode_len>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3380      	adds	r3, #128	; 0x80
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fdc6 	bl	8002f22 <ucg_font_decode_get_unsigned_bits>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ea      	bne.n	8003372 <ucg_font_decode_glyph+0x104>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 80033a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	dd00      	ble.n	80033ac <ucg_font_decode_glyph+0x13e>
 80033aa:	e7ca      	b.n	8003342 <ucg_font_decode_glyph+0xd4>
 80033ac:	bf00      	nop
 80033ae:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <ucg_font_get_glyph_data>:
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	70fb      	strb	r3, [r7, #3]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3315      	adds	r3, #21
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	2b60      	cmp	r3, #96	; 0x60
 80033d6:	d907      	bls.n	80033e8 <ucg_font_get_glyph_data+0x2e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e009      	b.n	80033fc <ucg_font_get_glyph_data+0x42>
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d906      	bls.n	80033fc <ucg_font_get_glyph_data+0x42>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3301      	adds	r3, #1
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <ucg_font_get_glyph_data+0x6a>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	429a      	cmp	r2, r3
 800340e:	d101      	bne.n	8003414 <ucg_font_get_glyph_data+0x5a>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	e009      	b.n	8003428 <ucg_font_get_glyph_data+0x6e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3301      	adds	r3, #1
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e7eb      	b.n	80033fc <ucg_font_get_glyph_data+0x42>
 8003424:	bf00      	nop
 8003426:	2300      	movs	r3, #0
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <ucg_font_draw_glyph>:
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4603      	mov	r3, r0
 8003444:	817b      	strh	r3, [r7, #10]
 8003446:	460b      	mov	r3, r1
 8003448:	813b      	strh	r3, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	71fb      	strb	r3, [r7, #7]
 800344e:	2300      	movs	r3, #0
 8003450:	82fb      	strh	r3, [r7, #22]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	897a      	ldrh	r2, [r7, #10]
 8003456:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	893a      	ldrh	r2, [r7, #8]
 800345e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	79fa      	ldrb	r2, [r7, #7]
 8003466:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800346a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800346e:	4619      	mov	r1, r3
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff ffa2 	bl	80033ba <ucg_font_get_glyph_data>
 8003476:	6138      	str	r0, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <ucg_font_draw_glyph+0x56>
 800347e:	6939      	ldr	r1, [r7, #16]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fef4 	bl	800326e <ucg_font_decode_glyph>
 8003486:	4603      	mov	r3, r0
 8003488:	82fb      	strh	r3, [r7, #22]
 800348a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <ucg_SetFontMode>:
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <ucg_DrawGlyph>:
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	71fb      	strb	r3, [r7, #7]
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d837      	bhi.n	8003548 <ucg_DrawGlyph+0x90>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <ucg_DrawGlyph+0x28>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003507 	.word	0x08003507
 80034e8:	0800351d 	.word	0x0800351d
 80034ec:	08003533 	.word	0x08003533
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	4798      	blx	r3
 80034f8:	4603      	mov	r3, r0
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	893b      	ldrh	r3, [r7, #8]
 80034fe:	4413      	add	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	813b      	strh	r3, [r7, #8]
 8003504:	e020      	b.n	8003548 <ucg_DrawGlyph+0x90>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	4798      	blx	r3
 800350e:	4603      	mov	r3, r0
 8003510:	897a      	ldrh	r2, [r7, #10]
 8003512:	b29b      	uxth	r3, r3
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	b29b      	uxth	r3, r3
 8003518:	817b      	strh	r3, [r7, #10]
 800351a:	e015      	b.n	8003548 <ucg_DrawGlyph+0x90>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	4798      	blx	r3
 8003524:	4603      	mov	r3, r0
 8003526:	893a      	ldrh	r2, [r7, #8]
 8003528:	b29b      	uxth	r3, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	b29b      	uxth	r3, r3
 800352e:	813b      	strh	r3, [r7, #8]
 8003530:	e00a      	b.n	8003548 <ucg_DrawGlyph+0x90>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	4798      	blx	r3
 800353a:	4603      	mov	r3, r0
 800353c:	b29a      	uxth	r2, r3
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	4413      	add	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	817b      	strh	r3, [r7, #10]
 8003546:	bf00      	nop
 8003548:	79f8      	ldrb	r0, [r7, #7]
 800354a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800354e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003552:	7e3b      	ldrb	r3, [r7, #24]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	4603      	mov	r3, r0
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff ff6b 	bl	8003434 <ucg_font_draw_glyph>
 800355e:	4603      	mov	r3, r0
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <task_drawString>:
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af02      	add	r7, sp, #8
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	2300      	movs	r3, #0
 8003572:	81fb      	strh	r3, [r7, #14]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	4b45      	ldr	r3, [pc, #276]	; (8003690 <task_drawString+0x128>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <task_drawString+0x1e>
 8003580:	2b01      	cmp	r3, #1
 8003582:	d01e      	beq.n	80035c2 <task_drawString+0x5a>
 8003584:	e07b      	b.n	800367e <task_drawString+0x116>
 8003586:	4843      	ldr	r0, [pc, #268]	; (8003694 <task_drawString+0x12c>)
 8003588:	f7fc fe95 	bl	80002b6 <bufNumItems>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <task_drawString+0x3a>
 8003592:	4941      	ldr	r1, [pc, #260]	; (8003698 <task_drawString+0x130>)
 8003594:	483f      	ldr	r0, [pc, #252]	; (8003694 <task_drawString+0x12c>)
 8003596:	f7fc ff29 	bl	80003ec <bufDeDat>
 800359a:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <task_drawString+0x128>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e071      	b.n	8003686 <task_drawString+0x11e>
 80035a2:	4b3e      	ldr	r3, [pc, #248]	; (800369c <task_drawString+0x134>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2bff      	cmp	r3, #255	; 0xff
 80035a8:	d007      	beq.n	80035ba <task_drawString+0x52>
 80035aa:	4b3c      	ldr	r3, [pc, #240]	; (800369c <task_drawString+0x134>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fcb0 	bl	8001f14 <TimerStop>
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <task_drawString+0x134>)
 80035b6:	22ff      	movs	r2, #255	; 0xff
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	4b35      	ldr	r3, [pc, #212]	; (8003690 <task_drawString+0x128>)
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	e061      	b.n	8003686 <task_drawString+0x11e>
 80035c2:	4b35      	ldr	r3, [pc, #212]	; (8003698 <task_drawString+0x130>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d054      	beq.n	8003676 <task_drawString+0x10e>
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <task_drawString+0x130>)
 80035ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <task_drawString+0x130>)
 80035d4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80035d8:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <task_drawString+0x130>)
 80035da:	7918      	ldrb	r0, [r3, #4]
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <task_drawString+0x130>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	68b8      	ldr	r0, [r7, #8]
 80035e8:	f7ff ff66 	bl	80034b8 <ucg_DrawGlyph>
 80035ec:	4603      	mov	r3, r0
 80035ee:	81fb      	strh	r3, [r7, #14]
 80035f0:	4b29      	ldr	r3, [pc, #164]	; (8003698 <task_drawString+0x130>)
 80035f2:	791b      	ldrb	r3, [r3, #4]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d837      	bhi.n	8003668 <task_drawString+0x100>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <task_drawString+0x98>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003627 	.word	0x08003627
 8003608:	0800363d 	.word	0x0800363d
 800360c:	08003653 	.word	0x08003653
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <task_drawString+0x130>)
 8003612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003616:	b29a      	uxth	r2, r3
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	4413      	add	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	b21a      	sxth	r2, r3
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <task_drawString+0x130>)
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	e021      	b.n	800366a <task_drawString+0x102>
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <task_drawString+0x130>)
 8003628:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800362c:	b29a      	uxth	r2, r3
 800362e:	89fb      	ldrh	r3, [r7, #14]
 8003630:	4413      	add	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	b21a      	sxth	r2, r3
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <task_drawString+0x130>)
 8003638:	805a      	strh	r2, [r3, #2]
 800363a:	e016      	b.n	800366a <task_drawString+0x102>
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <task_drawString+0x130>)
 800363e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003642:	b29a      	uxth	r2, r3
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	b29b      	uxth	r3, r3
 800364a:	b21a      	sxth	r2, r3
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <task_drawString+0x130>)
 800364e:	801a      	strh	r2, [r3, #0]
 8003650:	e00b      	b.n	800366a <task_drawString+0x102>
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <task_drawString+0x130>)
 8003654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003658:	b29a      	uxth	r2, r3
 800365a:	89fb      	ldrh	r3, [r7, #14]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	b29b      	uxth	r3, r3
 8003660:	b21a      	sxth	r2, r3
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <task_drawString+0x130>)
 8003664:	805a      	strh	r2, [r3, #2]
 8003666:	e000      	b.n	800366a <task_drawString+0x102>
 8003668:	bf00      	nop
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <task_drawString+0x130>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	3301      	adds	r3, #1
 8003670:	4a09      	ldr	r2, [pc, #36]	; (8003698 <task_drawString+0x130>)
 8003672:	6093      	str	r3, [r2, #8]
 8003674:	e007      	b.n	8003686 <task_drawString+0x11e>
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <task_drawString+0x128>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e003      	b.n	8003686 <task_drawString+0x11e>
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <task_drawString+0x128>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20001378 	.word	0x20001378
 8003694:	20000368 	.word	0x20000368
 8003698:	200014c4 	.word	0x200014c4
 800369c:	20000024 	.word	0x20000024

080036a0 <ucg_DrawString>:
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	460b      	mov	r3, r1
 80036b4:	813b      	strh	r3, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71fb      	strb	r3, [r7, #7]
 80036ba:	2300      	movs	r3, #0
 80036bc:	83fb      	strh	r3, [r7, #30]
 80036be:	897b      	ldrh	r3, [r7, #10]
 80036c0:	823b      	strh	r3, [r7, #16]
 80036c2:	893b      	ldrh	r3, [r7, #8]
 80036c4:	827b      	strh	r3, [r7, #18]
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	753b      	strb	r3, [r7, #20]
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	f107 0310 	add.w	r3, r7, #16
 80036d2:	4619      	mov	r1, r3
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <ucg_DrawString+0x68>)
 80036d6:	f7fc fe39 	bl	800034c <bufEnDat>
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <ucg_DrawString+0x6c>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2bff      	cmp	r3, #255	; 0xff
 80036e0:	d10b      	bne.n	80036fa <ucg_DrawString+0x5a>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <ucg_DrawString+0x70>)
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	211e      	movs	r1, #30
 80036ec:	4809      	ldr	r0, [pc, #36]	; (8003714 <ucg_DrawString+0x74>)
 80036ee:	f7fe fbaf 	bl	8001e50 <TimerStart>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <ucg_DrawString+0x6c>)
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000368 	.word	0x20000368
 800370c:	20000024 	.word	0x20000024
 8003710:	08003569 	.word	0x08003569
 8003714:	080050d4 	.word	0x080050d4

08003718 <ucg_UpdateRefHeight>:
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05d      	beq.n	80037e4 <ucg_UpdateRefHeight+0xcc>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003746:	2b00      	cmp	r3, #0
 8003748:	d04d      	beq.n	80037e6 <ucg_UpdateRefHeight+0xce>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003750:	2b01      	cmp	r3, #1
 8003752:	d11c      	bne.n	800378e <ucg_UpdateRefHeight+0x76>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8003760:	429a      	cmp	r2, r3
 8003762:	da05      	bge.n	8003770 <ucg_UpdateRefHeight+0x58>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 800377c:	429a      	cmp	r2, r3
 800377e:	dd32      	ble.n	80037e6 <ucg_UpdateRefHeight+0xce>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800378c:	e02b      	b.n	80037e6 <ucg_UpdateRefHeight+0xce>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 800379c:	4619      	mov	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80037a4:	440b      	add	r3, r1
 80037a6:	429a      	cmp	r2, r3
 80037a8:	da0d      	bge.n	80037c6 <ucg_UpdateRefHeight+0xae>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	b25a      	sxtb	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80037d2:	429a      	cmp	r2, r3
 80037d4:	dd07      	ble.n	80037e6 <ucg_UpdateRefHeight+0xce>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80037e2:	e000      	b.n	80037e6 <ucg_UpdateRefHeight+0xce>
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <ucg_font_calc_vref_font>:
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	2300      	movs	r3, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <ucg_SetFontPosBaseline>:
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a04      	ldr	r2, [pc, #16]	; (8003824 <ucg_SetFontPosBaseline+0x1c>)
 8003814:	67da      	str	r2, [r3, #124]	; 0x7c
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	080037f1 	.word	0x080037f1

08003828 <ucg_SetFont>:
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d012      	beq.n	8003862 <ucg_SetFont+0x3a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	679a      	str	r2, [r3, #120]	; 0x78
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3390      	adds	r3, #144	; 0x90
 8003846:	6839      	ldr	r1, [r7, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fac9 	bl	8002de0 <ucg_read_font_info>
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff62 	bl	8003718 <ucg_UpdateRefHeight>
 8003854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003858:	220c      	movs	r2, #12
 800385a:	4904      	ldr	r1, [pc, #16]	; (800386c <ucg_SetFont+0x44>)
 800385c:	4804      	ldr	r0, [pc, #16]	; (8003870 <ucg_SetFont+0x48>)
 800385e:	f7fc fd0f 	bl	8000280 <bufInit>
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000368 	.word	0x20000368
 8003870:	20000378 	.word	0x20000378

08003874 <ucg_init_struct>:
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	7813      	ldrb	r3, [r2, #0]
 8003880:	f36f 0300 	bfc	r3, #0, #1
 8003884:	7013      	strb	r3, [r2, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	865a      	strh	r2, [r3, #50]	; 0x32
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	679a      	str	r2, [r3, #120]	; 0x78
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <ucg_Init>:
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff ffce 	bl	8003874 <ucg_init_struct>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <ucg_Init+0x22>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <ucg_Init+0x58>)
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	e002      	b.n	80038ec <ucg_Init+0x28>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	61da      	str	r2, [r3, #28]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff ff85 	bl	8003808 <ucg_SetFontPosBaseline>
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff f996 	bl	8002c30 <ucg_PowerUp>
 8003904:	4603      	mov	r3, r0
 8003906:	82fb      	strh	r3, [r7, #22]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff f9d6 	bl	8002cba <ucg_GetDimension>
 800390e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	08002895 	.word	0x08002895

08003920 <ucg_Draw90Line>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	4608      	mov	r0, r1
 800392a:	4611      	mov	r1, r2
 800392c:	461a      	mov	r2, r3
 800392e:	4603      	mov	r3, r0
 8003930:	817b      	strh	r3, [r7, #10]
 8003932:	460b      	mov	r3, r1
 8003934:	813b      	strh	r3, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
 800393a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	440b      	add	r3, r1
 8003948:	333a      	adds	r3, #58	; 0x3a
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003952:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	440b      	add	r3, r1
 8003960:	333b      	adds	r3, #59	; 0x3b
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800396a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	440b      	add	r3, r1
 8003978:	333c      	adds	r3, #60	; 0x3c
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	897a      	ldrh	r2, [r7, #10]
 8003986:	849a      	strh	r2, [r3, #36]	; 0x24
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	893a      	ldrh	r2, [r7, #8]
 800398c:	84da      	strh	r2, [r3, #38]	; 0x26
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8b3a      	ldrh	r2, [r7, #24]
 8003998:	85da      	strh	r2, [r3, #46]	; 0x2e
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff f99f 	bl	8002cde <ucg_DrawL90FXWithArg>
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <ucg_DrawHLine>:
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	461a      	mov	r2, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	817b      	strh	r3, [r7, #10]
 80039ba:	460b      	mov	r3, r1
 80039bc:	813b      	strh	r3, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
 80039c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80039ca:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80039ce:	2300      	movs	r3, #0
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	4603      	mov	r3, r0
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff ffa1 	bl	8003920 <ucg_Draw90Line>
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <ucg_SetColor>:
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	4608      	mov	r0, r1
 80039f0:	4611      	mov	r1, r2
 80039f2:	461a      	mov	r2, r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	70fb      	strb	r3, [r7, #3]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70bb      	strb	r3, [r7, #2]
 80039fc:	4613      	mov	r3, r2
 80039fe:	707b      	strb	r3, [r7, #1]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	333a      	adds	r3, #58	; 0x3a
 8003a0e:	78ba      	ldrb	r2, [r7, #2]
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	333b      	adds	r3, #59	; 0x3b
 8003a20:	787a      	ldrb	r2, [r7, #1]
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	440b      	add	r3, r1
 8003a30:	333c      	adds	r3, #60	; 0x3c
 8003a32:	7c3a      	ldrb	r2, [r7, #16]
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <ucg_UndoRotate>:
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <ucg_UndoRotate+0x1e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff f92a 	bl	8002cba <ucg_GetDimension>
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff f90f 	bl	8002c8a <ucg_SetMaxClipRange>
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <ucg_rotate_180_xy>:
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8adb      	ldrh	r3, [r3, #22]
 8003a82:	81fb      	strh	r3, [r7, #14]
 8003a84:	89fa      	ldrh	r2, [r7, #14]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	81fb      	strh	r3, [r7, #14]
 8003a94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	81fb      	strh	r3, [r7, #14]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	89fa      	ldrh	r2, [r7, #14]
 8003aa4:	805a      	strh	r2, [r3, #2]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8a9b      	ldrh	r3, [r3, #20]
 8003aaa:	81bb      	strh	r3, [r7, #12]
 8003aac:	89ba      	ldrh	r2, [r7, #12]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	81bb      	strh	r3, [r7, #12]
 8003abc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	81bb      	strh	r3, [r7, #12]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	89ba      	ldrh	r2, [r7, #12]
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <ucg_dev_rotate180>:
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	817b      	strh	r3, [r7, #10]
 8003aea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003aee:	3b0c      	subs	r3, #12
 8003af0:	2b0b      	cmp	r3, #11
 8003af2:	d866      	bhi.n	8003bc2 <ucg_dev_rotate180+0xe6>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <ucg_dev_rotate180+0x20>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b4b 	.word	0x08003b4b
 8003b00:	08003bc3 	.word	0x08003bc3
 8003b04:	08003bc3 	.word	0x08003bc3
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003bc3 	.word	0x08003bc3
 8003b10:	08003bc3 	.word	0x08003bc3
 8003b14:	08003bc3 	.word	0x08003bc3
 8003b18:	08003bc3 	.word	0x08003bc3
 8003b1c:	08003b93 	.word	0x08003b93
 8003b20:	08003b93 	.word	0x08003b93
 8003b24:	08003bc3 	.word	0x08003bc3
 8003b28:	08003b93 	.word	0x08003b93
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	3214      	adds	r2, #20
 8003b34:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	4798      	blx	r3
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3314      	adds	r3, #20
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	6010      	str	r0, [r2, #0]
 8003b46:	2301      	movs	r3, #1
 8003b48:	e043      	b.n	8003bd2 <ucg_dev_rotate180+0xf6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	b21a      	sxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	805a      	strh	r2, [r3, #2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	b21a      	sxth	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff ff72 	bl	8003a74 <ucg_rotate_180_xy>
 8003b90:	e017      	b.n	8003bc2 <ucg_dev_rotate180+0xe6>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b21a      	sxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	b21a      	sxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3324      	adds	r3, #36	; 0x24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7ff ff5a 	bl	8003a74 <ucg_rotate_180_xy>
 8003bc0:	bf00      	nop
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	4798      	blx	r3
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop

08003bdc <ucg_SetRotate180>:
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff2c 	bl	8003a42 <ucg_UndoRotate>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	611a      	str	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <ucg_SetRotate180+0x30>)
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff f85e 	bl	8002cba <ucg_GetDimension>
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff f843 	bl	8002c8a <ucg_SetMaxClipRange>
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	08003add 	.word	0x08003add

08003c10 <USART_ReceiveData>:
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	889b      	ldrh	r3, [r3, #4]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <USART_GetITStatus>:
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	74fb      	strb	r3, [r7, #19]
 8003c4c:	887b      	ldrh	r3, [r7, #2]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	887b      	ldrh	r3, [r7, #2]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d107      	bne.n	8003c7e <USART_GetITStatus+0x4e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	899b      	ldrh	r3, [r3, #12]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e011      	b.n	8003ca2 <USART_GetITStatus+0x72>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d107      	bne.n	8003c94 <USART_GetITStatus+0x64>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8a1b      	ldrh	r3, [r3, #16]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e006      	b.n	8003ca2 <USART_GetITStatus+0x72>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8a9b      	ldrh	r3, [r3, #20]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <USART_GetITStatus+0xa4>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <USART_GetITStatus+0xa4>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	74fb      	strb	r3, [r7, #19]
 8003cd2:	e001      	b.n	8003cd8 <USART_GetITStatus+0xa8>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	74fb      	strb	r3, [r7, #19]
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <USART_ClearITPendingBit>:
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	807b      	strh	r3, [r7, #2]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	81fb      	strh	r3, [r7, #14]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	81bb      	strh	r3, [r7, #12]
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	81fb      	strh	r3, [r7, #14]
 8003d00:	89fb      	ldrh	r3, [r7, #14]
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	81bb      	strh	r3, [r7, #12]
 8003d0a:	89bb      	ldrh	r3, [r7, #12]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <ucg_clip_is_x_visible>:
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d2c:	81fb      	strh	r3, [r7, #14]
 8003d2e:	89fa      	ldrh	r2, [r7, #14]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	81fb      	strh	r3, [r7, #14]
 8003d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	da01      	bge.n	8003d4a <ucg_clip_is_x_visible+0x2a>
 8003d46:	2300      	movs	r3, #0
 8003d48:	e009      	b.n	8003d5e <ucg_clip_is_x_visible+0x3e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8003d50:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	db01      	blt.n	8003d5c <ucg_clip_is_x_visible+0x3c>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <ucg_clip_is_x_visible+0x3e>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <ucg_clip_is_y_visible>:
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d76:	81fb      	strh	r3, [r7, #14]
 8003d78:	89fa      	ldrh	r2, [r7, #14]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	81fb      	strh	r3, [r7, #14]
 8003d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	da01      	bge.n	8003d94 <ucg_clip_is_y_visible+0x2a>
 8003d90:	2300      	movs	r3, #0
 8003d92:	e009      	b.n	8003da8 <ucg_clip_is_y_visible+0x3e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8003d9a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	db01      	blt.n	8003da6 <ucg_clip_is_y_visible+0x3c>
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <ucg_clip_is_y_visible+0x3e>
 8003da6:	2301      	movs	r3, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <ucg_clip_intersection>:
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	80fb      	strh	r3, [r7, #6]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80bb      	strh	r3, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	82fb      	strh	r3, [r7, #22]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	82bb      	strh	r3, [r7, #20]
 8003dd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003dda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	db01      	blt.n	8003de6 <ucg_clip_intersection+0x32>
 8003de2:	2300      	movs	r3, #0
 8003de4:	e01a      	b.n	8003e1c <ucg_clip_intersection+0x68>
 8003de6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	dc01      	bgt.n	8003df6 <ucg_clip_intersection+0x42>
 8003df2:	2300      	movs	r3, #0
 8003df4:	e012      	b.n	8003e1c <ucg_clip_intersection+0x68>
 8003df6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	da02      	bge.n	8003e08 <ucg_clip_intersection+0x54>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	801a      	strh	r2, [r3, #0]
 8003e08:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003e0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	dd02      	ble.n	8003e1a <ucg_clip_intersection+0x66>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	88ba      	ldrh	r2, [r7, #4]
 8003e18:	801a      	strh	r2, [r3, #0]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <ucg_clip_is_pixel_visible>:
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff75 	bl	8003d20 <ucg_clip_is_x_visible>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <ucg_clip_is_pixel_visible+0x18>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e008      	b.n	8003e52 <ucg_clip_is_pixel_visible+0x2a>
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff92 	bl	8003d6a <ucg_clip_is_y_visible>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <ucg_clip_is_pixel_visible+0x28>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <ucg_clip_is_pixel_visible+0x2a>
 8003e50:	2301      	movs	r3, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <ucg_clip_l90fx>:
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	861a      	strh	r2, [r3, #48]	; 0x30
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	f200 816d 	bhi.w	8004150 <ucg_clip_l90fx+0x2f4>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <ucg_clip_l90fx+0x20>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003f33 	.word	0x08003f33
 8003e84:	08003fd9 	.word	0x08003fd9
 8003e88:	08004095 	.word	0x08004095
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff6c 	bl	8003d6a <ucg_clip_is_y_visible>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <ucg_clip_l90fx+0x40>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e15a      	b.n	8004152 <ucg_clip_l90fx+0x2f6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003ea2:	81fb      	strh	r3, [r7, #14]
 8003ea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ea8:	81bb      	strh	r3, [r7, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	81bb      	strh	r3, [r7, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b21b      	sxth	r3, r3
 8003edc:	f107 010c 	add.w	r1, r7, #12
 8003ee0:	f107 000e 	add.w	r0, r7, #14
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	f7ff ff65 	bl	8003db4 <ucg_clip_intersection>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <ucg_clip_l90fx+0x98>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e12e      	b.n	8004152 <ucg_clip_l90fx+0x2f6>
 8003ef4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	b21a      	sxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	861a      	strh	r2, [r3, #48]	; 0x30
 8003f0c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	849a      	strh	r2, [r3, #36]	; 0x24
 8003f14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	b21b      	sxth	r3, r3
 8003f26:	81bb      	strh	r3, [r7, #12]
 8003f28:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003f30:	e10e      	b.n	8004150 <ucg_clip_l90fx+0x2f4>
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fef4 	bl	8003d20 <ucg_clip_is_x_visible>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <ucg_clip_l90fx+0xe6>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e107      	b.n	8004152 <ucg_clip_l90fx+0x2f6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003f48:	81fb      	strh	r3, [r7, #14]
 8003f4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f4e:	81bb      	strh	r3, [r7, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b21b      	sxth	r3, r3
 8003f64:	81bb      	strh	r3, [r7, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	b21b      	sxth	r3, r3
 8003f82:	f107 010c 	add.w	r1, r7, #12
 8003f86:	f107 000e 	add.w	r0, r7, #14
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	f7ff ff12 	bl	8003db4 <ucg_clip_intersection>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <ucg_clip_l90fx+0x13e>
 8003f96:	2300      	movs	r3, #0
 8003f98:	e0db      	b.n	8004152 <ucg_clip_l90fx+0x2f6>
 8003f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	b21a      	sxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	861a      	strh	r2, [r3, #48]	; 0x30
 8003fb2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	84da      	strh	r2, [r3, #38]	; 0x26
 8003fba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	b21b      	sxth	r3, r3
 8003fcc:	81bb      	strh	r3, [r7, #12]
 8003fce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003fd6:	e0bb      	b.n	8004150 <ucg_clip_l90fx+0x2f4>
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fec6 	bl	8003d6a <ucg_clip_is_y_visible>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <ucg_clip_l90fx+0x18c>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e0b4      	b.n	8004152 <ucg_clip_l90fx+0x2f6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003fee:	81bb      	strh	r3, [r7, #12]
 8003ff0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	81bb      	strh	r3, [r7, #12]
 8003ffe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004002:	81fb      	strh	r3, [r7, #14]
 8004004:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004010:	b29b      	uxth	r3, r3
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	b29b      	uxth	r3, r3
 8004016:	b21b      	sxth	r3, r3
 8004018:	81fb      	strh	r3, [r7, #14]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800402e:	b29b      	uxth	r3, r3
 8004030:	4413      	add	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	b21b      	sxth	r3, r3
 8004036:	f107 010c 	add.w	r1, r7, #12
 800403a:	f107 000e 	add.w	r0, r7, #14
 800403e:	4622      	mov	r2, r4
 8004040:	f7ff feb8 	bl	8003db4 <ucg_clip_intersection>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <ucg_clip_l90fx+0x1f2>
 800404a:	2300      	movs	r3, #0
 800404c:	e081      	b.n	8004152 <ucg_clip_l90fx+0x2f6>
 800404e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004052:	b29a      	uxth	r2, r3
 8004054:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004058:	b29b      	uxth	r3, r3
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	b29b      	uxth	r3, r3
 800405e:	b21a      	sxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004064:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	b21b      	sxth	r3, r3
 8004070:	81bb      	strh	r3, [r7, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004078:	b29a      	uxth	r2, r3
 800407a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800407e:	b29b      	uxth	r3, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	b21a      	sxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	861a      	strh	r2, [r3, #48]	; 0x30
 800408a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	849a      	strh	r2, [r3, #36]	; 0x24
 8004092:	e05d      	b.n	8004150 <ucg_clip_l90fx+0x2f4>
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fe43 	bl	8003d20 <ucg_clip_is_x_visible>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <ucg_clip_l90fx+0x248>
 80040a0:	2300      	movs	r3, #0
 80040a2:	e056      	b.n	8004152 <ucg_clip_l90fx+0x2f6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80040aa:	81bb      	strh	r3, [r7, #12]
 80040ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3301      	adds	r3, #1
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	b21b      	sxth	r3, r3
 80040b8:	81bb      	strh	r3, [r7, #12]
 80040ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040be:	81fb      	strh	r3, [r7, #14]
 80040c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	b21b      	sxth	r3, r3
 80040d4:	81fb      	strh	r3, [r7, #14]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	b21b      	sxth	r3, r3
 80040f2:	f107 010c 	add.w	r1, r7, #12
 80040f6:	f107 000e 	add.w	r0, r7, #14
 80040fa:	4622      	mov	r2, r4
 80040fc:	f7ff fe5a 	bl	8003db4 <ucg_clip_intersection>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <ucg_clip_l90fx+0x2ae>
 8004106:	2300      	movs	r3, #0
 8004108:	e023      	b.n	8004152 <ucg_clip_l90fx+0x2f6>
 800410a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800410e:	b29a      	uxth	r2, r3
 8004110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004114:	b29b      	uxth	r3, r3
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	b29b      	uxth	r3, r3
 800411a:	b21a      	sxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004120:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29b      	uxth	r3, r3
 800412a:	b21b      	sxth	r3, r3
 800412c:	81bb      	strh	r3, [r7, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004134:	b29a      	uxth	r2, r3
 8004136:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800413a:	b29b      	uxth	r3, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	b21a      	sxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	861a      	strh	r2, [r3, #48]	; 0x30
 8004146:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	84da      	strh	r2, [r3, #38]	; 0x26
 800414e:	bf00      	nop
 8004150:	2301      	movs	r3, #1
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}
 800415a:	bf00      	nop

0800415c <ucg_clip_l90se>:
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fe79 	bl	8003e5c <ucg_clip_l90fx>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <ucg_clip_l90se+0x18>
 8004170:	2300      	movs	r3, #0
 8004172:	e019      	b.n	80041a8 <ucg_clip_l90se+0x4c>
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e012      	b.n	80041a0 <ucg_clip_l90se+0x44>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	18ca      	adds	r2, r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f7fe faf6 	bl	8002786 <ucg_ccs_seek>
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	3301      	adds	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d9e9      	bls.n	800417a <ucg_clip_l90se+0x1e>
 80041a6:	2301      	movs	r3, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <ucg_com_PowerDown>:
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d006      	beq.n	80041d4 <ucg_com_PowerDown+0x24>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69dc      	ldr	r4, [r3, #28]
 80041ca:	2300      	movs	r3, #0
 80041cc:	2200      	movs	r2, #0
 80041ce:	210b      	movs	r1, #11
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	47a0      	blx	r4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80041da:	f023 0308 	bic.w	r3, r3, #8
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd90      	pop	{r4, r7, pc}

080041ee <ucg_com_PowerUp>:
 80041ee:	b590      	push	{r4, r7, lr}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	807b      	strh	r3, [r7, #2]
 80041fa:	4613      	mov	r3, r2
 80041fc:	803b      	strh	r3, [r7, #0]
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	813b      	strh	r3, [r7, #8]
 8004202:	883b      	ldrh	r3, [r7, #0]
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff ffd2 	bl	80041b0 <ucg_com_PowerDown>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69dc      	ldr	r4, [r3, #28]
 8004218:	f107 0308 	add.w	r3, r7, #8
 800421c:	2200      	movs	r2, #0
 800421e:	210a      	movs	r1, #10
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	47a0      	blx	r4
 8004224:	4603      	mov	r3, r0
 8004226:	81fb      	strh	r3, [r7, #14]
 8004228:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <ucg_com_PowerUp+0x54>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004236:	f043 0308 	orr.w	r3, r3, #8
 800423a:	b2da      	uxtb	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bd90      	pop	{r4, r7, pc}

0800424e <ucg_com_SetLineStatus>:
 800424e:	b590      	push	{r4, r7, lr}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	4608      	mov	r0, r1
 8004258:	4611      	mov	r1, r2
 800425a:	461a      	mov	r2, r3
 800425c:	4603      	mov	r3, r0
 800425e:	70fb      	strb	r3, [r7, #3]
 8004260:	460b      	mov	r3, r1
 8004262:	70bb      	strb	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d131      	bne.n	80042d2 <ucg_com_SetLineStatus+0x84>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004274:	78bb      	ldrb	r3, [r7, #2]
 8004276:	4013      	ands	r3, r2
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <ucg_com_SetLineStatus+0x42>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004284:	78bb      	ldrb	r3, [r7, #2]
 8004286:	4013      	ands	r3, r2
 8004288:	b2db      	uxtb	r3, r3
 800428a:	78ba      	ldrb	r2, [r7, #2]
 800428c:	429a      	cmp	r2, r3
 800428e:	d14b      	bne.n	8004328 <ucg_com_SetLineStatus+0xda>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69dc      	ldr	r4, [r3, #28]
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	b219      	sxth	r1, r3
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	b29a      	uxth	r2, r3
 800429c:	2300      	movs	r3, #0
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	47a0      	blx	r4
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80042a8:	b25a      	sxtb	r2, r3
 80042aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	b25b      	sxtb	r3, r3
 80042b2:	4013      	ands	r3, r2
 80042b4:	b25b      	sxtb	r3, r3
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80042c4:	78bb      	ldrb	r3, [r7, #2]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80042d0:	e02a      	b.n	8004328 <ucg_com_SetLineStatus+0xda>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80042d8:	78bb      	ldrb	r3, [r7, #2]
 80042da:	4013      	ands	r3, r2
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <ucg_com_SetLineStatus+0xa4>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80042e8:	78bb      	ldrb	r3, [r7, #2]
 80042ea:	4013      	ands	r3, r2
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11a      	bne.n	8004328 <ucg_com_SetLineStatus+0xda>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69dc      	ldr	r4, [r3, #28]
 80042f6:	787b      	ldrb	r3, [r7, #1]
 80042f8:	b219      	sxth	r1, r3
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	2300      	movs	r3, #0
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	47a0      	blx	r4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 800430a:	78bb      	ldrb	r3, [r7, #2]
 800430c:	4313      	orrs	r3, r2
 800430e:	b2da      	uxtb	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 800431c:	78bb      	ldrb	r3, [r7, #2]
 800431e:	4313      	orrs	r3, r2
 8004320:	b2da      	uxtb	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bd90      	pop	{r4, r7, pc}

08004330 <ucg_com_SetResetLineStatus>:
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
 800433c:	78f9      	ldrb	r1, [r7, #3]
 800433e:	230d      	movs	r3, #13
 8004340:	2204      	movs	r2, #4
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff83 	bl	800424e <ucg_com_SetLineStatus>
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <ucg_com_SetCSLineStatus>:
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
 800435c:	78f9      	ldrb	r1, [r7, #3]
 800435e:	230e      	movs	r3, #14
 8004360:	2202      	movs	r2, #2
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff ff73 	bl	800424e <ucg_com_SetLineStatus>
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <ucg_com_SetCDLineStatus>:
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
 800437c:	78f9      	ldrb	r1, [r7, #3]
 800437e:	230f      	movs	r3, #15
 8004380:	2201      	movs	r2, #1
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff63 	bl	800424e <ucg_com_SetLineStatus>
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <ucg_com_DelayMicroseconds>:
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69dc      	ldr	r4, [r3, #28]
 80043a0:	887a      	ldrh	r2, [r7, #2]
 80043a2:	2300      	movs	r3, #0
 80043a4:	210c      	movs	r1, #12
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	47a0      	blx	r4
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}

080043b2 <ucg_com_DelayMilliseconds>:
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	807b      	strh	r3, [r7, #2]
 80043be:	e007      	b.n	80043d0 <ucg_com_DelayMilliseconds+0x1e>
 80043c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ffe3 	bl	8004390 <ucg_com_DelayMicroseconds>
 80043ca:	887b      	ldrh	r3, [r7, #2]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	807b      	strh	r3, [r7, #2]
 80043d0:	887b      	ldrh	r3, [r7, #2]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f4      	bne.n	80043c0 <ucg_com_DelayMilliseconds+0xe>
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <ucg_com_SendByte>:
 80043de:	b590      	push	{r4, r7, lr}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69dc      	ldr	r4, [r3, #28]
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	2300      	movs	r3, #0
 80043f4:	2110      	movs	r1, #16
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	47a0      	blx	r4
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd90      	pop	{r4, r7, pc}

08004402 <ucg_com_SendStringP>:
 8004402:	b590      	push	{r4, r7, lr}
 8004404:	b087      	sub	sp, #28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	460b      	mov	r3, r1
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	817b      	strh	r3, [r7, #10]
 8004410:	e010      	b.n	8004434 <ucg_com_SendStringP+0x32>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	75fb      	strb	r3, [r7, #23]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	69dc      	ldr	r4, [r3, #28]
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	b29a      	uxth	r2, r3
 8004420:	2300      	movs	r3, #0
 8004422:	2110      	movs	r1, #16
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	47a0      	blx	r4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3301      	adds	r3, #1
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	897b      	ldrh	r3, [r7, #10]
 8004430:	3b01      	subs	r3, #1
 8004432:	817b      	strh	r3, [r7, #10]
 8004434:	897b      	ldrh	r3, [r7, #10]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1eb      	bne.n	8004412 <ucg_com_SendStringP+0x10>
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}

08004442 <ucg_com_SendCmdArg>:
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	4611      	mov	r1, r2
 800444e:	461a      	mov	r2, r3
 8004450:	460b      	mov	r3, r1
 8004452:	71fb      	strb	r3, [r7, #7]
 8004454:	4613      	mov	r3, r2
 8004456:	71bb      	strb	r3, [r7, #6]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	4619      	mov	r1, r3
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ff80 	bl	8004370 <ucg_com_SetCDLineStatus>
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	b29b      	uxth	r3, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	4619      	mov	r1, r3
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff ffc2 	bl	8004402 <ucg_com_SendStringP>
 800447e:	79bb      	ldrb	r3, [r7, #6]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d014      	beq.n	80044ae <ucg_com_SendCmdArg+0x6c>
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff68 	bl	8004370 <ucg_com_SetCDLineStatus>
 80044a0:	79bb      	ldrb	r3, [r7, #6]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	4619      	mov	r1, r3
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7ff ffaa 	bl	8004402 <ucg_com_SendStringP>
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <ucg_com_SendCmdSeq>:
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	73bb      	strb	r3, [r7, #14]
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	737b      	strb	r3, [r7, #13]
 80044d6:	7bbb      	ldrb	r3, [r7, #14]
 80044d8:	2b0f      	cmp	r3, #15
 80044da:	f200 8124 	bhi.w	8004726 <ucg_com_SendCmdSeq+0x26e>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <ucg_com_SendCmdSeq+0x2c>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	08004727 	.word	0x08004727
 80044e8:	08004525 	.word	0x08004525
 80044ec:	08004525 	.word	0x08004525
 80044f0:	08004525 	.word	0x08004525
 80044f4:	08004727 	.word	0x08004727
 80044f8:	08004727 	.word	0x08004727
 80044fc:	08004545 	.word	0x08004545
 8004500:	08004577 	.word	0x08004577
 8004504:	080045bb 	.word	0x080045bb
 8004508:	080045e7 	.word	0x080045e7
 800450c:	08004613 	.word	0x08004613
 8004510:	08004673 	.word	0x08004673
 8004514:	08004727 	.word	0x08004727
 8004518:	08004727 	.word	0x08004727
 800451c:	08004727 	.word	0x08004727
 8004520:	080046d3 	.word	0x080046d3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	1c59      	adds	r1, r3, #1
 8004528:	7b7b      	ldrb	r3, [r7, #13]
 800452a:	7bba      	ldrb	r2, [r7, #14]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ff88 	bl	8004442 <ucg_com_SendCmdArg>
 8004532:	7bbb      	ldrb	r3, [r7, #14]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	7b7b      	ldrb	r3, [r7, #13]
 8004538:	4413      	add	r3, r2
 800453a:	461a      	mov	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4413      	add	r3, r2
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	e0ef      	b.n	8004724 <ucg_com_SendCmdSeq+0x26c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff ff0c 	bl	8004370 <ucg_com_SetCDLineStatus>
 8004558:	7b7b      	ldrb	r3, [r7, #13]
 800455a:	b299      	uxth	r1, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	3301      	adds	r3, #1
 8004560:	461a      	mov	r2, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ff4d 	bl	8004402 <ucg_com_SendStringP>
 8004568:	7b7b      	ldrb	r3, [r7, #13]
 800456a:	3301      	adds	r3, #1
 800456c:	461a      	mov	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	4413      	add	r3, r2
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	e0d6      	b.n	8004724 <ucg_com_SendCmdSeq+0x26c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff feed 	bl	8004370 <ucg_com_SetCDLineStatus>
 8004596:	7b7b      	ldrb	r3, [r7, #13]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <ucg_com_SendCmdSeq+0xf4>
 800459c:	7b7b      	ldrb	r3, [r7, #13]
 800459e:	b299      	uxth	r1, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	461a      	mov	r2, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ff2b 	bl	8004402 <ucg_com_SendStringP>
 80045ac:	7b7b      	ldrb	r3, [r7, #13]
 80045ae:	3301      	adds	r3, #1
 80045b0:	461a      	mov	r2, r3
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4413      	add	r3, r2
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	e0b4      	b.n	8004724 <ucg_com_SendCmdSeq+0x26c>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	7b7b      	ldrb	r3, [r7, #13]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff feea 	bl	80043b2 <ucg_com_DelayMilliseconds>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	e09e      	b.n	8004724 <ucg_com_SendCmdSeq+0x26c>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	73fb      	strb	r3, [r7, #15]
 80045f2:	7b7b      	ldrb	r3, [r7, #13]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	4413      	add	r3, r2
 8004600:	b29b      	uxth	r3, r3
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fec3 	bl	8004390 <ucg_com_DelayMicroseconds>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	3301      	adds	r3, #1
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	e088      	b.n	8004724 <ucg_com_SendCmdSeq+0x26c>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	733b      	strb	r3, [r7, #12]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fe96 	bl	8004370 <ucg_com_SetCDLineStatus>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800464a:	461a      	mov	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004652:	441a      	add	r2, r3
 8004654:	7b7b      	ldrb	r3, [r7, #13]
 8004656:	fa42 f303 	asr.w	r3, r2, r3
 800465a:	b2da      	uxtb	r2, r3
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	4013      	ands	r3, r2
 8004660:	b2da      	uxtb	r2, r3
 8004662:	7b3b      	ldrb	r3, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	b2db      	uxtb	r3, r3
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff feb7 	bl	80043de <ucg_com_SendByte>
 8004670:	e058      	b.n	8004724 <ucg_com_SendCmdSeq+0x26c>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	3301      	adds	r3, #1
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	733b      	strb	r3, [r7, #12]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fe66 	bl	8004370 <ucg_com_SetCDLineStatus>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80046b2:	441a      	add	r2, r3
 80046b4:	7b7b      	ldrb	r3, [r7, #13]
 80046b6:	fa42 f303 	asr.w	r3, r2, r3
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	4013      	ands	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	7b3b      	ldrb	r3, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fe87 	bl	80043de <ucg_com_SendByte>
 80046d0:	e028      	b.n	8004724 <ucg_com_SendCmdSeq+0x26c>
 80046d2:	7b7b      	ldrb	r3, [r7, #13]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	73bb      	strb	r3, [r7, #14]
 80046d8:	7b7b      	ldrb	r3, [r7, #13]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	737b      	strb	r3, [r7, #13]
 80046e0:	7bbb      	ldrb	r3, [r7, #14]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d00c      	beq.n	8004700 <ucg_com_SendCmdSeq+0x248>
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d013      	beq.n	8004712 <ucg_com_SendCmdSeq+0x25a>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d116      	bne.n	800471c <ucg_com_SendCmdSeq+0x264>
 80046ee:	7b7b      	ldrb	r3, [r7, #13]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fe19 	bl	8004330 <ucg_com_SetResetLineStatus>
 80046fe:	e00d      	b.n	800471c <ucg_com_SendCmdSeq+0x264>
 8004700:	7b7b      	ldrb	r3, [r7, #13]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff fe20 	bl	8004350 <ucg_com_SetCSLineStatus>
 8004710:	e004      	b.n	800471c <ucg_com_SendCmdSeq+0x264>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7b7a      	ldrb	r2, [r7, #13]
 8004716:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800471a:	bf00      	nop
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	bf00      	nop
 8004724:	e6cd      	b.n	80044c2 <ucg_com_SendCmdSeq+0xa>
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop

08004730 <siprintf>:
 8004730:	b40e      	push	{r1, r2, r3}
 8004732:	b500      	push	{lr}
 8004734:	b09c      	sub	sp, #112	; 0x70
 8004736:	ab1d      	add	r3, sp, #116	; 0x74
 8004738:	9002      	str	r0, [sp, #8]
 800473a:	9006      	str	r0, [sp, #24]
 800473c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004740:	4809      	ldr	r0, [pc, #36]	; (8004768 <siprintf+0x38>)
 8004742:	9107      	str	r1, [sp, #28]
 8004744:	9104      	str	r1, [sp, #16]
 8004746:	4909      	ldr	r1, [pc, #36]	; (800476c <siprintf+0x3c>)
 8004748:	f853 2b04 	ldr.w	r2, [r3], #4
 800474c:	9105      	str	r1, [sp, #20]
 800474e:	6800      	ldr	r0, [r0, #0]
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	a902      	add	r1, sp, #8
 8004754:	f000 f992 	bl	8004a7c <_svfiprintf_r>
 8004758:	9b02      	ldr	r3, [sp, #8]
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	b01c      	add	sp, #112	; 0x70
 8004760:	f85d eb04 	ldr.w	lr, [sp], #4
 8004764:	b003      	add	sp, #12
 8004766:	4770      	bx	lr
 8004768:	20000074 	.word	0x20000074
 800476c:	ffff0208 	.word	0xffff0208

08004770 <memset>:
 8004770:	4402      	add	r2, r0
 8004772:	4603      	mov	r3, r0
 8004774:	4293      	cmp	r3, r2
 8004776:	d100      	bne.n	800477a <memset+0xa>
 8004778:	4770      	bx	lr
 800477a:	f803 1b01 	strb.w	r1, [r3], #1
 800477e:	e7f9      	b.n	8004774 <memset+0x4>

08004780 <__errno>:
 8004780:	4b01      	ldr	r3, [pc, #4]	; (8004788 <__errno+0x8>)
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000074 	.word	0x20000074

0800478c <__libc_init_array>:
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	4d0d      	ldr	r5, [pc, #52]	; (80047c4 <__libc_init_array+0x38>)
 8004790:	4c0d      	ldr	r4, [pc, #52]	; (80047c8 <__libc_init_array+0x3c>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	2600      	movs	r6, #0
 8004798:	42a6      	cmp	r6, r4
 800479a:	d109      	bne.n	80047b0 <__libc_init_array+0x24>
 800479c:	4d0b      	ldr	r5, [pc, #44]	; (80047cc <__libc_init_array+0x40>)
 800479e:	4c0c      	ldr	r4, [pc, #48]	; (80047d0 <__libc_init_array+0x44>)
 80047a0:	f000 fc6a 	bl	8005078 <_init>
 80047a4:	1b64      	subs	r4, r4, r5
 80047a6:	10a4      	asrs	r4, r4, #2
 80047a8:	2600      	movs	r6, #0
 80047aa:	42a6      	cmp	r6, r4
 80047ac:	d105      	bne.n	80047ba <__libc_init_array+0x2e>
 80047ae:	bd70      	pop	{r4, r5, r6, pc}
 80047b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b4:	4798      	blx	r3
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7ee      	b.n	8004798 <__libc_init_array+0xc>
 80047ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80047be:	4798      	blx	r3
 80047c0:	3601      	adds	r6, #1
 80047c2:	e7f2      	b.n	80047aa <__libc_init_array+0x1e>
 80047c4:	080059a0 	.word	0x080059a0
 80047c8:	080059a0 	.word	0x080059a0
 80047cc:	080059a0 	.word	0x080059a0
 80047d0:	080059a4 	.word	0x080059a4

080047d4 <__retarget_lock_acquire_recursive>:
 80047d4:	4770      	bx	lr

080047d6 <__retarget_lock_release_recursive>:
 80047d6:	4770      	bx	lr

080047d8 <_free_r>:
 80047d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047da:	2900      	cmp	r1, #0
 80047dc:	d044      	beq.n	8004868 <_free_r+0x90>
 80047de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e2:	9001      	str	r0, [sp, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f1a1 0404 	sub.w	r4, r1, #4
 80047ea:	bfb8      	it	lt
 80047ec:	18e4      	addlt	r4, r4, r3
 80047ee:	f000 f8df 	bl	80049b0 <__malloc_lock>
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <_free_r+0x94>)
 80047f4:	9801      	ldr	r0, [sp, #4]
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	b933      	cbnz	r3, 8004808 <_free_r+0x30>
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	6014      	str	r4, [r2, #0]
 80047fe:	b003      	add	sp, #12
 8004800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004804:	f000 b8da 	b.w	80049bc <__malloc_unlock>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d908      	bls.n	800481e <_free_r+0x46>
 800480c:	6825      	ldr	r5, [r4, #0]
 800480e:	1961      	adds	r1, r4, r5
 8004810:	428b      	cmp	r3, r1
 8004812:	bf01      	itttt	eq
 8004814:	6819      	ldreq	r1, [r3, #0]
 8004816:	685b      	ldreq	r3, [r3, #4]
 8004818:	1949      	addeq	r1, r1, r5
 800481a:	6021      	streq	r1, [r4, #0]
 800481c:	e7ed      	b.n	80047fa <_free_r+0x22>
 800481e:	461a      	mov	r2, r3
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b10b      	cbz	r3, 8004828 <_free_r+0x50>
 8004824:	42a3      	cmp	r3, r4
 8004826:	d9fa      	bls.n	800481e <_free_r+0x46>
 8004828:	6811      	ldr	r1, [r2, #0]
 800482a:	1855      	adds	r5, r2, r1
 800482c:	42a5      	cmp	r5, r4
 800482e:	d10b      	bne.n	8004848 <_free_r+0x70>
 8004830:	6824      	ldr	r4, [r4, #0]
 8004832:	4421      	add	r1, r4
 8004834:	1854      	adds	r4, r2, r1
 8004836:	42a3      	cmp	r3, r4
 8004838:	6011      	str	r1, [r2, #0]
 800483a:	d1e0      	bne.n	80047fe <_free_r+0x26>
 800483c:	681c      	ldr	r4, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	6053      	str	r3, [r2, #4]
 8004842:	440c      	add	r4, r1
 8004844:	6014      	str	r4, [r2, #0]
 8004846:	e7da      	b.n	80047fe <_free_r+0x26>
 8004848:	d902      	bls.n	8004850 <_free_r+0x78>
 800484a:	230c      	movs	r3, #12
 800484c:	6003      	str	r3, [r0, #0]
 800484e:	e7d6      	b.n	80047fe <_free_r+0x26>
 8004850:	6825      	ldr	r5, [r4, #0]
 8004852:	1961      	adds	r1, r4, r5
 8004854:	428b      	cmp	r3, r1
 8004856:	bf04      	itt	eq
 8004858:	6819      	ldreq	r1, [r3, #0]
 800485a:	685b      	ldreq	r3, [r3, #4]
 800485c:	6063      	str	r3, [r4, #4]
 800485e:	bf04      	itt	eq
 8004860:	1949      	addeq	r1, r1, r5
 8004862:	6021      	streq	r1, [r4, #0]
 8004864:	6054      	str	r4, [r2, #4]
 8004866:	e7ca      	b.n	80047fe <_free_r+0x26>
 8004868:	b003      	add	sp, #12
 800486a:	bd30      	pop	{r4, r5, pc}
 800486c:	200014bc 	.word	0x200014bc

08004870 <sbrk_aligned>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4e0e      	ldr	r6, [pc, #56]	; (80048ac <sbrk_aligned+0x3c>)
 8004874:	460c      	mov	r4, r1
 8004876:	6831      	ldr	r1, [r6, #0]
 8004878:	4605      	mov	r5, r0
 800487a:	b911      	cbnz	r1, 8004882 <sbrk_aligned+0x12>
 800487c:	f000 fba6 	bl	8004fcc <_sbrk_r>
 8004880:	6030      	str	r0, [r6, #0]
 8004882:	4621      	mov	r1, r4
 8004884:	4628      	mov	r0, r5
 8004886:	f000 fba1 	bl	8004fcc <_sbrk_r>
 800488a:	1c43      	adds	r3, r0, #1
 800488c:	d00a      	beq.n	80048a4 <sbrk_aligned+0x34>
 800488e:	1cc4      	adds	r4, r0, #3
 8004890:	f024 0403 	bic.w	r4, r4, #3
 8004894:	42a0      	cmp	r0, r4
 8004896:	d007      	beq.n	80048a8 <sbrk_aligned+0x38>
 8004898:	1a21      	subs	r1, r4, r0
 800489a:	4628      	mov	r0, r5
 800489c:	f000 fb96 	bl	8004fcc <_sbrk_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d101      	bne.n	80048a8 <sbrk_aligned+0x38>
 80048a4:	f04f 34ff 	mov.w	r4, #4294967295
 80048a8:	4620      	mov	r0, r4
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	200014c0 	.word	0x200014c0

080048b0 <_malloc_r>:
 80048b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b4:	1ccd      	adds	r5, r1, #3
 80048b6:	f025 0503 	bic.w	r5, r5, #3
 80048ba:	3508      	adds	r5, #8
 80048bc:	2d0c      	cmp	r5, #12
 80048be:	bf38      	it	cc
 80048c0:	250c      	movcc	r5, #12
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	4607      	mov	r7, r0
 80048c6:	db01      	blt.n	80048cc <_malloc_r+0x1c>
 80048c8:	42a9      	cmp	r1, r5
 80048ca:	d905      	bls.n	80048d8 <_malloc_r+0x28>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	2600      	movs	r6, #0
 80048d2:	4630      	mov	r0, r6
 80048d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049ac <_malloc_r+0xfc>
 80048dc:	f000 f868 	bl	80049b0 <__malloc_lock>
 80048e0:	f8d8 3000 	ldr.w	r3, [r8]
 80048e4:	461c      	mov	r4, r3
 80048e6:	bb5c      	cbnz	r4, 8004940 <_malloc_r+0x90>
 80048e8:	4629      	mov	r1, r5
 80048ea:	4638      	mov	r0, r7
 80048ec:	f7ff ffc0 	bl	8004870 <sbrk_aligned>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	4604      	mov	r4, r0
 80048f4:	d155      	bne.n	80049a2 <_malloc_r+0xf2>
 80048f6:	f8d8 4000 	ldr.w	r4, [r8]
 80048fa:	4626      	mov	r6, r4
 80048fc:	2e00      	cmp	r6, #0
 80048fe:	d145      	bne.n	800498c <_malloc_r+0xdc>
 8004900:	2c00      	cmp	r4, #0
 8004902:	d048      	beq.n	8004996 <_malloc_r+0xe6>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	4631      	mov	r1, r6
 8004908:	4638      	mov	r0, r7
 800490a:	eb04 0903 	add.w	r9, r4, r3
 800490e:	f000 fb5d 	bl	8004fcc <_sbrk_r>
 8004912:	4581      	cmp	r9, r0
 8004914:	d13f      	bne.n	8004996 <_malloc_r+0xe6>
 8004916:	6821      	ldr	r1, [r4, #0]
 8004918:	1a6d      	subs	r5, r5, r1
 800491a:	4629      	mov	r1, r5
 800491c:	4638      	mov	r0, r7
 800491e:	f7ff ffa7 	bl	8004870 <sbrk_aligned>
 8004922:	3001      	adds	r0, #1
 8004924:	d037      	beq.n	8004996 <_malloc_r+0xe6>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	442b      	add	r3, r5
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f8d8 3000 	ldr.w	r3, [r8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d038      	beq.n	80049a6 <_malloc_r+0xf6>
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	42a2      	cmp	r2, r4
 8004938:	d12b      	bne.n	8004992 <_malloc_r+0xe2>
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	e00f      	b.n	8004960 <_malloc_r+0xb0>
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	1b52      	subs	r2, r2, r5
 8004944:	d41f      	bmi.n	8004986 <_malloc_r+0xd6>
 8004946:	2a0b      	cmp	r2, #11
 8004948:	d917      	bls.n	800497a <_malloc_r+0xca>
 800494a:	1961      	adds	r1, r4, r5
 800494c:	42a3      	cmp	r3, r4
 800494e:	6025      	str	r5, [r4, #0]
 8004950:	bf18      	it	ne
 8004952:	6059      	strne	r1, [r3, #4]
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	bf08      	it	eq
 8004958:	f8c8 1000 	streq.w	r1, [r8]
 800495c:	5162      	str	r2, [r4, r5]
 800495e:	604b      	str	r3, [r1, #4]
 8004960:	4638      	mov	r0, r7
 8004962:	f104 060b 	add.w	r6, r4, #11
 8004966:	f000 f829 	bl	80049bc <__malloc_unlock>
 800496a:	f026 0607 	bic.w	r6, r6, #7
 800496e:	1d23      	adds	r3, r4, #4
 8004970:	1af2      	subs	r2, r6, r3
 8004972:	d0ae      	beq.n	80048d2 <_malloc_r+0x22>
 8004974:	1b9b      	subs	r3, r3, r6
 8004976:	50a3      	str	r3, [r4, r2]
 8004978:	e7ab      	b.n	80048d2 <_malloc_r+0x22>
 800497a:	42a3      	cmp	r3, r4
 800497c:	6862      	ldr	r2, [r4, #4]
 800497e:	d1dd      	bne.n	800493c <_malloc_r+0x8c>
 8004980:	f8c8 2000 	str.w	r2, [r8]
 8004984:	e7ec      	b.n	8004960 <_malloc_r+0xb0>
 8004986:	4623      	mov	r3, r4
 8004988:	6864      	ldr	r4, [r4, #4]
 800498a:	e7ac      	b.n	80048e6 <_malloc_r+0x36>
 800498c:	4634      	mov	r4, r6
 800498e:	6876      	ldr	r6, [r6, #4]
 8004990:	e7b4      	b.n	80048fc <_malloc_r+0x4c>
 8004992:	4613      	mov	r3, r2
 8004994:	e7cc      	b.n	8004930 <_malloc_r+0x80>
 8004996:	230c      	movs	r3, #12
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4638      	mov	r0, r7
 800499c:	f000 f80e 	bl	80049bc <__malloc_unlock>
 80049a0:	e797      	b.n	80048d2 <_malloc_r+0x22>
 80049a2:	6025      	str	r5, [r4, #0]
 80049a4:	e7dc      	b.n	8004960 <_malloc_r+0xb0>
 80049a6:	605b      	str	r3, [r3, #4]
 80049a8:	deff      	udf	#255	; 0xff
 80049aa:	bf00      	nop
 80049ac:	200014bc 	.word	0x200014bc

080049b0 <__malloc_lock>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__malloc_lock+0x8>)
 80049b2:	f7ff bf0f 	b.w	80047d4 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	200014b8 	.word	0x200014b8

080049bc <__malloc_unlock>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__malloc_unlock+0x8>)
 80049be:	f7ff bf0a 	b.w	80047d6 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	200014b8 	.word	0x200014b8

080049c8 <__ssputs_r>:
 80049c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	688e      	ldr	r6, [r1, #8]
 80049ce:	461f      	mov	r7, r3
 80049d0:	42be      	cmp	r6, r7
 80049d2:	680b      	ldr	r3, [r1, #0]
 80049d4:	4682      	mov	sl, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	4690      	mov	r8, r2
 80049da:	d82c      	bhi.n	8004a36 <__ssputs_r+0x6e>
 80049dc:	898a      	ldrh	r2, [r1, #12]
 80049de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049e2:	d026      	beq.n	8004a32 <__ssputs_r+0x6a>
 80049e4:	6965      	ldr	r5, [r4, #20]
 80049e6:	6909      	ldr	r1, [r1, #16]
 80049e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049ec:	eba3 0901 	sub.w	r9, r3, r1
 80049f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049f4:	1c7b      	adds	r3, r7, #1
 80049f6:	444b      	add	r3, r9
 80049f8:	106d      	asrs	r5, r5, #1
 80049fa:	429d      	cmp	r5, r3
 80049fc:	bf38      	it	cc
 80049fe:	461d      	movcc	r5, r3
 8004a00:	0553      	lsls	r3, r2, #21
 8004a02:	d527      	bpl.n	8004a54 <__ssputs_r+0x8c>
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7ff ff53 	bl	80048b0 <_malloc_r>
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	b360      	cbz	r0, 8004a68 <__ssputs_r+0xa0>
 8004a0e:	6921      	ldr	r1, [r4, #16]
 8004a10:	464a      	mov	r2, r9
 8004a12:	f000 faeb 	bl	8004fec <memcpy>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	6126      	str	r6, [r4, #16]
 8004a24:	6165      	str	r5, [r4, #20]
 8004a26:	444e      	add	r6, r9
 8004a28:	eba5 0509 	sub.w	r5, r5, r9
 8004a2c:	6026      	str	r6, [r4, #0]
 8004a2e:	60a5      	str	r5, [r4, #8]
 8004a30:	463e      	mov	r6, r7
 8004a32:	42be      	cmp	r6, r7
 8004a34:	d900      	bls.n	8004a38 <__ssputs_r+0x70>
 8004a36:	463e      	mov	r6, r7
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	4632      	mov	r2, r6
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	f000 faab 	bl	8004f98 <memmove>
 8004a42:	68a3      	ldr	r3, [r4, #8]
 8004a44:	1b9b      	subs	r3, r3, r6
 8004a46:	60a3      	str	r3, [r4, #8]
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	4433      	add	r3, r6
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	2000      	movs	r0, #0
 8004a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a54:	462a      	mov	r2, r5
 8004a56:	f000 fad7 	bl	8005008 <_realloc_r>
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d1e0      	bne.n	8004a22 <__ssputs_r+0x5a>
 8004a60:	6921      	ldr	r1, [r4, #16]
 8004a62:	4650      	mov	r0, sl
 8004a64:	f7ff feb8 	bl	80047d8 <_free_r>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	f8ca 3000 	str.w	r3, [sl]
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	e7e9      	b.n	8004a50 <__ssputs_r+0x88>

08004a7c <_svfiprintf_r>:
 8004a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a80:	4698      	mov	r8, r3
 8004a82:	898b      	ldrh	r3, [r1, #12]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	b09d      	sub	sp, #116	; 0x74
 8004a88:	4607      	mov	r7, r0
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	d50e      	bpl.n	8004aae <_svfiprintf_r+0x32>
 8004a90:	690b      	ldr	r3, [r1, #16]
 8004a92:	b963      	cbnz	r3, 8004aae <_svfiprintf_r+0x32>
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	f7ff ff0b 	bl	80048b0 <_malloc_r>
 8004a9a:	6028      	str	r0, [r5, #0]
 8004a9c:	6128      	str	r0, [r5, #16]
 8004a9e:	b920      	cbnz	r0, 8004aaa <_svfiprintf_r+0x2e>
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	e0d0      	b.n	8004c4c <_svfiprintf_r+0x1d0>
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	616b      	str	r3, [r5, #20]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab2:	2320      	movs	r3, #32
 8004ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004abc:	2330      	movs	r3, #48	; 0x30
 8004abe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c64 <_svfiprintf_r+0x1e8>
 8004ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac6:	f04f 0901 	mov.w	r9, #1
 8004aca:	4623      	mov	r3, r4
 8004acc:	469a      	mov	sl, r3
 8004ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad2:	b10a      	cbz	r2, 8004ad8 <_svfiprintf_r+0x5c>
 8004ad4:	2a25      	cmp	r2, #37	; 0x25
 8004ad6:	d1f9      	bne.n	8004acc <_svfiprintf_r+0x50>
 8004ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8004adc:	d00b      	beq.n	8004af6 <_svfiprintf_r+0x7a>
 8004ade:	465b      	mov	r3, fp
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f7ff ff6f 	bl	80049c8 <__ssputs_r>
 8004aea:	3001      	adds	r0, #1
 8004aec:	f000 80a9 	beq.w	8004c42 <_svfiprintf_r+0x1c6>
 8004af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af2:	445a      	add	r2, fp
 8004af4:	9209      	str	r2, [sp, #36]	; 0x24
 8004af6:	f89a 3000 	ldrb.w	r3, [sl]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80a1 	beq.w	8004c42 <_svfiprintf_r+0x1c6>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b0a:	f10a 0a01 	add.w	sl, sl, #1
 8004b0e:	9304      	str	r3, [sp, #16]
 8004b10:	9307      	str	r3, [sp, #28]
 8004b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b16:	931a      	str	r3, [sp, #104]	; 0x68
 8004b18:	4654      	mov	r4, sl
 8004b1a:	2205      	movs	r2, #5
 8004b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b20:	4850      	ldr	r0, [pc, #320]	; (8004c64 <_svfiprintf_r+0x1e8>)
 8004b22:	f7fb fb5d 	bl	80001e0 <memchr>
 8004b26:	9a04      	ldr	r2, [sp, #16]
 8004b28:	b9d8      	cbnz	r0, 8004b62 <_svfiprintf_r+0xe6>
 8004b2a:	06d0      	lsls	r0, r2, #27
 8004b2c:	bf44      	itt	mi
 8004b2e:	2320      	movmi	r3, #32
 8004b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b34:	0711      	lsls	r1, r2, #28
 8004b36:	bf44      	itt	mi
 8004b38:	232b      	movmi	r3, #43	; 0x2b
 8004b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b42:	2b2a      	cmp	r3, #42	; 0x2a
 8004b44:	d015      	beq.n	8004b72 <_svfiprintf_r+0xf6>
 8004b46:	9a07      	ldr	r2, [sp, #28]
 8004b48:	4654      	mov	r4, sl
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f04f 0c0a 	mov.w	ip, #10
 8004b50:	4621      	mov	r1, r4
 8004b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b56:	3b30      	subs	r3, #48	; 0x30
 8004b58:	2b09      	cmp	r3, #9
 8004b5a:	d94d      	bls.n	8004bf8 <_svfiprintf_r+0x17c>
 8004b5c:	b1b0      	cbz	r0, 8004b8c <_svfiprintf_r+0x110>
 8004b5e:	9207      	str	r2, [sp, #28]
 8004b60:	e014      	b.n	8004b8c <_svfiprintf_r+0x110>
 8004b62:	eba0 0308 	sub.w	r3, r0, r8
 8004b66:	fa09 f303 	lsl.w	r3, r9, r3
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	9304      	str	r3, [sp, #16]
 8004b6e:	46a2      	mov	sl, r4
 8004b70:	e7d2      	b.n	8004b18 <_svfiprintf_r+0x9c>
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	1d19      	adds	r1, r3, #4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	9103      	str	r1, [sp, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfbb      	ittet	lt
 8004b7e:	425b      	neglt	r3, r3
 8004b80:	f042 0202 	orrlt.w	r2, r2, #2
 8004b84:	9307      	strge	r3, [sp, #28]
 8004b86:	9307      	strlt	r3, [sp, #28]
 8004b88:	bfb8      	it	lt
 8004b8a:	9204      	strlt	r2, [sp, #16]
 8004b8c:	7823      	ldrb	r3, [r4, #0]
 8004b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b90:	d10c      	bne.n	8004bac <_svfiprintf_r+0x130>
 8004b92:	7863      	ldrb	r3, [r4, #1]
 8004b94:	2b2a      	cmp	r3, #42	; 0x2a
 8004b96:	d134      	bne.n	8004c02 <_svfiprintf_r+0x186>
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	1d1a      	adds	r2, r3, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	9203      	str	r2, [sp, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bfb8      	it	lt
 8004ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ba8:	3402      	adds	r4, #2
 8004baa:	9305      	str	r3, [sp, #20]
 8004bac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004c74 <_svfiprintf_r+0x1f8>
 8004bb0:	7821      	ldrb	r1, [r4, #0]
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	4650      	mov	r0, sl
 8004bb6:	f7fb fb13 	bl	80001e0 <memchr>
 8004bba:	b138      	cbz	r0, 8004bcc <_svfiprintf_r+0x150>
 8004bbc:	9b04      	ldr	r3, [sp, #16]
 8004bbe:	eba0 000a 	sub.w	r0, r0, sl
 8004bc2:	2240      	movs	r2, #64	; 0x40
 8004bc4:	4082      	lsls	r2, r0
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	3401      	adds	r4, #1
 8004bca:	9304      	str	r3, [sp, #16]
 8004bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd0:	4825      	ldr	r0, [pc, #148]	; (8004c68 <_svfiprintf_r+0x1ec>)
 8004bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bd6:	2206      	movs	r2, #6
 8004bd8:	f7fb fb02 	bl	80001e0 <memchr>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d038      	beq.n	8004c52 <_svfiprintf_r+0x1d6>
 8004be0:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <_svfiprintf_r+0x1f0>)
 8004be2:	bb1b      	cbnz	r3, 8004c2c <_svfiprintf_r+0x1b0>
 8004be4:	9b03      	ldr	r3, [sp, #12]
 8004be6:	3307      	adds	r3, #7
 8004be8:	f023 0307 	bic.w	r3, r3, #7
 8004bec:	3308      	adds	r3, #8
 8004bee:	9303      	str	r3, [sp, #12]
 8004bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf2:	4433      	add	r3, r6
 8004bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf6:	e768      	b.n	8004aca <_svfiprintf_r+0x4e>
 8004bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	2001      	movs	r0, #1
 8004c00:	e7a6      	b.n	8004b50 <_svfiprintf_r+0xd4>
 8004c02:	2300      	movs	r3, #0
 8004c04:	3401      	adds	r4, #1
 8004c06:	9305      	str	r3, [sp, #20]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f04f 0c0a 	mov.w	ip, #10
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c14:	3a30      	subs	r2, #48	; 0x30
 8004c16:	2a09      	cmp	r2, #9
 8004c18:	d903      	bls.n	8004c22 <_svfiprintf_r+0x1a6>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0c6      	beq.n	8004bac <_svfiprintf_r+0x130>
 8004c1e:	9105      	str	r1, [sp, #20]
 8004c20:	e7c4      	b.n	8004bac <_svfiprintf_r+0x130>
 8004c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c26:	4604      	mov	r4, r0
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e7f0      	b.n	8004c0e <_svfiprintf_r+0x192>
 8004c2c:	ab03      	add	r3, sp, #12
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	462a      	mov	r2, r5
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <_svfiprintf_r+0x1f4>)
 8004c34:	a904      	add	r1, sp, #16
 8004c36:	4638      	mov	r0, r7
 8004c38:	f3af 8000 	nop.w
 8004c3c:	1c42      	adds	r2, r0, #1
 8004c3e:	4606      	mov	r6, r0
 8004c40:	d1d6      	bne.n	8004bf0 <_svfiprintf_r+0x174>
 8004c42:	89ab      	ldrh	r3, [r5, #12]
 8004c44:	065b      	lsls	r3, r3, #25
 8004c46:	f53f af2d 	bmi.w	8004aa4 <_svfiprintf_r+0x28>
 8004c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c4c:	b01d      	add	sp, #116	; 0x74
 8004c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c52:	ab03      	add	r3, sp, #12
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	462a      	mov	r2, r5
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <_svfiprintf_r+0x1f4>)
 8004c5a:	a904      	add	r1, sp, #16
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f000 f879 	bl	8004d54 <_printf_i>
 8004c62:	e7eb      	b.n	8004c3c <_svfiprintf_r+0x1c0>
 8004c64:	0800596c 	.word	0x0800596c
 8004c68:	08005976 	.word	0x08005976
 8004c6c:	00000000 	.word	0x00000000
 8004c70:	080049c9 	.word	0x080049c9
 8004c74:	08005972 	.word	0x08005972

08004c78 <_printf_common>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	4699      	mov	r9, r3
 8004c80:	688a      	ldr	r2, [r1, #8]
 8004c82:	690b      	ldr	r3, [r1, #16]
 8004c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bfb8      	it	lt
 8004c8c:	4613      	movlt	r3, r2
 8004c8e:	6033      	str	r3, [r6, #0]
 8004c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c94:	4607      	mov	r7, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	b10a      	cbz	r2, 8004c9e <_printf_common+0x26>
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	6033      	str	r3, [r6, #0]
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	0699      	lsls	r1, r3, #26
 8004ca2:	bf42      	ittt	mi
 8004ca4:	6833      	ldrmi	r3, [r6, #0]
 8004ca6:	3302      	addmi	r3, #2
 8004ca8:	6033      	strmi	r3, [r6, #0]
 8004caa:	6825      	ldr	r5, [r4, #0]
 8004cac:	f015 0506 	ands.w	r5, r5, #6
 8004cb0:	d106      	bne.n	8004cc0 <_printf_common+0x48>
 8004cb2:	f104 0a19 	add.w	sl, r4, #25
 8004cb6:	68e3      	ldr	r3, [r4, #12]
 8004cb8:	6832      	ldr	r2, [r6, #0]
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	42ab      	cmp	r3, r5
 8004cbe:	dc26      	bgt.n	8004d0e <_printf_common+0x96>
 8004cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cc4:	1e13      	subs	r3, r2, #0
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	bf18      	it	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	0692      	lsls	r2, r2, #26
 8004cce:	d42b      	bmi.n	8004d28 <_printf_common+0xb0>
 8004cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	47c0      	blx	r8
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d01e      	beq.n	8004d1c <_printf_common+0xa4>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	6922      	ldr	r2, [r4, #16]
 8004ce2:	f003 0306 	and.w	r3, r3, #6
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	bf02      	ittt	eq
 8004cea:	68e5      	ldreq	r5, [r4, #12]
 8004cec:	6833      	ldreq	r3, [r6, #0]
 8004cee:	1aed      	subeq	r5, r5, r3
 8004cf0:	68a3      	ldr	r3, [r4, #8]
 8004cf2:	bf0c      	ite	eq
 8004cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf8:	2500      	movne	r5, #0
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	bfc4      	itt	gt
 8004cfe:	1a9b      	subgt	r3, r3, r2
 8004d00:	18ed      	addgt	r5, r5, r3
 8004d02:	2600      	movs	r6, #0
 8004d04:	341a      	adds	r4, #26
 8004d06:	42b5      	cmp	r5, r6
 8004d08:	d11a      	bne.n	8004d40 <_printf_common+0xc8>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e008      	b.n	8004d20 <_printf_common+0xa8>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4652      	mov	r2, sl
 8004d12:	4649      	mov	r1, r9
 8004d14:	4638      	mov	r0, r7
 8004d16:	47c0      	blx	r8
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d103      	bne.n	8004d24 <_printf_common+0xac>
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d24:	3501      	adds	r5, #1
 8004d26:	e7c6      	b.n	8004cb6 <_printf_common+0x3e>
 8004d28:	18e1      	adds	r1, r4, r3
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	2030      	movs	r0, #48	; 0x30
 8004d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d32:	4422      	add	r2, r4
 8004d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	e7c7      	b.n	8004cd0 <_printf_common+0x58>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4622      	mov	r2, r4
 8004d44:	4649      	mov	r1, r9
 8004d46:	4638      	mov	r0, r7
 8004d48:	47c0      	blx	r8
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d0e6      	beq.n	8004d1c <_printf_common+0xa4>
 8004d4e:	3601      	adds	r6, #1
 8004d50:	e7d9      	b.n	8004d06 <_printf_common+0x8e>
	...

08004d54 <_printf_i>:
 8004d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d58:	7e0f      	ldrb	r7, [r1, #24]
 8004d5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d5c:	2f78      	cmp	r7, #120	; 0x78
 8004d5e:	4691      	mov	r9, r2
 8004d60:	4680      	mov	r8, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	469a      	mov	sl, r3
 8004d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d6a:	d807      	bhi.n	8004d7c <_printf_i+0x28>
 8004d6c:	2f62      	cmp	r7, #98	; 0x62
 8004d6e:	d80a      	bhi.n	8004d86 <_printf_i+0x32>
 8004d70:	2f00      	cmp	r7, #0
 8004d72:	f000 80d4 	beq.w	8004f1e <_printf_i+0x1ca>
 8004d76:	2f58      	cmp	r7, #88	; 0x58
 8004d78:	f000 80c0 	beq.w	8004efc <_printf_i+0x1a8>
 8004d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d84:	e03a      	b.n	8004dfc <_printf_i+0xa8>
 8004d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d8a:	2b15      	cmp	r3, #21
 8004d8c:	d8f6      	bhi.n	8004d7c <_printf_i+0x28>
 8004d8e:	a101      	add	r1, pc, #4	; (adr r1, 8004d94 <_printf_i+0x40>)
 8004d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d94:	08004ded 	.word	0x08004ded
 8004d98:	08004e01 	.word	0x08004e01
 8004d9c:	08004d7d 	.word	0x08004d7d
 8004da0:	08004d7d 	.word	0x08004d7d
 8004da4:	08004d7d 	.word	0x08004d7d
 8004da8:	08004d7d 	.word	0x08004d7d
 8004dac:	08004e01 	.word	0x08004e01
 8004db0:	08004d7d 	.word	0x08004d7d
 8004db4:	08004d7d 	.word	0x08004d7d
 8004db8:	08004d7d 	.word	0x08004d7d
 8004dbc:	08004d7d 	.word	0x08004d7d
 8004dc0:	08004f05 	.word	0x08004f05
 8004dc4:	08004e2d 	.word	0x08004e2d
 8004dc8:	08004ebf 	.word	0x08004ebf
 8004dcc:	08004d7d 	.word	0x08004d7d
 8004dd0:	08004d7d 	.word	0x08004d7d
 8004dd4:	08004f27 	.word	0x08004f27
 8004dd8:	08004d7d 	.word	0x08004d7d
 8004ddc:	08004e2d 	.word	0x08004e2d
 8004de0:	08004d7d 	.word	0x08004d7d
 8004de4:	08004d7d 	.word	0x08004d7d
 8004de8:	08004ec7 	.word	0x08004ec7
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	602a      	str	r2, [r5, #0]
 8004df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e09f      	b.n	8004f40 <_printf_i+0x1ec>
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	0607      	lsls	r7, r0, #24
 8004e06:	f103 0104 	add.w	r1, r3, #4
 8004e0a:	6029      	str	r1, [r5, #0]
 8004e0c:	d501      	bpl.n	8004e12 <_printf_i+0xbe>
 8004e0e:	681e      	ldr	r6, [r3, #0]
 8004e10:	e003      	b.n	8004e1a <_printf_i+0xc6>
 8004e12:	0646      	lsls	r6, r0, #25
 8004e14:	d5fb      	bpl.n	8004e0e <_printf_i+0xba>
 8004e16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	da03      	bge.n	8004e26 <_printf_i+0xd2>
 8004e1e:	232d      	movs	r3, #45	; 0x2d
 8004e20:	4276      	negs	r6, r6
 8004e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e26:	485a      	ldr	r0, [pc, #360]	; (8004f90 <_printf_i+0x23c>)
 8004e28:	230a      	movs	r3, #10
 8004e2a:	e012      	b.n	8004e52 <_printf_i+0xfe>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	1d19      	adds	r1, r3, #4
 8004e32:	6029      	str	r1, [r5, #0]
 8004e34:	0605      	lsls	r5, r0, #24
 8004e36:	d501      	bpl.n	8004e3c <_printf_i+0xe8>
 8004e38:	681e      	ldr	r6, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <_printf_i+0xee>
 8004e3c:	0641      	lsls	r1, r0, #25
 8004e3e:	d5fb      	bpl.n	8004e38 <_printf_i+0xe4>
 8004e40:	881e      	ldrh	r6, [r3, #0]
 8004e42:	4853      	ldr	r0, [pc, #332]	; (8004f90 <_printf_i+0x23c>)
 8004e44:	2f6f      	cmp	r7, #111	; 0x6f
 8004e46:	bf0c      	ite	eq
 8004e48:	2308      	moveq	r3, #8
 8004e4a:	230a      	movne	r3, #10
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e52:	6865      	ldr	r5, [r4, #4]
 8004e54:	60a5      	str	r5, [r4, #8]
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	bfa2      	ittt	ge
 8004e5a:	6821      	ldrge	r1, [r4, #0]
 8004e5c:	f021 0104 	bicge.w	r1, r1, #4
 8004e60:	6021      	strge	r1, [r4, #0]
 8004e62:	b90e      	cbnz	r6, 8004e68 <_printf_i+0x114>
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	d04b      	beq.n	8004f00 <_printf_i+0x1ac>
 8004e68:	4615      	mov	r5, r2
 8004e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e72:	5dc7      	ldrb	r7, [r0, r7]
 8004e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e78:	4637      	mov	r7, r6
 8004e7a:	42bb      	cmp	r3, r7
 8004e7c:	460e      	mov	r6, r1
 8004e7e:	d9f4      	bls.n	8004e6a <_printf_i+0x116>
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d10b      	bne.n	8004e9c <_printf_i+0x148>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	07de      	lsls	r6, r3, #31
 8004e88:	d508      	bpl.n	8004e9c <_printf_i+0x148>
 8004e8a:	6923      	ldr	r3, [r4, #16]
 8004e8c:	6861      	ldr	r1, [r4, #4]
 8004e8e:	4299      	cmp	r1, r3
 8004e90:	bfde      	ittt	le
 8004e92:	2330      	movle	r3, #48	; 0x30
 8004e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e9c:	1b52      	subs	r2, r2, r5
 8004e9e:	6122      	str	r2, [r4, #16]
 8004ea0:	f8cd a000 	str.w	sl, [sp]
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	aa03      	add	r2, sp, #12
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4640      	mov	r0, r8
 8004eac:	f7ff fee4 	bl	8004c78 <_printf_common>
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d14a      	bne.n	8004f4a <_printf_i+0x1f6>
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	b004      	add	sp, #16
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	f043 0320 	orr.w	r3, r3, #32
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	4833      	ldr	r0, [pc, #204]	; (8004f94 <_printf_i+0x240>)
 8004ec8:	2778      	movs	r7, #120	; 0x78
 8004eca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	6829      	ldr	r1, [r5, #0]
 8004ed2:	061f      	lsls	r7, r3, #24
 8004ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ed8:	d402      	bmi.n	8004ee0 <_printf_i+0x18c>
 8004eda:	065f      	lsls	r7, r3, #25
 8004edc:	bf48      	it	mi
 8004ede:	b2b6      	uxthmi	r6, r6
 8004ee0:	07df      	lsls	r7, r3, #31
 8004ee2:	bf48      	it	mi
 8004ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ee8:	6029      	str	r1, [r5, #0]
 8004eea:	bf48      	it	mi
 8004eec:	6023      	strmi	r3, [r4, #0]
 8004eee:	b91e      	cbnz	r6, 8004ef8 <_printf_i+0x1a4>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f023 0320 	bic.w	r3, r3, #32
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	2310      	movs	r3, #16
 8004efa:	e7a7      	b.n	8004e4c <_printf_i+0xf8>
 8004efc:	4824      	ldr	r0, [pc, #144]	; (8004f90 <_printf_i+0x23c>)
 8004efe:	e7e4      	b.n	8004eca <_printf_i+0x176>
 8004f00:	4615      	mov	r5, r2
 8004f02:	e7bd      	b.n	8004e80 <_printf_i+0x12c>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	6826      	ldr	r6, [r4, #0]
 8004f08:	6961      	ldr	r1, [r4, #20]
 8004f0a:	1d18      	adds	r0, r3, #4
 8004f0c:	6028      	str	r0, [r5, #0]
 8004f0e:	0635      	lsls	r5, r6, #24
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	d501      	bpl.n	8004f18 <_printf_i+0x1c4>
 8004f14:	6019      	str	r1, [r3, #0]
 8004f16:	e002      	b.n	8004f1e <_printf_i+0x1ca>
 8004f18:	0670      	lsls	r0, r6, #25
 8004f1a:	d5fb      	bpl.n	8004f14 <_printf_i+0x1c0>
 8004f1c:	8019      	strh	r1, [r3, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	4615      	mov	r5, r2
 8004f24:	e7bc      	b.n	8004ea0 <_printf_i+0x14c>
 8004f26:	682b      	ldr	r3, [r5, #0]
 8004f28:	1d1a      	adds	r2, r3, #4
 8004f2a:	602a      	str	r2, [r5, #0]
 8004f2c:	681d      	ldr	r5, [r3, #0]
 8004f2e:	6862      	ldr	r2, [r4, #4]
 8004f30:	2100      	movs	r1, #0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f7fb f954 	bl	80001e0 <memchr>
 8004f38:	b108      	cbz	r0, 8004f3e <_printf_i+0x1ea>
 8004f3a:	1b40      	subs	r0, r0, r5
 8004f3c:	6060      	str	r0, [r4, #4]
 8004f3e:	6863      	ldr	r3, [r4, #4]
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	2300      	movs	r3, #0
 8004f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f48:	e7aa      	b.n	8004ea0 <_printf_i+0x14c>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	462a      	mov	r2, r5
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4640      	mov	r0, r8
 8004f52:	47d0      	blx	sl
 8004f54:	3001      	adds	r0, #1
 8004f56:	d0ad      	beq.n	8004eb4 <_printf_i+0x160>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	079b      	lsls	r3, r3, #30
 8004f5c:	d413      	bmi.n	8004f86 <_printf_i+0x232>
 8004f5e:	68e0      	ldr	r0, [r4, #12]
 8004f60:	9b03      	ldr	r3, [sp, #12]
 8004f62:	4298      	cmp	r0, r3
 8004f64:	bfb8      	it	lt
 8004f66:	4618      	movlt	r0, r3
 8004f68:	e7a6      	b.n	8004eb8 <_printf_i+0x164>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	4649      	mov	r1, r9
 8004f70:	4640      	mov	r0, r8
 8004f72:	47d0      	blx	sl
 8004f74:	3001      	adds	r0, #1
 8004f76:	d09d      	beq.n	8004eb4 <_printf_i+0x160>
 8004f78:	3501      	adds	r5, #1
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	9903      	ldr	r1, [sp, #12]
 8004f7e:	1a5b      	subs	r3, r3, r1
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	dcf2      	bgt.n	8004f6a <_printf_i+0x216>
 8004f84:	e7eb      	b.n	8004f5e <_printf_i+0x20a>
 8004f86:	2500      	movs	r5, #0
 8004f88:	f104 0619 	add.w	r6, r4, #25
 8004f8c:	e7f5      	b.n	8004f7a <_printf_i+0x226>
 8004f8e:	bf00      	nop
 8004f90:	0800597d 	.word	0x0800597d
 8004f94:	0800598e 	.word	0x0800598e

08004f98 <memmove>:
 8004f98:	4288      	cmp	r0, r1
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	eb01 0402 	add.w	r4, r1, r2
 8004fa0:	d902      	bls.n	8004fa8 <memmove+0x10>
 8004fa2:	4284      	cmp	r4, r0
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	d807      	bhi.n	8004fb8 <memmove+0x20>
 8004fa8:	1e43      	subs	r3, r0, #1
 8004faa:	42a1      	cmp	r1, r4
 8004fac:	d008      	beq.n	8004fc0 <memmove+0x28>
 8004fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fb6:	e7f8      	b.n	8004faa <memmove+0x12>
 8004fb8:	4402      	add	r2, r0
 8004fba:	4601      	mov	r1, r0
 8004fbc:	428a      	cmp	r2, r1
 8004fbe:	d100      	bne.n	8004fc2 <memmove+0x2a>
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fca:	e7f7      	b.n	8004fbc <memmove+0x24>

08004fcc <_sbrk_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4d06      	ldr	r5, [pc, #24]	; (8004fe8 <_sbrk_r+0x1c>)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	f7fc f9b0 	bl	800133c <_sbrk>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_sbrk_r+0x1a>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_sbrk_r+0x1a>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	200014b4 	.word	0x200014b4

08004fec <memcpy>:
 8004fec:	440a      	add	r2, r1
 8004fee:	4291      	cmp	r1, r2
 8004ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ff4:	d100      	bne.n	8004ff8 <memcpy+0xc>
 8004ff6:	4770      	bx	lr
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005002:	4291      	cmp	r1, r2
 8005004:	d1f9      	bne.n	8004ffa <memcpy+0xe>
 8005006:	bd10      	pop	{r4, pc}

08005008 <_realloc_r>:
 8005008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800500c:	4680      	mov	r8, r0
 800500e:	4614      	mov	r4, r2
 8005010:	460e      	mov	r6, r1
 8005012:	b921      	cbnz	r1, 800501e <_realloc_r+0x16>
 8005014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005018:	4611      	mov	r1, r2
 800501a:	f7ff bc49 	b.w	80048b0 <_malloc_r>
 800501e:	b92a      	cbnz	r2, 800502c <_realloc_r+0x24>
 8005020:	f7ff fbda 	bl	80047d8 <_free_r>
 8005024:	4625      	mov	r5, r4
 8005026:	4628      	mov	r0, r5
 8005028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800502c:	f000 f81b 	bl	8005066 <_malloc_usable_size_r>
 8005030:	4284      	cmp	r4, r0
 8005032:	4607      	mov	r7, r0
 8005034:	d802      	bhi.n	800503c <_realloc_r+0x34>
 8005036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800503a:	d812      	bhi.n	8005062 <_realloc_r+0x5a>
 800503c:	4621      	mov	r1, r4
 800503e:	4640      	mov	r0, r8
 8005040:	f7ff fc36 	bl	80048b0 <_malloc_r>
 8005044:	4605      	mov	r5, r0
 8005046:	2800      	cmp	r0, #0
 8005048:	d0ed      	beq.n	8005026 <_realloc_r+0x1e>
 800504a:	42bc      	cmp	r4, r7
 800504c:	4622      	mov	r2, r4
 800504e:	4631      	mov	r1, r6
 8005050:	bf28      	it	cs
 8005052:	463a      	movcs	r2, r7
 8005054:	f7ff ffca 	bl	8004fec <memcpy>
 8005058:	4631      	mov	r1, r6
 800505a:	4640      	mov	r0, r8
 800505c:	f7ff fbbc 	bl	80047d8 <_free_r>
 8005060:	e7e1      	b.n	8005026 <_realloc_r+0x1e>
 8005062:	4635      	mov	r5, r6
 8005064:	e7df      	b.n	8005026 <_realloc_r+0x1e>

08005066 <_malloc_usable_size_r>:
 8005066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800506a:	1f18      	subs	r0, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	bfbc      	itt	lt
 8005070:	580b      	ldrlt	r3, [r1, r0]
 8005072:	18c0      	addlt	r0, r0, r3
 8005074:	4770      	bx	lr
	...

08005078 <_init>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr

08005084 <_fini>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr
