
baitaptv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005f8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800078c  0800078c  0000178c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800079c  0800079c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800079c  0800079c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800079c  0800079c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800079c  0800079c  0000179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007a0  080007a0  000017a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080007a4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080007a8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080007a8  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c71  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006fb  00000000  00000000  00003ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  000043a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001fc  00000000  00000000  00004660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006f99  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023e5  00000000  00000000  0000b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002518f  00000000  00000000  0000dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00032d69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b34  00000000  00000000  00032dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000338e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000774 	.word	0x08000774

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000774 	.word	0x08000774

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	@ (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	@ (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	@ (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	@ (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	0800078c 	.word	0x0800078c

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	@ (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	@ (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	@ (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	@ (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	@ (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	@ (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	@ (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	@ (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	@ (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	@ (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	@ 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	@ (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	@ (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	e076      	b.n	80004f2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000404:	2201      	movs	r2, #1
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	693a      	ldr	r2, [r7, #16]
 8000414:	4013      	ands	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	429a      	cmp	r2, r3
 800041e:	d165      	bne.n	80004ec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	2103      	movs	r1, #3
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	43db      	mvns	r3, r3
 8000430:	401a      	ands	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	4619      	mov	r1, r3
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	431a      	orrs	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d003      	beq.n	800045e <GPIO_Init+0x76>
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d12e      	bne.n	80004bc <GPIO_Init+0xd4>
      {
        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	401a      	ands	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	4619      	mov	r1, r3
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	609a      	str	r2, [r3, #8]

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	b29b      	uxth	r3, r3
 8000494:	4619      	mov	r1, r3
 8000496:	2301      	movs	r3, #1
 8000498:	408b      	lsls	r3, r1
 800049a:	43db      	mvns	r3, r3
 800049c:	401a      	ands	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	7992      	ldrb	r2, [r2, #6]
 80004aa:	4611      	mov	r1, r2
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	b292      	uxth	r2, r2
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	b292      	uxth	r2, r2
 80004b6:	431a      	orrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	401a      	ands	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	79db      	ldrb	r3, [r3, #7]
 80004dc:	4619      	mov	r1, r3
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d985      	bls.n	8000404 <GPIO_Init+0x1c>
    }
  }
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	371c      	adds	r7, #28
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800051a:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <RCC_AHB1PeriphClockCmd+0x3c>)
 800051c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800051e:	4909      	ldr	r1, [pc, #36]	@ (8000544 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4313      	orrs	r3, r2
 8000524:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000526:	e006      	b.n	8000536 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <RCC_AHB1PeriphClockCmd+0x3c>)
 800052a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	43db      	mvns	r3, r3
 8000530:	4904      	ldr	r1, [pc, #16]	@ (8000544 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000532:	4013      	ands	r3, r2
 8000534:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800

08000548 <main>:
static void Led_Init(void);
static void AppInitCommon(void);

//-----------------------------------------------------------------------------
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

	AppInitCommon();
 800054c:	f000 f81a 	bl	8000584 <AppInitCommon>

	while(1)
	{
		//Turn on the Led when pressing the button----------------------------
		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_PIN13) == GPIO_PIN_LOW)
 8000550:	210d      	movs	r1, #13
 8000552:	480a      	ldr	r0, [pc, #40]	@ (800057c <main+0x34>)
 8000554:	f000 f850 	bl	80005f8 <ButtonRead_Status>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d108      	bne.n	8000570 <main+0x28>
		{
			Delay(5);
 800055e:	2005      	movs	r0, #5
 8000560:	f000 f861 	bl	8000626 <Delay>
			LedControl_SetStatus (LED_GPIO_PORT, LED_PIN5, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2105      	movs	r1, #5
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <main+0x38>)
 800056a:	f000 f815 	bl	8000598 <LedControl_SetStatus>
 800056e:	e7ef      	b.n	8000550 <main+0x8>
		}

		//Turn off the led when pressing the button---------------------------
		else
		{
			LedControl_SetStatus (LED_GPIO_PORT, LED_PIN5, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2105      	movs	r1, #5
 8000574:	4802      	ldr	r0, [pc, #8]	@ (8000580 <main+0x38>)
 8000576:	f000 f80f 	bl	8000598 <LedControl_SetStatus>
		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_PIN13) == GPIO_PIN_LOW)
 800057a:	e7e9      	b.n	8000550 <main+0x8>
 800057c:	40020800 	.word	0x40020800
 8000580:	40020000 	.word	0x40020000

08000584 <AppInitCommon>:
 * @param  None
 * @retval None
 */
static
void AppInitCommon(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	//System Init--------------------------------------------------------------
	SystemCoreClockUpdate();
 8000588:	f7ff fe5a 	bl	8000240 <SystemCoreClockUpdate>

	//Button Init--------------------------------------------------------------
	Button_Init();
 800058c:	f000 f888 	bl	80006a0 <Button_Init>

	//Led Init-----------------------------------------------------------------
	Led_Init();
 8000590:	f000 f86a 	bl	8000668 <Led_Init>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <LedControl_SetStatus>:
 * @param  None
 * @retval None
 */
static
void LedControl_SetStatus(GPIO_TypeDef * GPIOx, uint8_t GPIO_PIN, uint8_t Status)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
 80005a4:	4613      	mov	r3, r2
 80005a6:	70bb      	strb	r3, [r7, #2]

	//Set bit in BSRR Registers------------------------------------------------
	if (Status == GPIO_PIN_SET)
 80005a8:	78bb      	ldrb	r3, [r7, #2]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d10d      	bne.n	80005ca <LedControl_SetStatus+0x32>
	{
		GPIOx->BSRRL |= 1 << GPIO_PIN;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	8b1b      	ldrh	r3, [r3, #24]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	b21b      	sxth	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	831a      	strh	r2, [r3, #24]
	}
	//Reset bit in BSRR Registers----------------------------------------------
	if (Status == GPIO_PIN_RESET)
 80005ca:	78bb      	ldrb	r3, [r7, #2]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d10d      	bne.n	80005ec <LedControl_SetStatus+0x54>
	{
		GPIOx->BSRRH |= 1 << GPIO_PIN;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	8b5b      	ldrh	r3, [r3, #26]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	835a      	strh	r2, [r3, #26]
	}
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <ButtonRead_Status>:
 * @param  None
 * @retval None
 */
static
uint8_t ButtonRead_Status(GPIO_TypeDef * GPIOx, uint32_t GPIO_PIN)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	uint32_t Read_Pin;

	//Read bit in IDR Registers------------------------------------------------
	Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	691a      	ldr	r2, [r3, #16]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	fa22 f303 	lsr.w	r3, r2, r3
 800060c:	60fb      	str	r3, [r7, #12]
	Read_Pin = Read_Pin & 0x01;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	60fb      	str	r3, [r7, #12]

	return Read_Pin;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	b2db      	uxtb	r3, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <Delay>:
 * @param  None
 * @retval None
 */
static
void Delay(uint32_t ms)
{
 8000626:	b480      	push	{r7}
 8000628:	b085      	sub	sp, #20
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for (i = 0 ; i < ms ; i ++)
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e00d      	b.n	8000650 <Delay+0x2a>
	{
		for (j = 0; j<5000; j++){;}
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	e002      	b.n	8000640 <Delay+0x1a>
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	3301      	adds	r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000646:	4293      	cmp	r3, r2
 8000648:	d9f7      	bls.n	800063a <Delay+0x14>
	for (i = 0 ; i < ms ; i ++)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3ed      	bcc.n	8000634 <Delay+0xe>
	}
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <Led_Init>:
 * @param  None
 * @retval None
 */
static
void Led_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	//Declare type variable GPIO Struct----------------------------------------
	GPIO_InitTypeDef GPIO_InitStructure;

	//Enable Clock GPIOA-------------------------------------------------------
	RCC_AHB1PeriphClockCmd(LEDControl_SetClock, ENABLE);
 800066e:	2101      	movs	r1, #1
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff ff49 	bl	8000508 <RCC_AHB1PeriphClockCmd>

	//Choose Pin Led-----------------------------------------------------------
	GPIO_InitStructure.GPIO_Pin = LED_GPIO_PIN;
 8000676:	2320      	movs	r3, #32
 8000678:	603b      	str	r3, [r7, #0]

	//Choose Pin Led as Out----------------------------------------------------
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800067a:	2301      	movs	r3, #1
 800067c:	713b      	strb	r3, [r7, #4]

	//Choose Speed Pin---------------------------------------------------------
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800067e:	2302      	movs	r3, #2
 8000680:	717b      	strb	r3, [r7, #5]

	//Select type--------------------------------------------------------------
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000682:	2300      	movs	r3, #0
 8000684:	71bb      	strb	r3, [r7, #6]

	//Select status------------------------------------------------------------
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
 8000686:	2302      	movs	r3, #2
 8000688:	71fb      	strb	r3, [r7, #7]

	//The function initializes all of the above values-------------------------
	GPIO_Init(LED_GPIO_PORT, &GPIO_InitStructure);
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4803      	ldr	r0, [pc, #12]	@ (800069c <Led_Init+0x34>)
 8000690:	f7ff feaa 	bl	80003e8 <GPIO_Init>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020000 	.word	0x40020000

080006a0 <Button_Init>:
 * @param  None
 * @retval None
 */
static
void Button_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	//Declare type variable GPIO Struc-----------------------------------------
	GPIO_InitTypeDef GPIO_InitStructure ;

	//Enable Clock GPIOC-------------------------------------------------------
	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 80006a6:	2101      	movs	r1, #1
 80006a8:	2004      	movs	r0, #4
 80006aa:	f7ff ff2d 	bl	8000508 <RCC_AHB1PeriphClockCmd>

	//Choose Pin BUTTON--------------------------------------------------------
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 80006ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b2:	603b      	str	r3, [r7, #0]

	//Choose Pin Led as Input--------------------------------------------------
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80006b4:	2300      	movs	r3, #0
 80006b6:	713b      	strb	r3, [r7, #4]

	//Choose Speed Pin---------------------------------------------------------
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006b8:	2302      	movs	r3, #2
 80006ba:	717b      	strb	r3, [r7, #5]

	//Select status------------------------------------------------------------
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80006bc:	2301      	movs	r3, #1
 80006be:	71fb      	strb	r3, [r7, #7]

	//The function initializes all of the above values-------------------------
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <Button_Init+0x34>)
 80006c6:	f7ff fe8f 	bl	80003e8 <GPIO_Init>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020800 	.word	0x40020800

080006d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006dc:	f7ff fd7a 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	@ (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000706:	f000 f811 	bl	800072c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070a:	f7ff ff1d 	bl	8000548 <main>

0800070e <LoopForever>:

LoopForever:
  b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   r0, =_estack
 8000710:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800071c:	080007a4 	.word	0x080007a4
  ldr r2, =_sbss
 8000720:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000724:	20000020 	.word	0x20000020

08000728 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC_IRQHandler>
	...

0800072c <__libc_init_array>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	4d0d      	ldr	r5, [pc, #52]	@ (8000764 <__libc_init_array+0x38>)
 8000730:	4c0d      	ldr	r4, [pc, #52]	@ (8000768 <__libc_init_array+0x3c>)
 8000732:	1b64      	subs	r4, r4, r5
 8000734:	10a4      	asrs	r4, r4, #2
 8000736:	2600      	movs	r6, #0
 8000738:	42a6      	cmp	r6, r4
 800073a:	d109      	bne.n	8000750 <__libc_init_array+0x24>
 800073c:	4d0b      	ldr	r5, [pc, #44]	@ (800076c <__libc_init_array+0x40>)
 800073e:	4c0c      	ldr	r4, [pc, #48]	@ (8000770 <__libc_init_array+0x44>)
 8000740:	f000 f818 	bl	8000774 <_init>
 8000744:	1b64      	subs	r4, r4, r5
 8000746:	10a4      	asrs	r4, r4, #2
 8000748:	2600      	movs	r6, #0
 800074a:	42a6      	cmp	r6, r4
 800074c:	d105      	bne.n	800075a <__libc_init_array+0x2e>
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f855 3b04 	ldr.w	r3, [r5], #4
 8000754:	4798      	blx	r3
 8000756:	3601      	adds	r6, #1
 8000758:	e7ee      	b.n	8000738 <__libc_init_array+0xc>
 800075a:	f855 3b04 	ldr.w	r3, [r5], #4
 800075e:	4798      	blx	r3
 8000760:	3601      	adds	r6, #1
 8000762:	e7f2      	b.n	800074a <__libc_init_array+0x1e>
 8000764:	0800079c 	.word	0x0800079c
 8000768:	0800079c 	.word	0x0800079c
 800076c:	0800079c 	.word	0x0800079c
 8000770:	080007a0 	.word	0x080007a0

08000774 <_init>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	bf00      	nop
 8000778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077a:	bc08      	pop	{r3}
 800077c:	469e      	mov	lr, r3
 800077e:	4770      	bx	lr

08000780 <_fini>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr
